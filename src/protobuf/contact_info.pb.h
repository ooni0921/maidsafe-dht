// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_contact_5finfo_2eproto__INCLUDED
#define PROTOBUF_contact_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace kad {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_contact_5finfo_2eproto();
void protobuf_AssignDesc_contact_5finfo_2eproto();
void protobuf_ShutdownFile_contact_5finfo_2eproto();

class ContactInfo;

// ===================================================================

class ContactInfo : public ::google::protobuf::Message {
 public:
  ContactInfo();
  virtual ~ContactInfo();
  
  ContactInfo(const ContactInfo& from);
  
  inline ContactInfo& operator=(const ContactInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactInfo& default_instance();
  void Swap(ContactInfo* other);
  
  // implements Message ----------------------------------------------
  
  ContactInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactInfo& from);
  void MergeFrom(const ContactInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes node_id = 1;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  inline const ::std::string& node_id() const;
  inline void set_node_id(const ::std::string& value);
  inline void set_node_id(const char* value);
  inline void set_node_id(const void* value, size_t size);
  inline ::std::string* mutable_node_id();
  
  // required bytes ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  
  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // optional bytes local_ip = 4;
  inline bool has_local_ip() const;
  inline void clear_local_ip();
  static const int kLocalIpFieldNumber = 4;
  inline const ::std::string& local_ip() const;
  inline void set_local_ip(const ::std::string& value);
  inline void set_local_ip(const char* value);
  inline void set_local_ip(const void* value, size_t size);
  inline ::std::string* mutable_local_ip();
  
  // optional int32 local_port = 5;
  inline bool has_local_port() const;
  inline void clear_local_port();
  static const int kLocalPortFieldNumber = 5;
  inline ::google::protobuf::int32 local_port() const;
  inline void set_local_port(::google::protobuf::int32 value);
  
  // optional bytes rv_ip = 6;
  inline bool has_rv_ip() const;
  inline void clear_rv_ip();
  static const int kRvIpFieldNumber = 6;
  inline const ::std::string& rv_ip() const;
  inline void set_rv_ip(const ::std::string& value);
  inline void set_rv_ip(const char* value);
  inline void set_rv_ip(const void* value, size_t size);
  inline ::std::string* mutable_rv_ip();
  
  // optional int32 rv_port = 7;
  inline bool has_rv_port() const;
  inline void clear_rv_port();
  static const int kRvPortFieldNumber = 7;
  inline ::google::protobuf::int32 rv_port() const;
  inline void set_rv_port(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* node_id_;
  static const ::std::string _default_node_id_;
  ::std::string* ip_;
  static const ::std::string _default_ip_;
  ::google::protobuf::int32 port_;
  ::std::string* local_ip_;
  static const ::std::string _default_local_ip_;
  ::google::protobuf::int32 local_port_;
  ::std::string* rv_ip_;
  static const ::std::string _default_rv_ip_;
  ::google::protobuf::int32 rv_port_;
  friend void  protobuf_AddDesc_contact_5finfo_2eproto();
  friend void protobuf_AssignDesc_contact_5finfo_2eproto();
  friend void protobuf_ShutdownFile_contact_5finfo_2eproto();
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContactInfo* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// ContactInfo

// required bytes node_id = 1;
inline bool ContactInfo::has_node_id() const {
  return _has_bit(0);
}
inline void ContactInfo::clear_node_id() {
  if (node_id_ != &_default_node_id_) {
    node_id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ContactInfo::node_id() const {
  return *node_id_;
}
inline void ContactInfo::set_node_id(const ::std::string& value) {
  _set_bit(0);
  if (node_id_ == &_default_node_id_) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(value);
}
inline void ContactInfo::set_node_id(const char* value) {
  _set_bit(0);
  if (node_id_ == &_default_node_id_) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(value);
}
inline void ContactInfo::set_node_id(const void* value, size_t size) {
  _set_bit(0);
  if (node_id_ == &_default_node_id_) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContactInfo::mutable_node_id() {
  _set_bit(0);
  if (node_id_ == &_default_node_id_) {
    node_id_ = new ::std::string;
  }
  return node_id_;
}

// required bytes ip = 2;
inline bool ContactInfo::has_ip() const {
  return _has_bit(1);
}
inline void ContactInfo::clear_ip() {
  if (ip_ != &_default_ip_) {
    ip_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ContactInfo::ip() const {
  return *ip_;
}
inline void ContactInfo::set_ip(const ::std::string& value) {
  _set_bit(1);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ContactInfo::set_ip(const char* value) {
  _set_bit(1);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ContactInfo::set_ip(const void* value, size_t size) {
  _set_bit(1);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContactInfo::mutable_ip() {
  _set_bit(1);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  return ip_;
}

// required int32 port = 3;
inline bool ContactInfo::has_port() const {
  return _has_bit(2);
}
inline void ContactInfo::clear_port() {
  port_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 ContactInfo::port() const {
  return port_;
}
inline void ContactInfo::set_port(::google::protobuf::int32 value) {
  _set_bit(2);
  port_ = value;
}

// optional bytes local_ip = 4;
inline bool ContactInfo::has_local_ip() const {
  return _has_bit(3);
}
inline void ContactInfo::clear_local_ip() {
  if (local_ip_ != &_default_local_ip_) {
    local_ip_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& ContactInfo::local_ip() const {
  return *local_ip_;
}
inline void ContactInfo::set_local_ip(const ::std::string& value) {
  _set_bit(3);
  if (local_ip_ == &_default_local_ip_) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void ContactInfo::set_local_ip(const char* value) {
  _set_bit(3);
  if (local_ip_ == &_default_local_ip_) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void ContactInfo::set_local_ip(const void* value, size_t size) {
  _set_bit(3);
  if (local_ip_ == &_default_local_ip_) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContactInfo::mutable_local_ip() {
  _set_bit(3);
  if (local_ip_ == &_default_local_ip_) {
    local_ip_ = new ::std::string;
  }
  return local_ip_;
}

// optional int32 local_port = 5;
inline bool ContactInfo::has_local_port() const {
  return _has_bit(4);
}
inline void ContactInfo::clear_local_port() {
  local_port_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 ContactInfo::local_port() const {
  return local_port_;
}
inline void ContactInfo::set_local_port(::google::protobuf::int32 value) {
  _set_bit(4);
  local_port_ = value;
}

// optional bytes rv_ip = 6;
inline bool ContactInfo::has_rv_ip() const {
  return _has_bit(5);
}
inline void ContactInfo::clear_rv_ip() {
  if (rv_ip_ != &_default_rv_ip_) {
    rv_ip_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& ContactInfo::rv_ip() const {
  return *rv_ip_;
}
inline void ContactInfo::set_rv_ip(const ::std::string& value) {
  _set_bit(5);
  if (rv_ip_ == &_default_rv_ip_) {
    rv_ip_ = new ::std::string;
  }
  rv_ip_->assign(value);
}
inline void ContactInfo::set_rv_ip(const char* value) {
  _set_bit(5);
  if (rv_ip_ == &_default_rv_ip_) {
    rv_ip_ = new ::std::string;
  }
  rv_ip_->assign(value);
}
inline void ContactInfo::set_rv_ip(const void* value, size_t size) {
  _set_bit(5);
  if (rv_ip_ == &_default_rv_ip_) {
    rv_ip_ = new ::std::string;
  }
  rv_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContactInfo::mutable_rv_ip() {
  _set_bit(5);
  if (rv_ip_ == &_default_rv_ip_) {
    rv_ip_ = new ::std::string;
  }
  return rv_ip_;
}

// optional int32 rv_port = 7;
inline bool ContactInfo::has_rv_port() const {
  return _has_bit(6);
}
inline void ContactInfo::clear_rv_port() {
  rv_port_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 ContactInfo::rv_port() const {
  return rv_port_;
}
inline void ContactInfo::set_rv_port(::google::protobuf::int32 value) {
  _set_bit(6);
  rv_port_ = value;
}


}  // namespace kad
#endif  // PROTOBUF_contact_5finfo_2eproto__INCLUDED
