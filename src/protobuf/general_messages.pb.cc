// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "general_messages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace base {

namespace {

const ::google::protobuf::Descriptor* GeneralResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VaultConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VaultConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* KadConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KadConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* KadConfig_Contact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KadConfig_Contact_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_general_5fmessages_2eproto() {
  protobuf_AddDesc_general_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "general_messages.proto");
  GOOGLE_CHECK(file != NULL);
  GeneralResponse_descriptor_ = file->message_type(0);
  static const int GeneralResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralResponse, result_),
  };
  GeneralResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeneralResponse_descriptor_,
      GeneralResponse::default_instance_,
      GeneralResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeneralResponse));
  VaultConfig_descriptor_ = file->message_type(1);
  static const int VaultConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, pmid_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, pmid_private_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, signed_pmid_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, chunkstore_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, datastore_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, port_),
  };
  VaultConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VaultConfig_descriptor_,
      VaultConfig::default_instance_,
      VaultConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VaultConfig));
  KadConfig_descriptor_ = file->message_type(2);
  static const int KadConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig, contact_),
  };
  KadConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KadConfig_descriptor_,
      KadConfig::default_instance_,
      KadConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KadConfig));
  KadConfig_Contact_descriptor_ = KadConfig_descriptor_->nested_type(0);
  static const int KadConfig_Contact_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig_Contact, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig_Contact, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig_Contact, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig_Contact, local_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig_Contact, local_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig_Contact, rendezvouz_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig_Contact, rendezvouz_port_),
  };
  KadConfig_Contact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KadConfig_Contact_descriptor_,
      KadConfig_Contact::default_instance_,
      KadConfig_Contact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig_Contact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KadConfig_Contact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KadConfig_Contact));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_general_5fmessages_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeneralResponse_descriptor_, &GeneralResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VaultConfig_descriptor_, &VaultConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KadConfig_descriptor_, &KadConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KadConfig_Contact_descriptor_, &KadConfig_Contact::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_general_5fmessages_2eproto() {
  delete GeneralResponse::default_instance_;
  delete GeneralResponse_reflection_;
  delete VaultConfig::default_instance_;
  delete VaultConfig_reflection_;
  delete KadConfig::default_instance_;
  delete KadConfig_reflection_;
  delete KadConfig_Contact::default_instance_;
  delete KadConfig_Contact_reflection_;
}

void protobuf_AddDesc_general_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026general_messages.proto\022\004base\"!\n\017Genera"
    "lResponse\022\016\n\006result\030\001 \002(\014\"\221\001\n\013VaultConfi"
    "g\022\023\n\013pmid_public\030\001 \002(\014\022\024\n\014pmid_private\030\002"
    " \002(\014\022\032\n\022signed_pmid_public\030\003 \002(\014\022\026\n\016chun"
    "kstore_dir\030\004 \001(\014\022\025\n\rdatastore_dir\030\005 \001(\014\022"
    "\014\n\004port\030\006 \001(\005\"\320\001\n\tKadConfig\022\014\n\004port\030\001 \001("
    "\005\022(\n\007contact\030\002 \003(\0132\027.base.KadConfig.Cont"
    "act\032\212\001\n\007Contact\022\017\n\007node_id\030\001 \002(\014\022\n\n\002ip\030\002"
    " \002(\014\022\014\n\004port\030\003 \002(\005\022\020\n\010local_ip\030\004 \001(\014\022\022\n\n"
    "local_port\030\005 \001(\005\022\025\n\rrendezvouz_ip\030\006 \001(\014\022"
    "\027\n\017rendezvouz_port\030\007 \001(\005", 424);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "general_messages.proto", &protobuf_RegisterTypes);
  GeneralResponse::default_instance_ = new GeneralResponse();
  VaultConfig::default_instance_ = new VaultConfig();
  KadConfig::default_instance_ = new KadConfig();
  KadConfig_Contact::default_instance_ = new KadConfig_Contact();
  GeneralResponse::default_instance_->InitAsDefaultInstance();
  VaultConfig::default_instance_->InitAsDefaultInstance();
  KadConfig::default_instance_->InitAsDefaultInstance();
  KadConfig_Contact::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_general_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_general_5fmessages_2eproto {
  StaticDescriptorInitializer_general_5fmessages_2eproto() {
    protobuf_AddDesc_general_5fmessages_2eproto();
  }
} static_descriptor_initializer_general_5fmessages_2eproto_;


// ===================================================================

const ::std::string GeneralResponse::_default_result_;
#ifndef _MSC_VER
const int GeneralResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GeneralResponse::GeneralResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)) {
  SharedCtor();
}

void GeneralResponse::InitAsDefaultInstance() {}

GeneralResponse::GeneralResponse(const GeneralResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)) {
  SharedCtor();
  MergeFrom(from);
}

void GeneralResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&_default_result_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralResponse::~GeneralResponse() {
  SharedDtor();
}

void GeneralResponse::SharedDtor() {
  if (result_ != &_default_result_) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GeneralResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralResponse_descriptor_;
}

const GeneralResponse& GeneralResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_general_5fmessages_2eproto();  return *default_instance_;
}

GeneralResponse* GeneralResponse::default_instance_ = NULL;

GeneralResponse* GeneralResponse::New() const {
  return new GeneralResponse;
}

void GeneralResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != &_default_result_) {
        result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeneralResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_result()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeneralResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GeneralResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeneralResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeneralResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GeneralResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeneralResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeneralResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeneralResponse::MergeFrom(const GeneralResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeneralResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralResponse::CopyFrom(const GeneralResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralResponse::Swap(GeneralResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GeneralResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GeneralResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GeneralResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GeneralResponse_reflection_;
}

// ===================================================================

const ::std::string VaultConfig::_default_pmid_public_;
const ::std::string VaultConfig::_default_pmid_private_;
const ::std::string VaultConfig::_default_signed_pmid_public_;
const ::std::string VaultConfig::_default_chunkstore_dir_;
const ::std::string VaultConfig::_default_datastore_dir_;
#ifndef _MSC_VER
const int VaultConfig::kPmidPublicFieldNumber;
const int VaultConfig::kPmidPrivateFieldNumber;
const int VaultConfig::kSignedPmidPublicFieldNumber;
const int VaultConfig::kChunkstoreDirFieldNumber;
const int VaultConfig::kDatastoreDirFieldNumber;
const int VaultConfig::kPortFieldNumber;
#endif  // !_MSC_VER

VaultConfig::VaultConfig()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    pmid_public_(const_cast< ::std::string*>(&_default_pmid_public_)),
    pmid_private_(const_cast< ::std::string*>(&_default_pmid_private_)),
    signed_pmid_public_(const_cast< ::std::string*>(&_default_signed_pmid_public_)),
    chunkstore_dir_(const_cast< ::std::string*>(&_default_chunkstore_dir_)),
    datastore_dir_(const_cast< ::std::string*>(&_default_datastore_dir_)),
    port_(0) {
  SharedCtor();
}

void VaultConfig::InitAsDefaultInstance() {}

VaultConfig::VaultConfig(const VaultConfig& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    pmid_public_(const_cast< ::std::string*>(&_default_pmid_public_)),
    pmid_private_(const_cast< ::std::string*>(&_default_pmid_private_)),
    signed_pmid_public_(const_cast< ::std::string*>(&_default_signed_pmid_public_)),
    chunkstore_dir_(const_cast< ::std::string*>(&_default_chunkstore_dir_)),
    datastore_dir_(const_cast< ::std::string*>(&_default_datastore_dir_)),
    port_(0) {
  SharedCtor();
  MergeFrom(from);
}

void VaultConfig::SharedCtor() {
  _cached_size_ = 0;
  pmid_public_ = const_cast< ::std::string*>(&_default_pmid_public_);
  pmid_private_ = const_cast< ::std::string*>(&_default_pmid_private_);
  signed_pmid_public_ = const_cast< ::std::string*>(&_default_signed_pmid_public_);
  chunkstore_dir_ = const_cast< ::std::string*>(&_default_chunkstore_dir_);
  datastore_dir_ = const_cast< ::std::string*>(&_default_datastore_dir_);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VaultConfig::~VaultConfig() {
  SharedDtor();
}

void VaultConfig::SharedDtor() {
  if (pmid_public_ != &_default_pmid_public_) {
    delete pmid_public_;
  }
  if (pmid_private_ != &_default_pmid_private_) {
    delete pmid_private_;
  }
  if (signed_pmid_public_ != &_default_signed_pmid_public_) {
    delete signed_pmid_public_;
  }
  if (chunkstore_dir_ != &_default_chunkstore_dir_) {
    delete chunkstore_dir_;
  }
  if (datastore_dir_ != &_default_datastore_dir_) {
    delete datastore_dir_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* VaultConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultConfig_descriptor_;
}

const VaultConfig& VaultConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_general_5fmessages_2eproto();  return *default_instance_;
}

VaultConfig* VaultConfig::default_instance_ = NULL;

VaultConfig* VaultConfig::New() const {
  return new VaultConfig;
}

void VaultConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (pmid_public_ != &_default_pmid_public_) {
        pmid_public_->clear();
      }
    }
    if (_has_bit(1)) {
      if (pmid_private_ != &_default_pmid_private_) {
        pmid_private_->clear();
      }
    }
    if (_has_bit(2)) {
      if (signed_pmid_public_ != &_default_signed_pmid_public_) {
        signed_pmid_public_->clear();
      }
    }
    if (_has_bit(3)) {
      if (chunkstore_dir_ != &_default_chunkstore_dir_) {
        chunkstore_dir_->clear();
      }
    }
    if (_has_bit(4)) {
      if (datastore_dir_ != &_default_datastore_dir_) {
        datastore_dir_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VaultConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes pmid_public = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_public()));
        if (input->ExpectTag(18)) goto parse_pmid_private;
        break;
      }
      
      // required bytes pmid_private = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_private:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_private()));
        if (input->ExpectTag(26)) goto parse_signed_pmid_public;
        break;
      }
      
      // required bytes signed_pmid_public = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_pmid_public:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_pmid_public()));
        if (input->ExpectTag(34)) goto parse_chunkstore_dir;
        break;
      }
      
      // optional bytes chunkstore_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkstore_dir:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkstore_dir()));
        if (input->ExpectTag(42)) goto parse_datastore_dir;
        break;
      }
      
      // optional bytes datastore_dir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_datastore_dir:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_datastore_dir()));
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }
      
      // optional int32 port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &port_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VaultConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    VaultConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes pmid_public = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->pmid_public(), output);
  }
  
  // required bytes pmid_private = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_private(), output);
  }
  
  // required bytes signed_pmid_public = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->signed_pmid_public(), output);
  }
  
  // optional bytes chunkstore_dir = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->chunkstore_dir(), output);
  }
  
  // optional bytes datastore_dir = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->datastore_dir(), output);
  }
  
  // optional int32 port = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VaultConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes pmid_public = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->pmid_public(), target);
  }
  
  // required bytes pmid_private = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_private(), target);
  }
  
  // required bytes signed_pmid_public = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->signed_pmid_public(), target);
  }
  
  // optional bytes chunkstore_dir = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->chunkstore_dir(), target);
  }
  
  // optional bytes datastore_dir = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->datastore_dir(), target);
  }
  
  // optional int32 port = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VaultConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes pmid_public = 1;
    if (has_pmid_public()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_public());
    }
    
    // required bytes pmid_private = 2;
    if (has_pmid_private()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_private());
    }
    
    // required bytes signed_pmid_public = 3;
    if (has_signed_pmid_public()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_pmid_public());
    }
    
    // optional bytes chunkstore_dir = 4;
    if (has_chunkstore_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkstore_dir());
    }
    
    // optional bytes datastore_dir = 5;
    if (has_datastore_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->datastore_dir());
    }
    
    // optional int32 port = 6;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void VaultConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VaultConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VaultConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VaultConfig::MergeFrom(const VaultConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pmid_public(from.pmid_public());
    }
    if (from._has_bit(1)) {
      set_pmid_private(from.pmid_private());
    }
    if (from._has_bit(2)) {
      set_signed_pmid_public(from.signed_pmid_public());
    }
    if (from._has_bit(3)) {
      set_chunkstore_dir(from.chunkstore_dir());
    }
    if (from._has_bit(4)) {
      set_datastore_dir(from.datastore_dir());
    }
    if (from._has_bit(5)) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VaultConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultConfig::CopyFrom(const VaultConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultConfig::Swap(VaultConfig* other) {
  if (other != this) {
    std::swap(pmid_public_, other->pmid_public_);
    std::swap(pmid_private_, other->pmid_private_);
    std::swap(signed_pmid_public_, other->signed_pmid_public_);
    std::swap(chunkstore_dir_, other->chunkstore_dir_);
    std::swap(datastore_dir_, other->datastore_dir_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool VaultConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* VaultConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* VaultConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return VaultConfig_reflection_;
}

// ===================================================================

const ::std::string KadConfig_Contact::_default_node_id_;
const ::std::string KadConfig_Contact::_default_ip_;
const ::std::string KadConfig_Contact::_default_local_ip_;
const ::std::string KadConfig_Contact::_default_rendezvouz_ip_;
#ifndef _MSC_VER
const int KadConfig_Contact::kNodeIdFieldNumber;
const int KadConfig_Contact::kIpFieldNumber;
const int KadConfig_Contact::kPortFieldNumber;
const int KadConfig_Contact::kLocalIpFieldNumber;
const int KadConfig_Contact::kLocalPortFieldNumber;
const int KadConfig_Contact::kRendezvouzIpFieldNumber;
const int KadConfig_Contact::kRendezvouzPortFieldNumber;
#endif  // !_MSC_VER

KadConfig_Contact::KadConfig_Contact()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0),
    local_ip_(const_cast< ::std::string*>(&_default_local_ip_)),
    local_port_(0),
    rendezvouz_ip_(const_cast< ::std::string*>(&_default_rendezvouz_ip_)),
    rendezvouz_port_(0) {
  SharedCtor();
}

void KadConfig_Contact::InitAsDefaultInstance() {}

KadConfig_Contact::KadConfig_Contact(const KadConfig_Contact& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0),
    local_ip_(const_cast< ::std::string*>(&_default_local_ip_)),
    local_port_(0),
    rendezvouz_ip_(const_cast< ::std::string*>(&_default_rendezvouz_ip_)),
    rendezvouz_port_(0) {
  SharedCtor();
  MergeFrom(from);
}

void KadConfig_Contact::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&_default_node_id_);
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  port_ = 0;
  local_ip_ = const_cast< ::std::string*>(&_default_local_ip_);
  local_port_ = 0;
  rendezvouz_ip_ = const_cast< ::std::string*>(&_default_rendezvouz_ip_);
  rendezvouz_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KadConfig_Contact::~KadConfig_Contact() {
  SharedDtor();
}

void KadConfig_Contact::SharedDtor() {
  if (node_id_ != &_default_node_id_) {
    delete node_id_;
  }
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (local_ip_ != &_default_local_ip_) {
    delete local_ip_;
  }
  if (rendezvouz_ip_ != &_default_rendezvouz_ip_) {
    delete rendezvouz_ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* KadConfig_Contact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KadConfig_Contact_descriptor_;
}

const KadConfig_Contact& KadConfig_Contact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_general_5fmessages_2eproto();  return *default_instance_;
}

KadConfig_Contact* KadConfig_Contact::default_instance_ = NULL;

KadConfig_Contact* KadConfig_Contact::New() const {
  return new KadConfig_Contact;
}

void KadConfig_Contact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (node_id_ != &_default_node_id_) {
        node_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (_has_bit(3)) {
      if (local_ip_ != &_default_local_ip_) {
        local_ip_->clear();
      }
    }
    local_port_ = 0;
    if (_has_bit(5)) {
      if (rendezvouz_ip_ != &_default_rendezvouz_ip_) {
        rendezvouz_ip_->clear();
      }
    }
    rendezvouz_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KadConfig_Contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_node_id()));
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // required bytes ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_ip()));
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &port_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_local_ip;
        break;
      }
      
      // optional bytes local_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_local_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_local_ip()));
        if (input->ExpectTag(40)) goto parse_local_port;
        break;
      }
      
      // optional int32 local_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_local_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &local_port_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_rendezvouz_ip;
        break;
      }
      
      // optional bytes rendezvouz_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rendezvouz_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_rendezvouz_ip()));
        if (input->ExpectTag(56)) goto parse_rendezvouz_port;
        break;
      }
      
      // optional int32 rendezvouz_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rendezvouz_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &rendezvouz_port_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KadConfig_Contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    KadConfig_Contact::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes node_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->node_id(), output);
  }
  
  // required bytes ip = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->ip(), output);
  }
  
  // required int32 port = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->port(), output);
  }
  
  // optional bytes local_ip = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->local_ip(), output);
  }
  
  // optional int32 local_port = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->local_port(), output);
  }
  
  // optional bytes rendezvouz_ip = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->rendezvouz_ip(), output);
  }
  
  // optional int32 rendezvouz_port = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->rendezvouz_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KadConfig_Contact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes node_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->node_id(), target);
  }
  
  // required bytes ip = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->ip(), target);
  }
  
  // required int32 port = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->port(), target);
  }
  
  // optional bytes local_ip = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->local_ip(), target);
  }
  
  // optional int32 local_port = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->local_port(), target);
  }
  
  // optional bytes rendezvouz_ip = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->rendezvouz_ip(), target);
  }
  
  // optional int32 rendezvouz_port = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->rendezvouz_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KadConfig_Contact::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->node_id());
    }
    
    // required bytes ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->ip());
    }
    
    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->port());
    }
    
    // optional bytes local_ip = 4;
    if (has_local_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->local_ip());
    }
    
    // optional int32 local_port = 5;
    if (has_local_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->local_port());
    }
    
    // optional bytes rendezvouz_ip = 6;
    if (has_rendezvouz_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->rendezvouz_ip());
    }
    
    // optional int32 rendezvouz_port = 7;
    if (has_rendezvouz_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->rendezvouz_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void KadConfig_Contact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KadConfig_Contact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KadConfig_Contact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KadConfig_Contact::MergeFrom(const KadConfig_Contact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_node_id(from.node_id());
    }
    if (from._has_bit(1)) {
      set_ip(from.ip());
    }
    if (from._has_bit(2)) {
      set_port(from.port());
    }
    if (from._has_bit(3)) {
      set_local_ip(from.local_ip());
    }
    if (from._has_bit(4)) {
      set_local_port(from.local_port());
    }
    if (from._has_bit(5)) {
      set_rendezvouz_ip(from.rendezvouz_ip());
    }
    if (from._has_bit(6)) {
      set_rendezvouz_port(from.rendezvouz_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KadConfig_Contact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KadConfig_Contact::CopyFrom(const KadConfig_Contact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KadConfig_Contact::Swap(KadConfig_Contact* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(local_ip_, other->local_ip_);
    std::swap(local_port_, other->local_port_);
    std::swap(rendezvouz_ip_, other->rendezvouz_ip_);
    std::swap(rendezvouz_port_, other->rendezvouz_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool KadConfig_Contact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* KadConfig_Contact::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* KadConfig_Contact::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return KadConfig_Contact_reflection_;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int KadConfig::kPortFieldNumber;
const int KadConfig::kContactFieldNumber;
#endif  // !_MSC_VER

KadConfig::KadConfig()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    port_(0),
    contact_() {
  SharedCtor();
}

void KadConfig::InitAsDefaultInstance() {}

KadConfig::KadConfig(const KadConfig& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    port_(0),
    contact_() {
  SharedCtor();
  MergeFrom(from);
}

void KadConfig::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KadConfig::~KadConfig() {
  SharedDtor();
}

void KadConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* KadConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KadConfig_descriptor_;
}

const KadConfig& KadConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_general_5fmessages_2eproto();  return *default_instance_;
}

KadConfig* KadConfig::default_instance_ = NULL;

KadConfig* KadConfig::New() const {
  return new KadConfig;
}

void KadConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0;
  }
  contact_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KadConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &port_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_contact;
        break;
      }
      
      // repeated .base.KadConfig.Contact contact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_contact:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_contact()));
        if (input->ExpectTag(18)) goto parse_contact;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KadConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    KadConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 port = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->port(), output);
  }
  
  // repeated .base.KadConfig.Contact contact = 2;
  for (int i = 0; i < this->contact_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->contact(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KadConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 port = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->port(), target);
  }
  
  // repeated .base.KadConfig.Contact contact = 2;
  for (int i = 0; i < this->contact_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->contact(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KadConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->port());
    }
    
  }
  // repeated .base.KadConfig.Contact contact = 2;
  total_size += 1 * this->contact_size();
  for (int i = 0; i < this->contact_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->contact(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void KadConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KadConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KadConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KadConfig::MergeFrom(const KadConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_.MergeFrom(from.contact_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KadConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KadConfig::CopyFrom(const KadConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KadConfig::Swap(KadConfig* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    contact_.Swap(&other->contact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool KadConfig::IsInitialized() const {
  
  for (int i = 0; i < contact_size(); i++) {
    if (!this->contact(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* KadConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* KadConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return KadConfig_reflection_;
}

}  // namespace base
