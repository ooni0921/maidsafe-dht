// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_transport_5fmessage_2eproto__INCLUDED
#define PROTOBUF_transport_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "hole_puching_messages.pb.h"
#include "rpcmessage.pb.h"

namespace transport {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_transport_5fmessage_2eproto();
void protobuf_AssignDesc_transport_5fmessage_2eproto();
void protobuf_ShutdownFile_transport_5fmessage_2eproto();

class TransportMessage;

// ===================================================================

class TransportMessage : public ::google::protobuf::Message {
 public:
  TransportMessage();
  virtual ~TransportMessage();
  
  TransportMessage(const TransportMessage& from);
  
  inline TransportMessage& operator=(const TransportMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransportMessage& default_instance();
  void Swap(TransportMessage* other);
  
  // implements Message ----------------------------------------------
  
  TransportMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransportMessage& from);
  void MergeFrom(const TransportMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rpcprotocol.RpcMessage rpc_msg = 1;
  inline bool has_rpc_msg() const;
  inline void clear_rpc_msg();
  static const int kRpcMsgFieldNumber = 1;
  inline const ::rpcprotocol::RpcMessage& rpc_msg() const;
  inline ::rpcprotocol::RpcMessage* mutable_rpc_msg();
  
  // optional .transport.HolePunchingMsg hp_msg = 2;
  inline bool has_hp_msg() const;
  inline void clear_hp_msg();
  static const int kHpMsgFieldNumber = 2;
  inline const ::transport::HolePunchingMsg& hp_msg() const;
  inline ::transport::HolePunchingMsg* mutable_hp_msg();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rpcprotocol::RpcMessage* rpc_msg_;
  ::transport::HolePunchingMsg* hp_msg_;
  friend void  protobuf_AddDesc_transport_5fmessage_2eproto();
  friend void protobuf_AssignDesc_transport_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_transport_5fmessage_2eproto();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TransportMessage* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// TransportMessage

// optional .rpcprotocol.RpcMessage rpc_msg = 1;
inline bool TransportMessage::has_rpc_msg() const {
  return _has_bit(0);
}
inline void TransportMessage::clear_rpc_msg() {
  if (rpc_msg_ != NULL) rpc_msg_->::rpcprotocol::RpcMessage::Clear();
  _clear_bit(0);
}
inline const ::rpcprotocol::RpcMessage& TransportMessage::rpc_msg() const {
  return rpc_msg_ != NULL ? *rpc_msg_ : *default_instance_->rpc_msg_;
}
inline ::rpcprotocol::RpcMessage* TransportMessage::mutable_rpc_msg() {
  _set_bit(0);
  if (rpc_msg_ == NULL) rpc_msg_ = new ::rpcprotocol::RpcMessage;
  return rpc_msg_;
}

// optional .transport.HolePunchingMsg hp_msg = 2;
inline bool TransportMessage::has_hp_msg() const {
  return _has_bit(1);
}
inline void TransportMessage::clear_hp_msg() {
  if (hp_msg_ != NULL) hp_msg_->::transport::HolePunchingMsg::Clear();
  _clear_bit(1);
}
inline const ::transport::HolePunchingMsg& TransportMessage::hp_msg() const {
  return hp_msg_ != NULL ? *hp_msg_ : *default_instance_->hp_msg_;
}
inline ::transport::HolePunchingMsg* TransportMessage::mutable_hp_msg() {
  _set_bit(1);
  if (hp_msg_ == NULL) hp_msg_ = new ::transport::HolePunchingMsg;
  return hp_msg_;
}


}  // namespace transport
#endif  // PROTOBUF_transport_5fmessage_2eproto__INCLUDED
