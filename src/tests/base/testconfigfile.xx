#include "base/configfile.h"
#include "base/utils.h"
#include <gtest/gtest.h>
#include <boost/filesystem.hpp>

class ConfigFileHandlerTest : public testing::Test {
  protected:
    base::ConfigFileHandler *cfh_;
    int test;
    virtual void SetUp() {
      const std::string fileName("../../src/perpetualdata.config");
      cfh_ = new base::ConfigFileHandler(fileName);
    }

    virtual void TearDown() {
      delete cfh_;
      std::string s("../../src/perpetualdata.config.800");
      s += base::itos(test);
      const std::string fileName("../../src/perpetualdata.config");
      if (boost::filesystem::exists(s.c_str()))
        boost::filesystem::remove(s.c_str());
      if (boost::filesystem::exists(fileName.c_str())) {
        boost::filesystem::rename(fileName.c_str(), s.c_str());
        boost::filesystem::copy_file("../../src/perpetualdata.config.orig", fileName.c_str());
      }
    }
};

TEST_F(ConfigFileHandlerTest, 8001_List_Add_Get_Attributes) {
  test = 0;
  std::vector<std::string> list;
  std::string attributeName("perpetualdata.bootstrap_nodes");
  ASSERT_EQ(0, cfh_->getAttributeList(attributeName, list)) << "Failed getting the result.";
  ASSERT_EQ((unsigned)1, list.size()) << "More or less than one entry in file";

  std::string attributeValue("132.248.59.69:2207");
  ASSERT_EQ(0, cfh_->addListAttribute(attributeName, attributeValue));

  list.clear();
  ASSERT_EQ(0, cfh_->getAttributeList(attributeName, list)) << "Failed getting the result.";
  ASSERT_EQ((unsigned)2, list.size()) << "More or less than two entries in file";
  std::cout << std::endl;

  ASSERT_EQ(-6, cfh_->addListAttribute(attributeName, attributeValue));
  std::cout << std::endl;

  list.clear();
  ASSERT_EQ(0, cfh_->getAttributeList(attributeName, list)) << "Failed getting the result.";
  ASSERT_EQ((unsigned)2, list.size()) << "More or less than two entries in file";
  test++;
}

TEST_F(ConfigFileHandlerTest, 8002_Singular_Add_Get_Attributes) {
  std::string attributeParent("perpetualdata");
  std::string attributeName("name");
  std::string attributeValue("dante");

  ASSERT_EQ(0, cfh_->addAttribute(attributeParent, attributeName, attributeValue));

  std::string retrieveValue("");
  ASSERT_EQ(0, cfh_->getAttribute(attributeParent + "." + attributeName, retrieveValue)) << "Failed getting the result.";
  ASSERT_EQ(retrieveValue, attributeValue) << "More or less than two entries in file";
  test++;
}

TEST_F(ConfigFileHandlerTest, 8003_Singular_Modify_Attributes) {
  std::string originalValue("English");
  std::string retrieveValue("");
  std::string attributeName("perpetualdata.language");
  ASSERT_EQ(0, cfh_->getAttribute(attributeName, retrieveValue)) << "Failed getting the result.";
  ASSERT_EQ(originalValue, retrieveValue) << "Value in file not the expected one";

  std::string newValue("Spanish");
  ASSERT_EQ(0, cfh_->modifyAttribute(attributeName, newValue)) << "Attribute not modified";

  ASSERT_EQ(0, cfh_->getAttribute(attributeName, retrieveValue)) << "Failed getting the result.";
  ASSERT_EQ(newValue, retrieveValue) << "Value in file not the expected one";

  test++;
  // SUCCEED();
}

TEST_F(ConfigFileHandlerTest, 8004_Remove_Attributes) {
  std::string attributeParent("perpetualdata");
  std::string attributeName("name");
  std::string attributeValue("dante");
  ASSERT_EQ(0, cfh_->addAttribute(attributeParent, attributeName, attributeValue));

  std::string retrieveValue("");
  ASSERT_EQ(0, cfh_->getAttribute(attributeParent + "." + attributeName, retrieveValue)) << "Failed getting the result.";
  ASSERT_EQ(retrieveValue, attributeValue) << "More or less than two entries in file";

  ASSERT_EQ(0, cfh_->removeAttribute(attributeParent, attributeName)) << "Failed removing the result.";
  ASSERT_EQ(-3, cfh_->getAttribute(attributeParent + "." + attributeName, retrieveValue)) << "Failed getting the result.";

  test++;
}
