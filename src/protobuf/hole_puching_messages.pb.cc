// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "hole_puching_messages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace transport {

namespace {

const ::google::protobuf::Descriptor* HolePunchingMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HolePunchingMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* msg_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_hole_5fpuching_5fmessages_2eproto() {
  protobuf_AddDesc_hole_5fpuching_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hole_puching_messages.proto");
  GOOGLE_CHECK(file != NULL);
  HolePunchingMsg_descriptor_ = file->message_type(0);
  static const int HolePunchingMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HolePunchingMsg, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HolePunchingMsg, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HolePunchingMsg, type_),
  };
  HolePunchingMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HolePunchingMsg_descriptor_,
      HolePunchingMsg::default_instance_,
      HolePunchingMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HolePunchingMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HolePunchingMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HolePunchingMsg));
  msg_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hole_5fpuching_5fmessages_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HolePunchingMsg_descriptor_, &HolePunchingMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hole_5fpuching_5fmessages_2eproto() {
  delete HolePunchingMsg::default_instance_;
  delete HolePunchingMsg_reflection_;
}

void protobuf_AddDesc_hole_5fpuching_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033hole_puching_messages.proto\022\ttransport"
    "\"N\n\017HolePunchingMsg\022\n\n\002ip\030\001 \002(\014\022\014\n\004port\030"
    "\002 \002(\005\022!\n\004type\030\003 \002(\0162\023.transport.msg_type"
    "*,\n\010msg_type\022\017\n\013FORWARD_REQ\020\000\022\017\n\013FORWARD"
    "_MSG\020\001", 166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hole_puching_messages.proto", &protobuf_RegisterTypes);
  HolePunchingMsg::default_instance_ = new HolePunchingMsg();
  HolePunchingMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hole_5fpuching_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hole_5fpuching_5fmessages_2eproto {
  StaticDescriptorInitializer_hole_5fpuching_5fmessages_2eproto() {
    protobuf_AddDesc_hole_5fpuching_5fmessages_2eproto();
  }
} static_descriptor_initializer_hole_5fpuching_5fmessages_2eproto_;

const ::google::protobuf::EnumDescriptor* msg_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_type_descriptor_;
}
bool msg_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string HolePunchingMsg::_default_ip_;
#ifndef _MSC_VER
const int HolePunchingMsg::kIpFieldNumber;
const int HolePunchingMsg::kPortFieldNumber;
const int HolePunchingMsg::kTypeFieldNumber;
#endif  // !_MSC_VER

HolePunchingMsg::HolePunchingMsg()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0),
    type_(0) {
  SharedCtor();
}

void HolePunchingMsg::InitAsDefaultInstance() {}

HolePunchingMsg::HolePunchingMsg(const HolePunchingMsg& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0),
    type_(0) {
  SharedCtor();
  MergeFrom(from);
}

void HolePunchingMsg::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  port_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HolePunchingMsg::~HolePunchingMsg() {
  SharedDtor();
}

void HolePunchingMsg::SharedDtor() {
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* HolePunchingMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HolePunchingMsg_descriptor_;
}

const HolePunchingMsg& HolePunchingMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hole_5fpuching_5fmessages_2eproto();  return *default_instance_;
}

HolePunchingMsg* HolePunchingMsg::default_instance_ = NULL;

HolePunchingMsg* HolePunchingMsg::New() const {
  return new HolePunchingMsg;
}

void HolePunchingMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    port_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HolePunchingMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_ip()));
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &port_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required .transport.msg_type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (transport::msg_type_IsValid(value)) {
          set_type(static_cast< transport::msg_type >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HolePunchingMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    HolePunchingMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->ip(), output);
  }
  
  // required int32 port = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->port(), output);
  }
  
  // required .transport.msg_type type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HolePunchingMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ip = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->ip(), target);
  }
  
  // required int32 port = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->port(), target);
  }
  
  // required .transport.msg_type type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HolePunchingMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->ip());
    }
    
    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->port());
    }
    
    // required .transport.msg_type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void HolePunchingMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HolePunchingMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HolePunchingMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HolePunchingMsg::MergeFrom(const HolePunchingMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ip(from.ip());
    }
    if (from._has_bit(1)) {
      set_port(from.port());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HolePunchingMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HolePunchingMsg::CopyFrom(const HolePunchingMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HolePunchingMsg::Swap(HolePunchingMsg* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool HolePunchingMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* HolePunchingMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* HolePunchingMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return HolePunchingMsg_reflection_;
}

}  // namespace transport
