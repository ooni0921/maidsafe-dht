// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_general_5fmessages_2eproto__INCLUDED
#define PROTOBUF_general_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace base {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_general_5fmessages_2eproto();
void protobuf_AssignDesc_general_5fmessages_2eproto();
void protobuf_ShutdownFile_general_5fmessages_2eproto();

class GeneralResponse;
class VaultConfig;
class KadConfig;
class KadConfig_Contact;

// ===================================================================

class GeneralResponse : public ::google::protobuf::Message {
 public:
  GeneralResponse();
  virtual ~GeneralResponse();
  
  GeneralResponse(const GeneralResponse& from);
  
  inline GeneralResponse& operator=(const GeneralResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralResponse& default_instance();
  void Swap(GeneralResponse* other);
  
  // implements Message ----------------------------------------------
  
  GeneralResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeneralResponse& from);
  void MergeFrom(const GeneralResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const void* value, size_t size);
  inline ::std::string* mutable_result();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* result_;
  static const ::std::string _default_result_;
  friend void  protobuf_AddDesc_general_5fmessages_2eproto();
  friend void protobuf_AssignDesc_general_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_general_5fmessages_2eproto();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GeneralResponse* default_instance_;
};
// -------------------------------------------------------------------

class VaultConfig : public ::google::protobuf::Message {
 public:
  VaultConfig();
  virtual ~VaultConfig();
  
  VaultConfig(const VaultConfig& from);
  
  inline VaultConfig& operator=(const VaultConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VaultConfig& default_instance();
  void Swap(VaultConfig* other);
  
  // implements Message ----------------------------------------------
  
  VaultConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VaultConfig& from);
  void MergeFrom(const VaultConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes pmid_public = 1;
  inline bool has_pmid_public() const;
  inline void clear_pmid_public();
  static const int kPmidPublicFieldNumber = 1;
  inline const ::std::string& pmid_public() const;
  inline void set_pmid_public(const ::std::string& value);
  inline void set_pmid_public(const char* value);
  inline void set_pmid_public(const void* value, size_t size);
  inline ::std::string* mutable_pmid_public();
  
  // required bytes pmid_private = 2;
  inline bool has_pmid_private() const;
  inline void clear_pmid_private();
  static const int kPmidPrivateFieldNumber = 2;
  inline const ::std::string& pmid_private() const;
  inline void set_pmid_private(const ::std::string& value);
  inline void set_pmid_private(const char* value);
  inline void set_pmid_private(const void* value, size_t size);
  inline ::std::string* mutable_pmid_private();
  
  // required bytes signed_pmid_public = 3;
  inline bool has_signed_pmid_public() const;
  inline void clear_signed_pmid_public();
  static const int kSignedPmidPublicFieldNumber = 3;
  inline const ::std::string& signed_pmid_public() const;
  inline void set_signed_pmid_public(const ::std::string& value);
  inline void set_signed_pmid_public(const char* value);
  inline void set_signed_pmid_public(const void* value, size_t size);
  inline ::std::string* mutable_signed_pmid_public();
  
  // optional bytes chunkstore_dir = 4;
  inline bool has_chunkstore_dir() const;
  inline void clear_chunkstore_dir();
  static const int kChunkstoreDirFieldNumber = 4;
  inline const ::std::string& chunkstore_dir() const;
  inline void set_chunkstore_dir(const ::std::string& value);
  inline void set_chunkstore_dir(const char* value);
  inline void set_chunkstore_dir(const void* value, size_t size);
  inline ::std::string* mutable_chunkstore_dir();
  
  // optional bytes datastore_dir = 5;
  inline bool has_datastore_dir() const;
  inline void clear_datastore_dir();
  static const int kDatastoreDirFieldNumber = 5;
  inline const ::std::string& datastore_dir() const;
  inline void set_datastore_dir(const ::std::string& value);
  inline void set_datastore_dir(const char* value);
  inline void set_datastore_dir(const void* value, size_t size);
  inline ::std::string* mutable_datastore_dir();
  
  // optional int32 port = 6;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 6;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* pmid_public_;
  static const ::std::string _default_pmid_public_;
  ::std::string* pmid_private_;
  static const ::std::string _default_pmid_private_;
  ::std::string* signed_pmid_public_;
  static const ::std::string _default_signed_pmid_public_;
  ::std::string* chunkstore_dir_;
  static const ::std::string _default_chunkstore_dir_;
  ::std::string* datastore_dir_;
  static const ::std::string _default_datastore_dir_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_general_5fmessages_2eproto();
  friend void protobuf_AssignDesc_general_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_general_5fmessages_2eproto();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VaultConfig* default_instance_;
};
// -------------------------------------------------------------------

class KadConfig_Contact : public ::google::protobuf::Message {
 public:
  KadConfig_Contact();
  virtual ~KadConfig_Contact();
  
  KadConfig_Contact(const KadConfig_Contact& from);
  
  inline KadConfig_Contact& operator=(const KadConfig_Contact& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KadConfig_Contact& default_instance();
  void Swap(KadConfig_Contact* other);
  
  // implements Message ----------------------------------------------
  
  KadConfig_Contact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KadConfig_Contact& from);
  void MergeFrom(const KadConfig_Contact& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes node_id = 1;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  inline const ::std::string& node_id() const;
  inline void set_node_id(const ::std::string& value);
  inline void set_node_id(const char* value);
  inline void set_node_id(const void* value, size_t size);
  inline ::std::string* mutable_node_id();
  
  // required bytes ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  
  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // optional bytes local_ip = 4;
  inline bool has_local_ip() const;
  inline void clear_local_ip();
  static const int kLocalIpFieldNumber = 4;
  inline const ::std::string& local_ip() const;
  inline void set_local_ip(const ::std::string& value);
  inline void set_local_ip(const char* value);
  inline void set_local_ip(const void* value, size_t size);
  inline ::std::string* mutable_local_ip();
  
  // optional int32 local_port = 5;
  inline bool has_local_port() const;
  inline void clear_local_port();
  static const int kLocalPortFieldNumber = 5;
  inline ::google::protobuf::int32 local_port() const;
  inline void set_local_port(::google::protobuf::int32 value);
  
  // optional bytes rendezvouz_ip = 6;
  inline bool has_rendezvouz_ip() const;
  inline void clear_rendezvouz_ip();
  static const int kRendezvouzIpFieldNumber = 6;
  inline const ::std::string& rendezvouz_ip() const;
  inline void set_rendezvouz_ip(const ::std::string& value);
  inline void set_rendezvouz_ip(const char* value);
  inline void set_rendezvouz_ip(const void* value, size_t size);
  inline ::std::string* mutable_rendezvouz_ip();
  
  // optional int32 rendezvouz_port = 7;
  inline bool has_rendezvouz_port() const;
  inline void clear_rendezvouz_port();
  static const int kRendezvouzPortFieldNumber = 7;
  inline ::google::protobuf::int32 rendezvouz_port() const;
  inline void set_rendezvouz_port(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* node_id_;
  static const ::std::string _default_node_id_;
  ::std::string* ip_;
  static const ::std::string _default_ip_;
  ::google::protobuf::int32 port_;
  ::std::string* local_ip_;
  static const ::std::string _default_local_ip_;
  ::google::protobuf::int32 local_port_;
  ::std::string* rendezvouz_ip_;
  static const ::std::string _default_rendezvouz_ip_;
  ::google::protobuf::int32 rendezvouz_port_;
  friend void  protobuf_AddDesc_general_5fmessages_2eproto();
  friend void protobuf_AssignDesc_general_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_general_5fmessages_2eproto();
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static KadConfig_Contact* default_instance_;
};
// -------------------------------------------------------------------

class KadConfig : public ::google::protobuf::Message {
 public:
  KadConfig();
  virtual ~KadConfig();
  
  KadConfig(const KadConfig& from);
  
  inline KadConfig& operator=(const KadConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KadConfig& default_instance();
  void Swap(KadConfig* other);
  
  // implements Message ----------------------------------------------
  
  KadConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KadConfig& from);
  void MergeFrom(const KadConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef KadConfig_Contact Contact;
  
  // accessors -------------------------------------------------------
  
  // optional int32 port = 1;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // repeated .base.KadConfig.Contact contact = 2;
  inline int contact_size() const;
  inline void clear_contact();
  static const int kContactFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::base::KadConfig_Contact >& contact() const;
  inline ::google::protobuf::RepeatedPtrField< ::base::KadConfig_Contact >* mutable_contact();
  inline const ::base::KadConfig_Contact& contact(int index) const;
  inline ::base::KadConfig_Contact* mutable_contact(int index);
  inline ::base::KadConfig_Contact* add_contact();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 port_;
  ::google::protobuf::RepeatedPtrField< ::base::KadConfig_Contact > contact_;
  friend void  protobuf_AddDesc_general_5fmessages_2eproto();
  friend void protobuf_AssignDesc_general_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_general_5fmessages_2eproto();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static KadConfig* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// GeneralResponse

// required bytes result = 1;
inline bool GeneralResponse::has_result() const {
  return _has_bit(0);
}
inline void GeneralResponse::clear_result() {
  if (result_ != &_default_result_) {
    result_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GeneralResponse::result() const {
  return *result_;
}
inline void GeneralResponse::set_result(const ::std::string& value) {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void GeneralResponse::set_result(const char* value) {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void GeneralResponse::set_result(const void* value, size_t size) {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GeneralResponse::mutable_result() {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  return result_;
}

// -------------------------------------------------------------------

// VaultConfig

// required bytes pmid_public = 1;
inline bool VaultConfig::has_pmid_public() const {
  return _has_bit(0);
}
inline void VaultConfig::clear_pmid_public() {
  if (pmid_public_ != &_default_pmid_public_) {
    pmid_public_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& VaultConfig::pmid_public() const {
  return *pmid_public_;
}
inline void VaultConfig::set_pmid_public(const ::std::string& value) {
  _set_bit(0);
  if (pmid_public_ == &_default_pmid_public_) {
    pmid_public_ = new ::std::string;
  }
  pmid_public_->assign(value);
}
inline void VaultConfig::set_pmid_public(const char* value) {
  _set_bit(0);
  if (pmid_public_ == &_default_pmid_public_) {
    pmid_public_ = new ::std::string;
  }
  pmid_public_->assign(value);
}
inline void VaultConfig::set_pmid_public(const void* value, size_t size) {
  _set_bit(0);
  if (pmid_public_ == &_default_pmid_public_) {
    pmid_public_ = new ::std::string;
  }
  pmid_public_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultConfig::mutable_pmid_public() {
  _set_bit(0);
  if (pmid_public_ == &_default_pmid_public_) {
    pmid_public_ = new ::std::string;
  }
  return pmid_public_;
}

// required bytes pmid_private = 2;
inline bool VaultConfig::has_pmid_private() const {
  return _has_bit(1);
}
inline void VaultConfig::clear_pmid_private() {
  if (pmid_private_ != &_default_pmid_private_) {
    pmid_private_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& VaultConfig::pmid_private() const {
  return *pmid_private_;
}
inline void VaultConfig::set_pmid_private(const ::std::string& value) {
  _set_bit(1);
  if (pmid_private_ == &_default_pmid_private_) {
    pmid_private_ = new ::std::string;
  }
  pmid_private_->assign(value);
}
inline void VaultConfig::set_pmid_private(const char* value) {
  _set_bit(1);
  if (pmid_private_ == &_default_pmid_private_) {
    pmid_private_ = new ::std::string;
  }
  pmid_private_->assign(value);
}
inline void VaultConfig::set_pmid_private(const void* value, size_t size) {
  _set_bit(1);
  if (pmid_private_ == &_default_pmid_private_) {
    pmid_private_ = new ::std::string;
  }
  pmid_private_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultConfig::mutable_pmid_private() {
  _set_bit(1);
  if (pmid_private_ == &_default_pmid_private_) {
    pmid_private_ = new ::std::string;
  }
  return pmid_private_;
}

// required bytes signed_pmid_public = 3;
inline bool VaultConfig::has_signed_pmid_public() const {
  return _has_bit(2);
}
inline void VaultConfig::clear_signed_pmid_public() {
  if (signed_pmid_public_ != &_default_signed_pmid_public_) {
    signed_pmid_public_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& VaultConfig::signed_pmid_public() const {
  return *signed_pmid_public_;
}
inline void VaultConfig::set_signed_pmid_public(const ::std::string& value) {
  _set_bit(2);
  if (signed_pmid_public_ == &_default_signed_pmid_public_) {
    signed_pmid_public_ = new ::std::string;
  }
  signed_pmid_public_->assign(value);
}
inline void VaultConfig::set_signed_pmid_public(const char* value) {
  _set_bit(2);
  if (signed_pmid_public_ == &_default_signed_pmid_public_) {
    signed_pmid_public_ = new ::std::string;
  }
  signed_pmid_public_->assign(value);
}
inline void VaultConfig::set_signed_pmid_public(const void* value, size_t size) {
  _set_bit(2);
  if (signed_pmid_public_ == &_default_signed_pmid_public_) {
    signed_pmid_public_ = new ::std::string;
  }
  signed_pmid_public_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultConfig::mutable_signed_pmid_public() {
  _set_bit(2);
  if (signed_pmid_public_ == &_default_signed_pmid_public_) {
    signed_pmid_public_ = new ::std::string;
  }
  return signed_pmid_public_;
}

// optional bytes chunkstore_dir = 4;
inline bool VaultConfig::has_chunkstore_dir() const {
  return _has_bit(3);
}
inline void VaultConfig::clear_chunkstore_dir() {
  if (chunkstore_dir_ != &_default_chunkstore_dir_) {
    chunkstore_dir_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& VaultConfig::chunkstore_dir() const {
  return *chunkstore_dir_;
}
inline void VaultConfig::set_chunkstore_dir(const ::std::string& value) {
  _set_bit(3);
  if (chunkstore_dir_ == &_default_chunkstore_dir_) {
    chunkstore_dir_ = new ::std::string;
  }
  chunkstore_dir_->assign(value);
}
inline void VaultConfig::set_chunkstore_dir(const char* value) {
  _set_bit(3);
  if (chunkstore_dir_ == &_default_chunkstore_dir_) {
    chunkstore_dir_ = new ::std::string;
  }
  chunkstore_dir_->assign(value);
}
inline void VaultConfig::set_chunkstore_dir(const void* value, size_t size) {
  _set_bit(3);
  if (chunkstore_dir_ == &_default_chunkstore_dir_) {
    chunkstore_dir_ = new ::std::string;
  }
  chunkstore_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultConfig::mutable_chunkstore_dir() {
  _set_bit(3);
  if (chunkstore_dir_ == &_default_chunkstore_dir_) {
    chunkstore_dir_ = new ::std::string;
  }
  return chunkstore_dir_;
}

// optional bytes datastore_dir = 5;
inline bool VaultConfig::has_datastore_dir() const {
  return _has_bit(4);
}
inline void VaultConfig::clear_datastore_dir() {
  if (datastore_dir_ != &_default_datastore_dir_) {
    datastore_dir_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& VaultConfig::datastore_dir() const {
  return *datastore_dir_;
}
inline void VaultConfig::set_datastore_dir(const ::std::string& value) {
  _set_bit(4);
  if (datastore_dir_ == &_default_datastore_dir_) {
    datastore_dir_ = new ::std::string;
  }
  datastore_dir_->assign(value);
}
inline void VaultConfig::set_datastore_dir(const char* value) {
  _set_bit(4);
  if (datastore_dir_ == &_default_datastore_dir_) {
    datastore_dir_ = new ::std::string;
  }
  datastore_dir_->assign(value);
}
inline void VaultConfig::set_datastore_dir(const void* value, size_t size) {
  _set_bit(4);
  if (datastore_dir_ == &_default_datastore_dir_) {
    datastore_dir_ = new ::std::string;
  }
  datastore_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultConfig::mutable_datastore_dir() {
  _set_bit(4);
  if (datastore_dir_ == &_default_datastore_dir_) {
    datastore_dir_ = new ::std::string;
  }
  return datastore_dir_;
}

// optional int32 port = 6;
inline bool VaultConfig::has_port() const {
  return _has_bit(5);
}
inline void VaultConfig::clear_port() {
  port_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 VaultConfig::port() const {
  return port_;
}
inline void VaultConfig::set_port(::google::protobuf::int32 value) {
  _set_bit(5);
  port_ = value;
}

// -------------------------------------------------------------------

// KadConfig_Contact

// required bytes node_id = 1;
inline bool KadConfig_Contact::has_node_id() const {
  return _has_bit(0);
}
inline void KadConfig_Contact::clear_node_id() {
  if (node_id_ != &_default_node_id_) {
    node_id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& KadConfig_Contact::node_id() const {
  return *node_id_;
}
inline void KadConfig_Contact::set_node_id(const ::std::string& value) {
  _set_bit(0);
  if (node_id_ == &_default_node_id_) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(value);
}
inline void KadConfig_Contact::set_node_id(const char* value) {
  _set_bit(0);
  if (node_id_ == &_default_node_id_) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(value);
}
inline void KadConfig_Contact::set_node_id(const void* value, size_t size) {
  _set_bit(0);
  if (node_id_ == &_default_node_id_) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KadConfig_Contact::mutable_node_id() {
  _set_bit(0);
  if (node_id_ == &_default_node_id_) {
    node_id_ = new ::std::string;
  }
  return node_id_;
}

// required bytes ip = 2;
inline bool KadConfig_Contact::has_ip() const {
  return _has_bit(1);
}
inline void KadConfig_Contact::clear_ip() {
  if (ip_ != &_default_ip_) {
    ip_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& KadConfig_Contact::ip() const {
  return *ip_;
}
inline void KadConfig_Contact::set_ip(const ::std::string& value) {
  _set_bit(1);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void KadConfig_Contact::set_ip(const char* value) {
  _set_bit(1);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void KadConfig_Contact::set_ip(const void* value, size_t size) {
  _set_bit(1);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KadConfig_Contact::mutable_ip() {
  _set_bit(1);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  return ip_;
}

// required int32 port = 3;
inline bool KadConfig_Contact::has_port() const {
  return _has_bit(2);
}
inline void KadConfig_Contact::clear_port() {
  port_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 KadConfig_Contact::port() const {
  return port_;
}
inline void KadConfig_Contact::set_port(::google::protobuf::int32 value) {
  _set_bit(2);
  port_ = value;
}

// optional bytes local_ip = 4;
inline bool KadConfig_Contact::has_local_ip() const {
  return _has_bit(3);
}
inline void KadConfig_Contact::clear_local_ip() {
  if (local_ip_ != &_default_local_ip_) {
    local_ip_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& KadConfig_Contact::local_ip() const {
  return *local_ip_;
}
inline void KadConfig_Contact::set_local_ip(const ::std::string& value) {
  _set_bit(3);
  if (local_ip_ == &_default_local_ip_) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void KadConfig_Contact::set_local_ip(const char* value) {
  _set_bit(3);
  if (local_ip_ == &_default_local_ip_) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void KadConfig_Contact::set_local_ip(const void* value, size_t size) {
  _set_bit(3);
  if (local_ip_ == &_default_local_ip_) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KadConfig_Contact::mutable_local_ip() {
  _set_bit(3);
  if (local_ip_ == &_default_local_ip_) {
    local_ip_ = new ::std::string;
  }
  return local_ip_;
}

// optional int32 local_port = 5;
inline bool KadConfig_Contact::has_local_port() const {
  return _has_bit(4);
}
inline void KadConfig_Contact::clear_local_port() {
  local_port_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 KadConfig_Contact::local_port() const {
  return local_port_;
}
inline void KadConfig_Contact::set_local_port(::google::protobuf::int32 value) {
  _set_bit(4);
  local_port_ = value;
}

// optional bytes rendezvouz_ip = 6;
inline bool KadConfig_Contact::has_rendezvouz_ip() const {
  return _has_bit(5);
}
inline void KadConfig_Contact::clear_rendezvouz_ip() {
  if (rendezvouz_ip_ != &_default_rendezvouz_ip_) {
    rendezvouz_ip_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& KadConfig_Contact::rendezvouz_ip() const {
  return *rendezvouz_ip_;
}
inline void KadConfig_Contact::set_rendezvouz_ip(const ::std::string& value) {
  _set_bit(5);
  if (rendezvouz_ip_ == &_default_rendezvouz_ip_) {
    rendezvouz_ip_ = new ::std::string;
  }
  rendezvouz_ip_->assign(value);
}
inline void KadConfig_Contact::set_rendezvouz_ip(const char* value) {
  _set_bit(5);
  if (rendezvouz_ip_ == &_default_rendezvouz_ip_) {
    rendezvouz_ip_ = new ::std::string;
  }
  rendezvouz_ip_->assign(value);
}
inline void KadConfig_Contact::set_rendezvouz_ip(const void* value, size_t size) {
  _set_bit(5);
  if (rendezvouz_ip_ == &_default_rendezvouz_ip_) {
    rendezvouz_ip_ = new ::std::string;
  }
  rendezvouz_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KadConfig_Contact::mutable_rendezvouz_ip() {
  _set_bit(5);
  if (rendezvouz_ip_ == &_default_rendezvouz_ip_) {
    rendezvouz_ip_ = new ::std::string;
  }
  return rendezvouz_ip_;
}

// optional int32 rendezvouz_port = 7;
inline bool KadConfig_Contact::has_rendezvouz_port() const {
  return _has_bit(6);
}
inline void KadConfig_Contact::clear_rendezvouz_port() {
  rendezvouz_port_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 KadConfig_Contact::rendezvouz_port() const {
  return rendezvouz_port_;
}
inline void KadConfig_Contact::set_rendezvouz_port(::google::protobuf::int32 value) {
  _set_bit(6);
  rendezvouz_port_ = value;
}

// -------------------------------------------------------------------

// KadConfig

// optional int32 port = 1;
inline bool KadConfig::has_port() const {
  return _has_bit(0);
}
inline void KadConfig::clear_port() {
  port_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 KadConfig::port() const {
  return port_;
}
inline void KadConfig::set_port(::google::protobuf::int32 value) {
  _set_bit(0);
  port_ = value;
}

// repeated .base.KadConfig.Contact contact = 2;
inline int KadConfig::contact_size() const {
  return contact_.size();
}
inline void KadConfig::clear_contact() {
  contact_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::base::KadConfig_Contact >&
KadConfig::contact() const {
  return contact_;
}
inline ::google::protobuf::RepeatedPtrField< ::base::KadConfig_Contact >*
KadConfig::mutable_contact() {
  return &contact_;
}
inline const ::base::KadConfig_Contact& KadConfig::contact(int index) const {
  return contact_.Get(index);
}
inline ::base::KadConfig_Contact* KadConfig::mutable_contact(int index) {
  return contact_.Mutable(index);
}
inline ::base::KadConfig_Contact* KadConfig::add_contact() {
  return contact_.Add();
}


}  // namespace base
#endif  // PROTOBUF_general_5fmessages_2eproto__INCLUDED
