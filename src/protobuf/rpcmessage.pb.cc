// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "rpcmessage.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace rpcprotocol {

namespace {

const ::google::protobuf::Descriptor* RpcMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* rpc_message_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpcmessage_2eproto() {
  protobuf_AddDesc_rpcmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpcmessage.proto");
  GOOGLE_CHECK(file != NULL);
  RpcMessage_descriptor_ = file->message_type(0);
  static const int RpcMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, rpc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, method_),
  };
  RpcMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcMessage_descriptor_,
      RpcMessage::default_instance_,
      RpcMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcMessage));
  rpc_message_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpcmessage_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcMessage_descriptor_, &RpcMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpcmessage_2eproto() {
  delete RpcMessage::default_instance_;
  delete RpcMessage_reflection_;
}

void protobuf_AddDesc_rpcmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020rpcmessage.proto\022\013rpcprotocol\"\200\001\n\nRpcM"
    "essage\022/\n\010rpc_type\030\001 \002(\0162\035.rpcprotocol.r"
    "pc_message_type\022\022\n\nmessage_id\030\002 \002(\005\022\014\n\004a"
    "rgs\030\003 \002(\014\022\017\n\007service\030\004 \001(\014\022\016\n\006method\030\005 \001"
    "(\014*-\n\020rpc_message_type\022\013\n\007REQUEST\020\000\022\014\n\010R"
    "ESPONSE\020\001", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpcmessage.proto", &protobuf_RegisterTypes);
  RpcMessage::default_instance_ = new RpcMessage();
  RpcMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpcmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpcmessage_2eproto {
  StaticDescriptorInitializer_rpcmessage_2eproto() {
    protobuf_AddDesc_rpcmessage_2eproto();
  }
} static_descriptor_initializer_rpcmessage_2eproto_;

const ::google::protobuf::EnumDescriptor* rpc_message_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpc_message_type_descriptor_;
}
bool rpc_message_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string RpcMessage::_default_args_;
const ::std::string RpcMessage::_default_service_;
const ::std::string RpcMessage::_default_method_;
#ifndef _MSC_VER
const int RpcMessage::kRpcTypeFieldNumber;
const int RpcMessage::kMessageIdFieldNumber;
const int RpcMessage::kArgsFieldNumber;
const int RpcMessage::kServiceFieldNumber;
const int RpcMessage::kMethodFieldNumber;
#endif  // !_MSC_VER

RpcMessage::RpcMessage()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    rpc_type_(0),
    message_id_(0),
    args_(const_cast< ::std::string*>(&_default_args_)),
    service_(const_cast< ::std::string*>(&_default_service_)),
    method_(const_cast< ::std::string*>(&_default_method_)) {
  SharedCtor();
}

void RpcMessage::InitAsDefaultInstance() {}

RpcMessage::RpcMessage(const RpcMessage& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    rpc_type_(0),
    message_id_(0),
    args_(const_cast< ::std::string*>(&_default_args_)),
    service_(const_cast< ::std::string*>(&_default_service_)),
    method_(const_cast< ::std::string*>(&_default_method_)) {
  SharedCtor();
  MergeFrom(from);
}

void RpcMessage::SharedCtor() {
  _cached_size_ = 0;
  rpc_type_ = 0;
  message_id_ = 0;
  args_ = const_cast< ::std::string*>(&_default_args_);
  service_ = const_cast< ::std::string*>(&_default_service_);
  method_ = const_cast< ::std::string*>(&_default_method_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcMessage::~RpcMessage() {
  SharedDtor();
}

void RpcMessage::SharedDtor() {
  if (args_ != &_default_args_) {
    delete args_;
  }
  if (service_ != &_default_service_) {
    delete service_;
  }
  if (method_ != &_default_method_) {
    delete method_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RpcMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMessage_descriptor_;
}

const RpcMessage& RpcMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcmessage_2eproto();  return *default_instance_;
}

RpcMessage* RpcMessage::default_instance_ = NULL;

RpcMessage* RpcMessage::New() const {
  return new RpcMessage;
}

void RpcMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rpc_type_ = 0;
    message_id_ = 0;
    if (_has_bit(2)) {
      if (args_ != &_default_args_) {
        args_->clear();
      }
    }
    if (_has_bit(3)) {
      if (service_ != &_default_service_) {
        service_->clear();
      }
    }
    if (_has_bit(4)) {
      if (method_ != &_default_method_) {
        method_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .rpcprotocol.rpc_message_type rpc_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (rpcprotocol::rpc_message_type_IsValid(value)) {
          set_rpc_type(static_cast< rpcprotocol::rpc_message_type >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_message_id;
        break;
      }
      
      // required int32 message_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_message_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &message_id_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }
      
      // required bytes args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_args:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_args()));
        if (input->ExpectTag(34)) goto parse_service;
        break;
      }
      
      // optional bytes service = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_service:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_service()));
        if (input->ExpectTag(42)) goto parse_method;
        break;
      }
      
      // optional bytes method = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_method:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_method()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RpcMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .rpcprotocol.rpc_message_type rpc_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->rpc_type(), output);
  }
  
  // required int32 message_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->message_id(), output);
  }
  
  // required bytes args = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->args(), output);
  }
  
  // optional bytes service = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->service(), output);
  }
  
  // optional bytes method = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->method(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rpcprotocol.rpc_message_type rpc_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->rpc_type(), target);
  }
  
  // required int32 message_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->message_id(), target);
  }
  
  // required bytes args = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->args(), target);
  }
  
  // optional bytes service = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->service(), target);
  }
  
  // optional bytes method = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->method(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpcprotocol.rpc_message_type rpc_type = 1;
    if (has_rpc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->rpc_type());
    }
    
    // required int32 message_id = 2;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->message_id());
    }
    
    // required bytes args = 3;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->args());
    }
    
    // optional bytes service = 4;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->service());
    }
    
    // optional bytes method = 5;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->method());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RpcMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcMessage::MergeFrom(const RpcMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rpc_type(from.rpc_type());
    }
    if (from._has_bit(1)) {
      set_message_id(from.message_id());
    }
    if (from._has_bit(2)) {
      set_args(from.args());
    }
    if (from._has_bit(3)) {
      set_service(from.service());
    }
    if (from._has_bit(4)) {
      set_method(from.method());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMessage::CopyFrom(const RpcMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMessage::Swap(RpcMessage* other) {
  if (other != this) {
    std::swap(rpc_type_, other->rpc_type_);
    std::swap(message_id_, other->message_id_);
    std::swap(args_, other->args_);
    std::swap(service_, other->service_);
    std::swap(method_, other->method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool RpcMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* RpcMessage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* RpcMessage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return RpcMessage_reflection_;
}

}  // namespace rpcprotocol
