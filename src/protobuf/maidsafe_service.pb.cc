// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "maidsafe_service.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace maidsafe {

namespace {

const ::google::protobuf::ServiceDescriptor* MaidsafeService_descriptor_ = NULL;

}  // namespace


void protobuf_BuildDesc_maidsafe_5fservice_2eproto_AssignGlobalDescriptors(const ::google::protobuf::FileDescriptor* file) {
  MaidsafeService_descriptor_ = file->service(0);
}

void protobuf_BuildDesc_maidsafe_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  ::google::protobuf::DescriptorPool* pool =
    ::google::protobuf::DescriptorPool::internal_generated_pool();

  ::maidsafe::protobuf_BuildDesc_maidsafe_5fservice_5fmessages_2eproto();
  pool->InternalBuildGeneratedFile(
    "\n\026maidsafe_service.proto\022\010maidsafe\032\037maid"
    "safe_service_messages.proto2\253\004\n\017Maidsafe"
    "Service\022=\n\nStoreChunk\022\026.maidsafe.StoreRe"
    "quest\032\027.maidsafe.StoreResponse\022G\n\nCheckC"
    "hunk\022\033.maidsafe.CheckChunkRequest\032\034.maid"
    "safe.CheckChunkResponse\0222\n\003Get\022\024.maidsaf"
    "e.GetRequest\032\025.maidsafe.GetResponse\022;\n\006U"
    "pdate\022\027.maidsafe.UpdateRequest\032\030.maidsaf"
    "e.UpdateResponse\022J\n\013GetMessages\022\034.maidsa"
    "fe.GetMessagesRequest\032\035.maidsafe.GetMess"
    "agesResponse\022;\n\006Delete\022\027.maidsafe.Delete"
    "Request\032\030.maidsafe.DeleteResponse\022P\n\rVal"
    "idityCheck\022\036.maidsafe.ValidityCheckReque"
    "st\032\037.maidsafe.ValidityCheckResponse\022D\n\tS"
    "wapChunk\022\032.maidsafe.SwapChunkRequest\032\033.m"
    "aidsafe.SwapChunkResponse", 625,
  &protobuf_BuildDesc_maidsafe_5fservice_2eproto_AssignGlobalDescriptors);
}

// Force BuildDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_5fservice_2eproto {
  StaticDescriptorInitializer_maidsafe_5fservice_2eproto() {
    protobuf_BuildDesc_maidsafe_5fservice_2eproto();
  }
} static_descriptor_initializer_maidsafe_5fservice_2eproto_;


// ===================================================================

MaidsafeService::~MaidsafeService() {}

const ::google::protobuf::ServiceDescriptor* MaidsafeService::descriptor() {
  return MaidsafeService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* MaidsafeService::GetDescriptor() {
  return MaidsafeService_descriptor_;
}

void MaidsafeService::StoreChunk(::google::protobuf::RpcController* controller,
                         const ::maidsafe::StoreRequest*,
                         ::maidsafe::StoreResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StoreChunk() not implemented.");
  done->Run();
}

void MaidsafeService::CheckChunk(::google::protobuf::RpcController* controller,
                         const ::maidsafe::CheckChunkRequest*,
                         ::maidsafe::CheckChunkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CheckChunk() not implemented.");
  done->Run();
}

void MaidsafeService::Get(::google::protobuf::RpcController* controller,
                         const ::maidsafe::GetRequest*,
                         ::maidsafe::GetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Get() not implemented.");
  done->Run();
}

void MaidsafeService::Update(::google::protobuf::RpcController* controller,
                         const ::maidsafe::UpdateRequest*,
                         ::maidsafe::UpdateResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Update() not implemented.");
  done->Run();
}

void MaidsafeService::GetMessages(::google::protobuf::RpcController* controller,
                         const ::maidsafe::GetMessagesRequest*,
                         ::maidsafe::GetMessagesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMessages() not implemented.");
  done->Run();
}

void MaidsafeService::Delete(::google::protobuf::RpcController* controller,
                         const ::maidsafe::DeleteRequest*,
                         ::maidsafe::DeleteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Delete() not implemented.");
  done->Run();
}

void MaidsafeService::ValidityCheck(::google::protobuf::RpcController* controller,
                         const ::maidsafe::ValidityCheckRequest*,
                         ::maidsafe::ValidityCheckResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ValidityCheck() not implemented.");
  done->Run();
}

void MaidsafeService::SwapChunk(::google::protobuf::RpcController* controller,
                         const ::maidsafe::SwapChunkRequest*,
                         ::maidsafe::SwapChunkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SwapChunk() not implemented.");
  done->Run();
}

void MaidsafeService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), MaidsafeService_descriptor_);
  switch(method->index()) {
    case 0:
      StoreChunk(controller,
             ::google::protobuf::down_cast<const ::maidsafe::StoreRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::StoreResponse*>(response),
             done);
      break;
    case 1:
      CheckChunk(controller,
             ::google::protobuf::down_cast<const ::maidsafe::CheckChunkRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::CheckChunkResponse*>(response),
             done);
      break;
    case 2:
      Get(controller,
             ::google::protobuf::down_cast<const ::maidsafe::GetRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::GetResponse*>(response),
             done);
      break;
    case 3:
      Update(controller,
             ::google::protobuf::down_cast<const ::maidsafe::UpdateRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::UpdateResponse*>(response),
             done);
      break;
    case 4:
      GetMessages(controller,
             ::google::protobuf::down_cast<const ::maidsafe::GetMessagesRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::GetMessagesResponse*>(response),
             done);
      break;
    case 5:
      Delete(controller,
             ::google::protobuf::down_cast<const ::maidsafe::DeleteRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::DeleteResponse*>(response),
             done);
      break;
    case 6:
      ValidityCheck(controller,
             ::google::protobuf::down_cast<const ::maidsafe::ValidityCheckRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::ValidityCheckResponse*>(response),
             done);
      break;
    case 7:
      SwapChunk(controller,
             ::google::protobuf::down_cast<const ::maidsafe::SwapChunkRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::SwapChunkResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MaidsafeService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), MaidsafeService_descriptor_);
  switch(method->index()) {
    case 0:
      return ::maidsafe::StoreRequest::default_instance();
    case 1:
      return ::maidsafe::CheckChunkRequest::default_instance();
    case 2:
      return ::maidsafe::GetRequest::default_instance();
    case 3:
      return ::maidsafe::UpdateRequest::default_instance();
    case 4:
      return ::maidsafe::GetMessagesRequest::default_instance();
    case 5:
      return ::maidsafe::DeleteRequest::default_instance();
    case 6:
      return ::maidsafe::ValidityCheckRequest::default_instance();
    case 7:
      return ::maidsafe::SwapChunkRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& MaidsafeService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), MaidsafeService_descriptor_);
  switch(method->index()) {
    case 0:
      return ::maidsafe::StoreResponse::default_instance();
    case 1:
      return ::maidsafe::CheckChunkResponse::default_instance();
    case 2:
      return ::maidsafe::GetResponse::default_instance();
    case 3:
      return ::maidsafe::UpdateResponse::default_instance();
    case 4:
      return ::maidsafe::GetMessagesResponse::default_instance();
    case 5:
      return ::maidsafe::DeleteResponse::default_instance();
    case 6:
      return ::maidsafe::ValidityCheckResponse::default_instance();
    case 7:
      return ::maidsafe::SwapChunkResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

MaidsafeService_Stub::MaidsafeService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MaidsafeService_Stub::MaidsafeService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MaidsafeService_Stub::~MaidsafeService_Stub() {
  if (owns_channel_) delete channel_;
}

void MaidsafeService_Stub::StoreChunk(::google::protobuf::RpcController* controller,
                              const ::maidsafe::StoreRequest* request,
                              ::maidsafe::StoreResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(MaidsafeService_descriptor_->method(0),
                       controller, request, response, done);
}
void MaidsafeService_Stub::CheckChunk(::google::protobuf::RpcController* controller,
                              const ::maidsafe::CheckChunkRequest* request,
                              ::maidsafe::CheckChunkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(MaidsafeService_descriptor_->method(1),
                       controller, request, response, done);
}
void MaidsafeService_Stub::Get(::google::protobuf::RpcController* controller,
                              const ::maidsafe::GetRequest* request,
                              ::maidsafe::GetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(MaidsafeService_descriptor_->method(2),
                       controller, request, response, done);
}
void MaidsafeService_Stub::Update(::google::protobuf::RpcController* controller,
                              const ::maidsafe::UpdateRequest* request,
                              ::maidsafe::UpdateResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(MaidsafeService_descriptor_->method(3),
                       controller, request, response, done);
}
void MaidsafeService_Stub::GetMessages(::google::protobuf::RpcController* controller,
                              const ::maidsafe::GetMessagesRequest* request,
                              ::maidsafe::GetMessagesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(MaidsafeService_descriptor_->method(4),
                       controller, request, response, done);
}
void MaidsafeService_Stub::Delete(::google::protobuf::RpcController* controller,
                              const ::maidsafe::DeleteRequest* request,
                              ::maidsafe::DeleteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(MaidsafeService_descriptor_->method(5),
                       controller, request, response, done);
}
void MaidsafeService_Stub::ValidityCheck(::google::protobuf::RpcController* controller,
                              const ::maidsafe::ValidityCheckRequest* request,
                              ::maidsafe::ValidityCheckResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(MaidsafeService_descriptor_->method(6),
                       controller, request, response, done);
}
void MaidsafeService_Stub::SwapChunk(::google::protobuf::RpcController* controller,
                              const ::maidsafe::SwapChunkRequest* request,
                              ::maidsafe::SwapChunkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(MaidsafeService_descriptor_->method(7),
                       controller, request, response, done);
}

}  // namespace maidsafe
