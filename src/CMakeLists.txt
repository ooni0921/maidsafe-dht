CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
MESSAGE("================================================================================\n")
SET(CMAKE_CACHEFILE "${CMAKE_CACHEFILE_DIR}/CMakeCache.txt")
IF(WIN32)
  STRING(REPLACE "/" "\\" CMAKE_CACHEFILE ${CMAKE_CACHEFILE})
ENDIF()
SET(ERROR_MESSAGE "No generator previously specified.  Run:\n")
IF(UNIX)
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}\trm ${CMAKE_CACHEFILE}\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}then run e.g:\n\tcmake ../.. -G\"CodeBlocks - Unix Makefiles\"\n\n")
ELSE(UNIX)
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}\tdel ${CMAKE_CACHEFILE}\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}then run e.g:\n\tcmake ../.. -G\"CodeBlocks - MinGW Makefiles\"\n\n")
ENDIF(UNIX)
SET(ERROR_MESSAGE "${ERROR_MESSAGE}To see a full list of generators, run:\n\tcmake ../.. --help\n")
SET(CMAKE_GEN ${CMAKE_GENERATOR} CACHE INTERNAL "" FORCE)
IF(NOT ${CMAKE_C_COMPILER_WORKS})
  MESSAGE(FATAL_ERROR ${ERROR_MESSAGE})
ENDIF()

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE "Release" CACHE INTERNAL "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel." FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)
PROJECT(maidsafe-dht)
IF(NOT MAIDSAFE_TEST_TYPE)
  SET(MAIDSAFE_TEST_TYPE "BEH" CACHE INTERNAL "Choose the type of TEST, options are: _ BEH FUNC" FORCE)
ENDIF(NOT MAIDSAFE_TEST_TYPE)

IF(UNIX)
  EXECUTE_PROCESS(COMMAND date +%a%d%m%y OUTPUT_VARIABLE pddate OUTPUT_STRIP_TRAILING_WHITESPACE)
ELSE(UNIX)
  EXECUTE_PROCESS(COMMAND CMD /C DATE /T OUTPUT_VARIABLE pddate OUTPUT_STRIP_TRAILING_WHITESPACE)
  STRING(REPLACE "/" "" pddate ${pddate})
  STRING(SUBSTRING ${pddate} 0 4 pddateddmm)
  STRING(SUBSTRING ${pddate} 6 2 pddateyy)
  SET(pddate ${pddateddmm}${pddateyy})
ENDIF(UNIX)

###################################################################################################
# Set default include and library directories                                                     #
###################################################################################################
IF(WIN32)
  IF(MSVC)
    SET(INCLUDE_DIR c:/include)
    SET(LIB_DIR c:/lib)
    SET(DOC_LIB_DIR " - e.g. \"c:\\lib\"")
  ELSE(MSVC)
    SET(INCLUDE_DIR c:/usr/include)
    SET(LIB_DIR c:/usr/lib)
    SET(DOC_LIB_DIR " - e.g. \"c:\\usr\\lib\"")
    LINK_DIRECTORIES(c:/MinGW/lib/ c:/MinGW/mingw32/lib/ c:/usr/lib/)
  ENDIF(MSVC)
ELSE(WIN32)
  SET(INCLUDE_DIR /usr/include /usr/local/include /opt/local/var/macports/software/macfuse/1.7_0/opt/local/include)
  SET(LIB_DIR /usr/lib /usr/local/lib)
  IF(APPLE)
    SET(CMAKE_OSX_SYSROOT "/")
  ENDIF(APPLE)
ENDIF(WIN32)
SET(CMAKE_REQUIRED_INCLUDES ${INCLUDE_DIR})

IF(CMAKE_BUILD_TYPE MATCHES "Release")
  MESSAGE("Building a package which is OK to release.")
  MESSAGE("------------------------------------------")
  SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Release/bin/)
  SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Release/lib)
ELSE()
  MESSAGE("Building a package which is NOT OK to release.")
  MESSAGE("----------------------------------------------")
  SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Debug/bin/)
  SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Debug/lib)
 	SET(pddate "DEVELOPER_${pddate}")
ENDIF()

###################################################################################################
# Boost libraries search                                                                          #
###################################################################################################
SET(REQUIRED_BOOST_COMPONENTS date_time filesystem program_options system thread)
SET(COPY_OF_LIST REQUIRED_BOOST_COMPONENTS)
FOREACH(COMPONENT ${REQUIRED_BOOST_COMPONENTS})
  LIST(LENGTH ${COPY_OF_LIST} LEN)
  MATH(EXPR LEN ${LEN}-1)
  LIST(FIND ${COPY_OF_LIST} ${COMPONENT} POSITION)
  IF(${POSITION} EQUAL 0)
    SET(REQUIRED_BOOST_LIST \"${COMPONENT}\")
  ELSEIF(${POSITION} EQUAL LEN)
    SET(REQUIRED_BOOST_LIST "${REQUIRED_BOOST_LIST} and \"${COMPONENT}\"")
  ELSE()
    SET(REQUIRED_BOOST_LIST "${REQUIRED_BOOST_LIST}, \"${COMPONENT}\"")
  ENDIF()
  STRING(TOUPPER ${COMPONENT} COMP)
  UNSET(Boost_${COMP}_FOUND CACHE)
ENDFOREACH()
FOREACH(VER_NUM RANGE 40 99)
  SET(Boost_ADDITIONAL_VERSIONS ${Boost_ADDITIONAL_VERSIONS} "1.${VER_NUM}" "1.${VER_NUM}.0")
  SET(BOOST_TRY_VERSIONS ${BOOST_TRY_VERSIONS} "boost-1_${VER_NUM}")
ENDFOREACH()
UNSET(Boost_INCLUDE_DIR CACHE)
UNSET(BOOST_LIBRARY_DIRS CACHE)
UNSET(TRY_BOOST_INC_DIR CACHE)
IF(DEFINED BOOST_LIB_DIR)
  SET(BOOST_LIB_DIR ${BOOST_LIB_DIR} CACHE INTERNAL "Path to Boost libraries directory" FORCE)
  SET(BOOST_LIBRARYDIR ${BOOST_LIB_DIR} CACHE INTERNAL "Path to Boost libraries directory" FORCE)
ELSE()
  IF(WIN32)
    SET(BOOST_LIBRARYDIR ${LIB_DIR})
  ELSE()
    LIST(GET ${LIB_DIR} 0 BOOST_LIBRARYDIR)
  ENDIF()
ENDIF()
IF(DEFINED BOOST_INC_DIR)
  SET(BOOST_INC_DIR ${BOOST_INC_DIR} CACHE INTERNAL "Path to Boost include directory" FORCE)
  SET(Boost_INCLUDE_DIR ${BOOST_INC_DIR} CACHE INTERNAL "Path to Boost include directory" FORCE)
ELSE()
  LIST(REVERSE BOOST_TRY_VERSIONS)
  FOREACH(TRY_VERSION ${BOOST_TRY_VERSIONS})
    FOREACH(INC_OPTION ${INCLUDE_DIR})
      FIND_FILE(TRY_BOOST_INC_DIR ${TRY_VERSION} ${INC_OPTION})
      IF(NOT TRY_BOOST_INC_DIR MATCHES TRY_BOOST_INC_DIR-NOTFOUND)
        SET(Boost_INCLUDE_DIR ${TRY_BOOST_INC_DIR})
        BREAK()
      ENDIF()
    ENDFOREACH()
    IF(NOT TRY_BOOST_INC_DIR MATCHES TRY_BOOST_INC_DIR-NOTFOUND)
      BREAK()
    ENDIF()
  ENDFOREACH()
ENDIF()
SET(Boost_USE_STATIC_LIBS ON)
SET(Boost_USE_MULTITHREADED ON)
FIND_PACKAGE(Boost 1.40 COMPONENTS ${REQUIRED_BOOST_COMPONENTS})
FOREACH(COMPONENT ${REQUIRED_BOOST_COMPONENTS})
  STRING(TOUPPER ${COMPONENT} COMP)
  IF(NOT DEFINED Boost_${COMP}_FOUND)
    IF(DEFINED Boost_LIB_VERSION)
      SET(ERROR_VERSION "version ${Boost_LIB_VERSION} ")
    ENDIF()
    SET(ERROR_MESSAGE "\nFound Boost headers at ${Boost_INCLUDE_DIR} but could not find ")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}Boost \"${COMPONENT}\" library.\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}Required Boost libraries are ${REQUIRED_BOOST_LIST}.\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download Boost libraries at http://www.boost.org\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}If the required Boost libraries are already installed, run:\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DBOOST_LIB_DIR=<Path to Boost library directory> and/or\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DBOOST_INC_DIR=<Path to Boost include directory>")
    MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
  ENDIF()
ENDFOREACH()
IF(NOT Boost_FOUND)
  SET(ERROR_MESSAGE "\nCould not find Boost libraries.\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}Required Boost libraries are ${REQUIRED_BOOST_LIST}.\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download Boost libraries at http://www.boost.org\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If the required Boost libraries are already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DBOOST_LIB_DIR=<Path to Boost library directory> and/or\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DBOOST_INC_DIR=<Path to Boost include directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ENDIF()

###################################################################################################
# Google Glog library (logging) search. Only on UNIX, since currently it cannot be compiled on    #
# Windows with MinGW                                                                              #
###################################################################################################
INCLUDE(CheckIncludeFileCXX)
IF(UNIX)
  UNSET(GLOG_LIB CACHE)
  UNSET(GLOG_INCLUDE CACHE)
  FIND_LIBRARY(GLOG_LIB NAMES libglog.a glog DOC "Path to glog library${DOC_LIB_DIR}")
  CHECK_INCLUDE_FILE_CXX(glog/logging.h GLOG_INCLUDE)
  IF(GLOG_LIB AND GLOG_INCLUDE)
    MESSAGE("Using GLOG")
  ELSE(GLOG_LIB AND GLOG_INCLUDE)
    SET(GLOG_LIB "")
    MESSAGE("Not using GLOG")
  ENDIF(GLOG_LIB AND GLOG_INCLUDE)
ENDIF(UNIX)

CONFIGURE_FILE(${maidsafe-dht_SOURCE_DIR}/config.h.in ${maidsafe-dht_SOURCE_DIR}/maidsafe/config.h)

###################################################################################################
# Google Test library search                                                                      #
###################################################################################################
UNSET(GTEST_LIBRARY CACHE)
UNSET(GTEST_MAIN_LIBRARY CACHE)
UNSET(GTEST_INCLUDE_DIR CACHE)
UNSET(GTEST_INCLUDE CACHE)
IF(GTEST_ROOT_PATH)
  SET(GTEST_ROOT_PATH ${GTEST_ROOT_PATH} CACHE INTERNAL "Path to Google Test library directory" FORCE)
  SET(ENV{GTEST_ROOT} ${GTEST_ROOT_PATH})
ELSE()
  SET(ENV{GTEST_ROOT} ${LIB_DIR})
ENDIF()
IF(GTEST_INCLUDE_PATH)
  SET(GTEST_INCLUDE_PATH ${GTEST_INCLUDE_PATH} CACHE INTERNAL "Path to Google Test include directory" FORCE)
  SET(GTEST_INCLUDE_DIR ${GTEST_INCLUDE_PATH} CACHE INTERNAL "Path to Google Test include directory" FORCE)
ELSE()
  FOREACH(INC_OPTION ${INCLUDE_DIR})
    SET(GTEST_INCLUDE_DIR ${GTEST_INCLUDE_DIR} ${INC_OPTION}/gtest CACHE INTERNAL "Path to Google Test include directory" FORCE)
  ENDFOREACH()
ENDIF()
INCLUDE(FindGTest)
FIND_PACKAGE(GTest)
CHECK_INCLUDE_FILE_CXX(gtest/gtest.h GTEST_INCLUDE)
IF(GTEST_LIBRARY)
  IF(NOT GTEST_INCLUDE)
    SET(ERROR_MESSAGE "\nCould not find Google Test.  NO GTEST.H - ")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/googletest\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}If Google Test is already installed, run:\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DGTEST_INCLUDE_PATH=<Path to gtest include directory>")
    MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
  ENDIF()
ELSE(GTEST_LIBRARY)
  SET(ERROR_MESSAGE "\nCould not find Google Test.  NO GTEST LIBRARY - ")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/googletest\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If Google Test is already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DGTEST_ROOT_PATH=<Path to gtest library directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ENDIF(GTEST_LIBRARY)

###################################################################################################
# Protocol Buffers library search                                                                 #
###################################################################################################
UNSET(PROTOBUF_LIBRARY CACHE)
UNSET(PROTOBUF_PROTOC_EXECUTABLE CACHE)
UNSET(PROTOBUF_PROTOC_LIBRARY CACHE)
UNSET(FIND_PACKAGE_MESSAGE_DETAILS_PROTOBUF CACHE)
UNSET(PROTOBUF_INCLUDE_DIR CACHE)
UNSET(PROTOBUF_INCLUDE CACHE)
IF(PROTOBUF_LIBRARY_PATH)
  SET(PROTOBUF_LIBRARY_PATH ${PROTOBUF_LIBRARY_PATH} CACHE INTERNAL "Path to Protocol Buffers library directory" FORCE)
  SET(PROTOBUF_LIB_DIR ${PROTOBUF_LIBRARY_PATH})
ELSE()
  SET(PROTOBUF_LIB_DIR ${LIB_DIR})
ENDIF()
IF(PROTOBUF_INCLUDE_PATH)
  SET(PROTOBUF_INCLUDE_PATH ${PROTOBUF_INCLUDE_PATH} CACHE INTERNAL "Path to Protocol Buffers include directory" FORCE)
  SET(PROTOBUF_INCLUDE_DIR ${PROTOBUF_INCLUDE_PATH} CACHE INTERNAL "Path to Protocol Buffers include directory" FORCE)
ELSE()
  FOREACH(INC_OPTION ${INCLUDE_DIR})
    SET(PROTOBUF_INCLUDE_DIR ${PROTOBUF_INCLUDE_DIR} ${INC_OPTION}/google/protobuf CACHE INTERNAL "Path to Protocol Buffers include directory" FORCE)
  ENDFOREACH()
ENDIF()
FIND_LIBRARY(PROTOBUF_LIBRARY NAMES protobuf libprotobuf.a PATHS ${PROTOBUF_LIB_DIR} DOC "Path to Protocol Buffers library")
FIND_LIBRARY(PROTOBUF_PROTOC_LIBRARY NAMES protoc libprotoc.a PATHS ${PROTOBUF_LIB_DIR} DOC "Path to Protocol Buffers protoc library")
INCLUDE(FindProtobuf)
FIND_PACKAGE(Protobuf REQUIRED)
CHECK_INCLUDE_FILE_CXX(google/protobuf/descriptor.h PROTOBUF_INCLUDE)
IF(PROTOBUF_LIBRARY)
  IF(NOT PROTOBUF_INCLUDE)
    SET(ERROR_MESSAGE "\nCould not find Protocol Buffers.  AT LEAST ONE HEADER FILE IS MISSING - ")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/protobuf\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}If Protocol Buffers is already installed, run:\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DPROTOBUF_INCLUDE_PATH=<Path to protobuf include directory>")
    MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
  ENDIF()
ELSE(PROTOBUF_LIBRARY)
  SET(ERROR_MESSAGE "\nCould not find Protocol Buffers.  NO PROTOBUF LIBRARY - ")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/protobuf\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If Protocol Buffers is already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DPROTOBUF_LIBRARY_PATH=<Path to protobuf library directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ENDIF(PROTOBUF_LIBRARY)
EXECUTE_PROCESS(COMMAND ${PROTOBUF_PROTOC_EXECUTABLE} --version OUTPUT_VARIABLE PROTOC_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
SET(PROTOC_REQUIRED_VERSION "libprotoc 2.1.0")
IF(NOT ${PROTOC_VERSION} MATCHES ${PROTOC_REQUIRED_VERSION})
  SET(ERROR_MESSAGE "\nFound ${PROTOC_VERSION}, but required version is ${PROTOC_REQUIRED_VERSION}\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/protobuf\n")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ENDIF()

###################################################################################################
# Python library search                                                                           #
###################################################################################################
UNSET(PYTHON_EXECUTABLE CACHE)
INCLUDE(FindPythonInterp)
FIND_PACKAGE(PythonInterp)
IF(PYTHONINTERP_FOUND)
  MESSAGE("-- Found python executable: style checking enabled.")
ELSE(PYTHONINTERP_FOUND)
  MESSAGE("-- Didn't find python executable: style checking disabled.")
ENDIF(PYTHONINTERP_FOUND)

###################################################################################################
# All other libraries search                                                                      #
###################################################################################################
IF(UNIX)
  SET(SYS_LIB dl pthread)
  IF(NOT APPLE)
    SET(SYS_LIB rt c m ${SYS_LIB})
  ENDIF()
  FOREACH(library ${SYS_LIB})
    FIND_LIBRARY(CURRENT_LIB ${library} ${LIB_DIR})
    IF(CURRENT_LIB)
      MESSAGE("-- Found library ${CURRENT_LIB}")
    ELSE(CURRENT_LIB)
      MESSAGE(FATAL_ERROR "\nCouldn't find lieberry ${library}")
    ENDIF(CURRENT_LIB)
    UNSET(CURRENT_LIB CACHE)
  ENDFOREACH()
ELSEIF(WIN32)
  IF(MSVC)
    SET(SYS_LIB c:/lib/WSock32.lib c:/lib/IPHlpApi.lib)
  ELSE(MSVC)
    SET(SYS_LIB advapi32 kernel32 ws2_32 iphlpapi)
  ENDIF(MSVC)
  FOREACH(library ${SYS_LIB})
    FIND_LIBRARY(CURRENT_LIB ${library} c:/usr/lib)
    IF(CURRENT_LIB)
      MESSAGE("-- Found library ${CURRENT_LIB}")
    ELSE(CURRENT_LIB)
      MESSAGE(FATAL_ERROR "\nCouldn't find lieberry ${library}")
    ENDIF(CURRENT_LIB)
    UNSET(CURRENT_LIB CACHE)
  ENDFOREACH()
ENDIF(UNIX)

SET(SYS_LIB ${SYS_LIB} ${Boost_LIBRARIES} ${GLOG_LIB} ${PROTOBUF_LIBRARY})
INCLUDE_DIRECTORIES(${maidsafe-dht_SOURCE_DIR} ${maidsafe-dht_SOURCE_DIR}/libupnp ${INCLUDE_DIR} ${GTEST_INCLUDE_DIRS} ${PROTOBUF_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS})
MESSAGE("================================================================================")

###################################################################################################
# Set up all files as GLOBs                                                                       #
###################################################################################################
####    CODE    ####
LIST(APPEND M_LIBUPNP_DIR libupnp/igd_desc_parse.c  libupnp/minixml.c libupnp/minisoap.c libupnp/miniwget.c  libupnp/upnpcommands.c libupnp/upnpreplyparse.c libupnp/upnperrors.c libupnp/miniupnpc.c libupnp/minissdpc.c)
FILE(GLOB M_NATPMP_C "nat-pmp/*.c*")
FILE(GLOB M_NATPMP_H "nat-pmp/*.h*")
LIST(APPEND M_NATPMP_DIR ${M_NATPMP_C} ${M_NATPMP_H})
FILE(GLOB M_UPNP_C "upnp/*.c*")
FILE(GLOB M_UPNP_H "upnp/*.h*")
LIST(APPEND M_UPNP_DIR ${M_UPNP_C} ${M_UPNP_H})
LIST(REMOVE_ITEM M_UPNP_DIR "${maidsafe-dht_SOURCE_DIR}/upnp/upnpclientimpl.cc")
LIST(REMOVE_ITEM M_UPNP_DIR "${maidsafe-dht_SOURCE_DIR}/upnp/upnpclientimpl.h")
FILE(GLOB M_PROTOBUF_C "protobuf/*.c*")
FILE(GLOB M_PROTOBUF_H "protobuf/*.h*")
LIST(APPEND M_PROTOBUF_DIR ${M_PROTOBUF_C} ${M_PROTOBUF_H})
FILE(GLOB M_BASE_C "base/*.c*")
FILE(GLOB M_BASE_H "base/*.h*")
LIST(APPEND M_BASE_DIR ${M_BASE_C} ${M_BASE_H})
FILE(GLOB M_KADEMLIA_C "kademlia/*.c*")
FILE(GLOB M_KADEMLIA_H "kademlia/*.h*")
LIST(APPEND M_KADEMLIA_DIR ${M_KADEMLIA_C} ${M_KADEMLIA_H})
LIST(APPEND STYLE_KADEMLIA ${M_KADEMLIA_C} ${M_KADEMLIA_H})
FILE(GLOB PB_KADEMLIA "kademlia/*.pb.*")
FILE(GLOB M_TRANSPORT_C "transport/*.c*")
FILE(GLOB M_TRANSPORT_H "transport/*.h*")
LIST(APPEND M_TRANSPORT_DIR ${M_TRANSPORT_C} ${M_TRANSPORT_H})
FILE(GLOB M_UDT_C "udt/*.h*")
FILE(GLOB M_UDT_H "udt/*.c*")
LIST(APPEND M_UDT_DIR ${M_UDT_C} ${M_UDT_H})
FILE(GLOB MAIDSAFE_C "maidsafe/*.c*")
FILE(GLOB MAIDSAFE_H "maidsafe/*.h*")
LIST(APPEND MAIDSAFE_DIR ${MAIDSAFE_C} ${MAIDSAFE_H})
####    TESTS    ####
FILE(GLOB T_BASE_C "tests/base/*.c*")
FILE(GLOB T_BASE_H "tests/base/*.h*")
LIST(APPEND T_BASE_DIR ${T_BASE_C} ${T_BASE_H})
FILE(GLOB T_KADEMLIA_C "tests/kademlia/*.c*")
FILE(GLOB T_KADEMLIA_H "tests/kademlia/*.h*")
LIST(APPEND T_KADEMLIA_DIR ${T_KADEMLIA_C} ${T_KADEMLIA_H})
LIST(REMOVE_ITEM T_KADEMLIA_DIR "${maidsafe-dht_SOURCE_DIR}/tests/kademlia/testknode.cc")
FILE(GLOB T_TRANSPORT_C "tests/transport/*.c*")
FILE(GLOB T_TRANSPORT_H "tests/transport/*.h*")
LIST(APPEND T_TRANSPORT_DIR ${T_TRANSPORT_C} ${T_TRANSPORT_H})
FILE(GLOB T_MAIN  "tests/main.cc")
FILE(GLOB M_RPCPROTO_C "rpcprotocol/*.c*")
FILE(GLOB M_RPCPROTO_H "rpcprotocol/*.h*")
LIST(APPEND M_RPCPROTO_DIR ${M_RPCPROTO_C} ${M_RPCPROTO_H})
LIST(APPEND STYLE_RPCPROTO ${M_RPCPROTO_C} ${M_RPCPROTO_H})
FILE(GLOB T_RPCPROTO_C "tests/rpcprotocol/*.c*")
FILE(GLOB T_RPCPROTO_H "tests/rpcprotocol/*.h*")
LIST(APPEND T_RPCPROTO_DIR ${T_RPCPROTO_C} ${T_RPCPROTO_H})
FILE(GLOB STYLE_RPCPROTO_C "tests/rpcprotocol/*.c*")
FILE(GLOB STYLE_RPCPROTO_H "tests/rpcprotocol/*.h*")
LIST(APPEND STYLE_RPCPROTO_DIR ${STYLE_RPCPROTO_C} ${STYLE_RPCPROTO_H})
LIST(REMOVE_ITEM STYLE_RPCPROTO_DIR "${maidsafe-dht_SOURCE_DIR}/tests/rpcprotocol/testservices.pb.h")
LIST(REMOVE_ITEM STYLE_RPCPROTO_DIR "${maidsafe-dht_SOURCE_DIR}/tests/rpcprotocol/testservices.pb.cc")
FILE(GLOB T_NATPMP_C "tests/nat-pmp/*.c*")
FILE(GLOB T_NATPMP_H "tests/nat-pmp/*.h*")
LIST(APPEND T_NATPMP_DIR ${T_NATPMP_C} ${T_NATPMP_H})
FILE(GLOB T_UPNP_C "tests/upnp/*.c*")
FILE(GLOB T_UPNP_H "tests/upnp/*.h*")
LIST(APPEND T_UPNP_DIR ${T_UPNP_C} ${T_UPNP_H})
FILE(GLOB T_FUNC_KADEMLIA_C "tests/functionalkademlia/*.c*")
FILE(GLOB T_FUNC_KADEMLIA_H "tests/functionalkademlia/*.h*")
LIST(APPEND T_FUNC_KADEMLIA_DIR ${T_FUNC_KADEMLIA_C} ${T_FUNC_KADEMLIA_H})
LIST(REMOVE_ITEM T_FUNC_KADEMLIA_DIR "tests/kademlia/testknode.cc")
FILE(GLOB CRYPTOPP_C "cryptopp/*.c*")
FILE(GLOB CRYPTOPP_H "cryptopp/*.h*")
LIST(APPEND CRYPTOPP ${CRYPTOPP_C} ${CRYPTOPP_H})
FILE(GLOB T_DEMO_C "tests/demo/*.c*")
FILE(GLOB T_DEMO_H "tests/demo/*.h*")
LIST(APPEND T_DEMO_DIR ${T_DEMO_C} ${T_DEMO_H})
LIST(APPEND DHT_SOURCE_FILES ${M_BASE_DIR} ${M_KADEMLIA_DIR} ${M_TRANSPORT_DIR} ${M_PROTOBUF_DIR} ${M_RPCPROTO_DIR} ${M_UPNP_DIR} ${M_NATPMP_DIR} ${MAIDSAFE_DIR})

###################################################################################################
# All Platforms:  Add Test Exes and Create all maidsafe-dht libs                                  #
###################################################################################################
ADD_EXECUTABLE(TESTbase ${T_MAIN} ${T_BASE_DIR} ${M_BASE_DIR} ${MAIDSAFE_DIR} ${CRYPTOPP})
ADD_EXECUTABLE(TESTkademlia ${T_MAIN} ${T_KADEMLIA_DIR} ${MAIDSAFE_DIR})
ADD_EXECUTABLE(TESTknode "tests/kademlia/testknode.cc" ${MAIDSAFE_DIR})
ADD_EXECUTABLE(TESTtransport ${T_MAIN} ${T_TRANSPORT_DIR} ${M_BASE_DIR} ${M_TRANSPORT_DIR} ${M_PROTOBUF_DIR} ${MAIDSAFE_DIR}  ${M_UDT_DIR} ${CRYPTOPP})
ADD_EXECUTABLE(TESTrpcprotocol ${T_MAIN} ${T_RPCPROTO_DIR} ${M_BASE_DIR} ${M_TRANSPORT_DIR} ${M_PROTOBUF_DIR} ${M_RPCPROTO_DIR} ${MAIDSAFE_DIR} ${M_UDT_DIR} ${CRYPTOPP})
ADD_EXECUTABLE(TESTnatpmp ${T_MAIN} ${T_NATPMP_DIR} ${M_BASE_DIR} ${M_NATPMP_DIR} ${MAIDSAFE_DIR} ${CRYPTOPP})
ADD_EXECUTABLE(TESTupnp ${T_MAIN} ${T_UPNP_DIR} ${M_BASE_DIR} ${M_UPNP_DIR} ${M_LIBUPNP_DIR} ${MAIDSAFE_DIR} ${CRYPTOPP})
ADD_EXECUTABLE(kaddemo ${T_DEMO_DIR})

ADD_LIBRARY(maidsafe-dht STATIC ${M_BASE_DIR} ${M_KADEMLIA_DIR} ${M_TRANSPORT_DIR} ${M_PROTOBUF_DIR} ${M_RPCPROTO_DIR} ${M_LIBUPNP_DIR} ${M_UPNP_DIR} ${MAIDSAFE_DIR} ${M_UDT_DIR} ${M_NATPMP_DIR} ${CRYPTOPP})

###################################################################################################
# Builds                                                                                          #
###################################################################################################
TARGET_LINK_LIBRARIES(TESTbase protobuf  gtest ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTtransport gtest ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTrpcprotocol gtest ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTkademlia maidsafe-dht gtest  ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTknode maidsafe-dht gtest ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTnatpmp gtest ${SYS_LIB} )
TARGET_LINK_LIBRARIES(TESTupnp gtest ${SYS_LIB})
TARGET_LINK_LIBRARIES(maidsafe-dht ${SYS_LIB})
TARGET_LINK_LIBRARIES(kaddemo maidsafe-dht ${DEMO_LIBS})

###################################################################################################
# Compiler and linker flags - after all targets declared                                          #
###################################################################################################
SET(BUILD_SHARED_LIBS OFF)
####APPLE##############################
IF(APPLE)
  SET(CMAKE_AR "/usr/bin/libtool")
  SET(CMAKE_CXX_CREATE_STATIC_LIBRARY "<CMAKE_AR> -static -o <TARGET> <LINK_FLAGS> <OBJECTS>" "<CMAKE_RANLIB> <TARGET>")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_DARWIN_C_SOURCE")
  SET(MAIDSAFE_DHT_CXX_FLAGS "${CMAKE_CXX_FLAGS} -finline-functions -funswitch-loops -fgcse-after-reload -ftree-vectorize -D_FORTIFY_SOURCE=2 -DOSX -DBSD -D__FreeBSD__=10 -D_FILE_OFFSET_BITS=64 -DCRYPTOPP_DISABLE_ASM")
  SET(MAIDSAFE_DHT_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG -O0 -pg -fprofile-arcs -ftest-coverage")
  SET(MAIDSAFE_DHT_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wuninitialized")
  SET(MAIDSAFE_DHT_CXX_FLAGS "-w")
  #SET(TARGET_PROPERTIES_DEBUG TESTbase TESTknode TESTkademlia TESTtransport TESTrealmaidsafe TESTrealkademlia LINK_FLAGS -fprofile-arcs -ftest-coverage)
  SET(UDT_CXX_FLAGS "-fPIC -Wall -DOSX -finline-functions -O3")
  SET_SOURCE_FILES_PROPERTIES(${CRYPTOPP} PROPERTIES COMPILE_FLAGS "-DNDEBUG -g -O2 -DCRYPTOPP_DISABLE_ASM -pipe")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lprotobuf" CACHE INTERNAL "" FORCE)
  SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -lgcov" CACHE INTERNAL "" FORCE)
  SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} -lgcov" CACHE INTERNAL "" FORCE)
######LINUX################################
ELSEIF(UNIX AND NOT APPLE)
  SET(MAIDSAFE_DHT_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,-z,relro -Wformat -Wformat-security -Wall -finline-functions -funswitch-loops -fgcse-after-reload -ftree-vectorize -fpredictive-commoning -Wextra -Wfloat-equal -Wlong-long -Wredundant-decls -Wstrict-overflow=5 -Wunused-function -Wunused-label -Wunused-parameter -Wunused-value -Wunused-variable -std=c++98 -ansi -D_FORTIFY_SOURCE=2 -D_FILE_OFFSET_BITS=64 -DMAIDSAFE_LINUX")
  SET(MAIDSAFE_DHT_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG -pg -fprofile-arcs -ftest-coverage")
  SET(MAIDSAFE_DHT_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wuninitialized")
  IF(NOT CMAKE_BUILD_TYPE MATCHES "Release")
  	SET_TARGET_PROPERTIES(TESTbase TESTtransport TESTrpcprotocol TESTkademlia TESTknode TESTupnp TESTnatpmp kaddemo PROPERTIES LINK_FLAGS "-pg -fprofile-arcs -ftest-coverage")
  ENDIF(NOT CMAKE_BUILD_TYPE MATCHES "Release")
  SET(UDT_CXX_FLAGS "-fPIC -Wall -DLINUX -finline-functions -O3")
  SET_SOURCE_FILES_PROPERTIES(${CRYPTOPP} PROPERTIES COMPILE_FLAGS "-DNDEBUG -O3 -march=native -mtune=native -pipe")
#######WINDOWS##############
ELSEIF(WIN32)
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DUNICODE /D_UNICODE /D_WIN32_WINDOWS /D_CONSOLE /D__MSVC__")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} /DUNICODE /D_WIN32_WINDOWS /DDEBUG /D_CONSOLE")
  ELSE(MSVC)
    SET(MAIDSAFE_DHT_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -Wuninitialized")
    SET(MAIDSAFE_DHT_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG ") # -g -pg -O0 -Wall -W -Wshadow -Wunused-variable -Wunused-parameter -Wunused-function -Wunused -Wno-system-headers -Wno-deprecated -Woverloaded-virtual -Wwrite-strings -fprofile-arcs -ftest-coverage")
    SET(MAIDSAFE_DHT_CXX_FLAGS "-mthreads -D_FORTIFY_SOURCE=2 -D_FILE_OFFSET_BITS=64")
    ##put libs in here that will have no chance of passing tests - 3rd party ONLY !!
    SET(MAIDSAFE_DHT_CXX_FLAGS "${MAIDSAFE_DHT_CXX_FLAGS} -Wall -finline-functions -static -DNDEBUG -DSTATICLIB -DWIN32_LEAN_AND_MEAN -D__MINGW__ -D_GLIBCXX_USE_WCHAR_T -DUNICODE -D_UNICODE -DWIN32 -D_WIN32_WINNT=0x0501")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DNDEBUG -DSTATICLIB -DWIN32_LEAN_AND_MEAN -D__MINGW__ -static -D_GLIBCXX_USE_WCHAR_T -DUNICODE -D_UNICODE -DWIN32 -D_WIN32_WINNT=0x0501") # -g -O0 -Wall -W -fprofile-arcs -ftest-coverage")
    #SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}") # -fprofile-arcs -ftest-coverage -lgcov")
    SET(UDT_CXX_FLAGS "-mthreads -Wall -finline-functions -O3 -D__MINGW__ -DWIN32 -D_WIN32_WINNT=0x0501")
    SET_TARGET_PROPERTIES(TESTbase TESTtransport TESTrpcprotocol TESTkademlia TESTknode TESTnatpmp TESTupnp kaddemo PROPERTIES LINK_FLAGS "-mthreads")
    #  IF(NOT CMAKE_BUILD_TYPE MATCHES "Release")
    #  	SET_TARGET_PROPERTIES(TESTbase TESTtransport TESTrpcprotocol TESTkademlia TESTknode TESTupnp kaddemo PROPERTIES LINK_FLAGS "-pg -fprofile-arcs -ftest-coverage")
    #  ENDIF(NOT CMAKE_BUILD_TYPE MATCHES "Release")
  ENDIF(MSVC)
ENDIF(APPLE)

IF(NOT MSVC)
	SET(CMAKE_CXX_FLAGS "")
	SET(CMAKE_CXX_FLAGS_RELEASE "")
	SET(CMAKE_CXX_FLAGS_DEBUG "")
	IF(CMAKE_BUILD_TYPE MATCHES "Release")
		SET(MAIDSAFE_DHT_CXX_FLAGS "${MAIDSAFE_DHT_CXX_FLAGS} ${MAIDSAFE_DHT_CXX_FLAGS_RELEASE}")
	ELSE()
		SET(MAIDSAFE_DHT_CXX_FLAGS "${MAIDSAFE_DHT_CXX_FLAGS} ${MAIDSAFE_DHT_CXX_FLAGS_DEBUG}")
	ENDIF(CMAKE_BUILD_TYPE MATCHES "Release")
IF(NOT APPLE)
	SET_SOURCE_FILES_PROPERTIES(${CRYPTOPP} PROPERTIES COMPILE_FLAGS "-DNDEBUG -O3 -march=native -mtune=native -pipe")
ENDIF(NOT APPLE)
ENDIF(NOT MSVC)

SET_SOURCE_FILES_PROPERTIES(${M_UDT_DIR} PROPERTIES COMPILE_FLAGS ${UDT_CXX_FLAGS})
SET_SOURCE_FILES_PROPERTIES(${DHT_SOURCE_FILES} COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})
SET_SOURCE_FILES_PROPERTIES(${T_BASE_DIR} COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})
SET_SOURCE_FILES_PROPERTIES(${T_TRANSPORT_DIR} COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})
SET_SOURCE_FILES_PROPERTIES(${T_RPCPROTO_DIR} COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})
SET_SOURCE_FILES_PROPERTIES(${T_UPNP_DIR} COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})
SET_TARGET_PROPERTIES(TESTkademlia TESTknode kaddemo PROPERTIES COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})

###################################################################################################
# Tests                                                                                           #
###################################################################################################
INCLUDE(CTest)
SET(CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE 50000)
SET(CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE 50000)
SET(CTEST_CONTINUOUS_DURATION 600)
SET(CTEST_CONTINUOUS_MINIMUM_INTERVAL 10)
SET(CTEST_START_WITH_EMPTY_BINARY_DIRECTORY true)
IF(PYTHONINTERP_FOUND)
  IF(UNIX)
    ADD_TEST(STYLE_CHECK_KAD ${maidsafe-dht_SOURCE_DIR}/cpplint.py ${STYLE_KADEMLIA} ${T_KADEMLIA_DIR} ${T_FUNC_KADEMLIA_DIR})
    SET_PROPERTY(TEST STYLE_CHECK_KAD PROPERTY LABELS Functional Kademlia CodingStyle)
    ADD_TEST(STYLE_CHECK_BASE ${maidsafe-dht_SOURCE_DIR}/cpplint.py ${M_BASE_DIR} ${T_BASE_DIR})
    SET_PROPERTY(TEST STYLE_CHECK_BASE PROPERTY LABELS Functional Base CodingStyle)
    ADD_TEST(STYLE_CHECK_RPC ${maidsafe-dht_SOURCE_DIR}/cpplint.py ${M_RPCPROTO_DIR} ${STYLE_RPCPROTO_DIR})
    SET_PROPERTY(TEST STYLE_CHECK_RPC PROPERTY LABELS Functional RpcProtocol CodingStyle)
  ELSE(UNIX)
    ADD_TEST(STYLE_CHECK finderrorsall.bat)
    SET_PROPERTY(TEST STYLE_CHECK PROPERTY LABELS Functional CodingStyle)
  ENDIF(UNIX)
ENDIF(PYTHONINTERP_FOUND)
SET(FOUNDALLTESTS true)
IF(UNIX)
  SET(TEST_EXECUTABLES TESTupnp TESTnatpmp TESTbase TESTknode TESTkademlia TESTtransport TESTrpcprotocol)
ELSE(UNIX)
  SET(TEST_EXECUTABLES TESTupnp.exe TESTnatpmp.exe TESTbase.exe TESTknode.exe TESTkademlia.exe TESTtransport.exe TESTrpcprotocol.exe)
ENDIF(UNIX)
FOREACH(TEST_EXECUTABLE ${TEST_EXECUTABLES})
  IF(NOT EXISTS ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE})
    IF(FOUNDALLTESTS)
      SET(FOUNDALLTESTS false)
      MESSAGE("")
      MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
      MESSAGE("")
    ENDIF()
    MESSAGE(WARNING "Cannot find ${EXECUTABLE_OUTPUT_PATH}${TEST_EXECUTABLE}")
  ELSE()
    EXECUTE_PROCESS(COMMAND ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE} --gtest_list_tests OUTPUT_VARIABLE maid_tests)
    STRING(REPLACE "\n" ";" maid_tests "${maid_tests}")
    STRING(REPLACE " " "" maid_tests "${maid_tests}")
    IF(NOT WIN32)
      STRING(REPLACE " " ";" TEST_EXECUTABLE "${TEST_EXECUTABLE}")
    ENDIF()
    FOREACH(tst ${maid_tests})
      IF(NOT "${tst}" MATCHES [_])
        STRING(REGEX REPLACE "Test" "" label_name ${tst})
        STRING(REPLACE "." "" label_name ${label_name})
      ENDIF()
      IF(NOT "${tst}" MATCHES "(profiling).+" AND NOT "${tst}" MATCHES "Mergemismatchforsummaries+")
        IF(NOT "${tst}" MATCHES "(\\.$)")
  			  IF("${tst}" MATCHES "(${MAIDSAFE_TEST_TYPE}).+")
  			    SET(all_tests ${all_tests} ${tst})
  		      ADD_TEST(${tst} ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE} --gtest_filter=*${tst}*)
  		      IF("${tst}" MATCHES "^FUNC_" OR "${tst}" MATCHES "^DISABLED_FUNC_")
  		        SET_PROPERTY(TEST ${tst} PROPERTY LABELS Functional ${label_name})
              SET_PROPERTY(TEST ${tst} PROPERTY TIMEOUT 600)
  		      ELSEIF("${tst}" MATCHES "^BEH_" OR "${tst}" MATCHES "^DISABLED_BEH_")
  		        SET_PROPERTY(TEST ${tst} PROPERTY LABELS Behavioural ${label_name})
              SET_PROPERTY(TEST ${tst} PROPERTY TIMEOUT 60)
            ELSE()
              MESSAGE("")
   		        MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
              MESSAGE("")
   		        MESSAGE(AUTHOR_WARNING "${tst} should be named \"BEH_...\" or \"FUNC_...\" (with an optional \"DISABLED_\" prepended).")
   		        MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
  		      ENDIF()
   		      #MESSAGE("${tst}   ${TEST_EXECUTABLE}   --gtest_filter=*${tst}*   ${label_name}")
#            SET(check_for_repeats_list ${check_for_repeats_list} ${tst})
   		      EXECUTE_PROCESS(COMMAND ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE} --gtest_list_tests --gtest_filter=*${tst}* OUTPUT_VARIABLE repeateds)
            STRING(REGEX MATCHALL "\n" repeats ${repeateds})
            LIST(LENGTH repeats count)
            IF(count GREATER 2)
              SET(repeated_tests ${repeated_tests} ${tst})
            ENDIF()
     		  ENDIF()
   		  ENDIF()
  	  ENDIF()
    ENDFOREACH()
#    FOREACH(current_check ${check_for_repeats_list})
#      FOREACH(check_for_repeats ${check_for_repeats_list})
#        STRING(REGEX MATCH ${current_check} check_for_repeats_result ${check_for_repeats})
#        IF((NOT ${current_check} MATCHES ${check_for_repeats}) AND (check_for_repeats_result))
#          SET(repeated_tests ${repeated_tests} ${current_check})
#        ENDIF()
#      ENDFOREACH()
#    ENDFOREACH()
  ENDIF()
ENDFOREACH()
IF(NOT FOUNDALLTESTS)
  MESSAGE("Run cmake again after make to pick up tests.\n")
  MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
ENDIF()

IF(NOT CMAKE_SUPPRESS_DEVELOPER_WARNINGS)
  IF(DEFINED repeated_tests)
    SET(WARNING_MESSAGE "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    FOREACH(var ${repeated_tests})
      SET(WARNING_MESSAGE "${WARNING_MESSAGE}\nRepeated test name - ${var}")
    ENDFOREACH()
    SET(WARNING_MESSAGE "${WARNING_MESSAGE}\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    MESSAGE(AUTHOR_WARNING ${WARNING_MESSAGE})
  MESSAGE("================================================================================")
  ENDIF()
ENDIF()

SET(DART_TESTING_TIMEOUT 2400 CACHE INTERNAL "Maximum time allowed before CTest will kill the test.")
IF(UNIX)
  SET(MEMORYCHECK_COMMAND "/usr/bin/valgrind --show-reachable=no")
ENDIF(UNIX)

###################################################################################################
MESSAGE("")
MESSAGE("Package version is set to \"${pddate}\"")
MESSAGE("================================================================================")
MESSAGE("")
MESSAGE("Tests included: \"${MAIDSAFE_TEST_TYPE}\"")
MESSAGE("")
MESSAGE("    To include all tests,                     cmake ../.. -DMAIDSAFE_TEST_TYPE=_")
MESSAGE("    To include behavioural tests,           cmake ../.. -DMAIDSAFE_TEST_TYPE=BEH")
MESSAGE("    To include functional tests,           cmake ../.. -DMAIDSAFE_TEST_TYPE=FUNC")
MESSAGE("================================================================================")
MESSAGE("")
MESSAGE("Build type is set to \"${CMAKE_BUILD_TYPE}\"")
MESSAGE("")
MESSAGE("    To alter this (e.g. to Debug),          cmake ../.. -DCMAKE_BUILD_TYPE=Debug")
MESSAGE("    Options are Release, Debug, RelWithDebInfo, MinSizeRel")
MESSAGE("================================================================================")
MESSAGE("")

SET(PROTOBUF_INSTALL_FILES protobuf/signed_kadvalue.pb.h protobuf/kademlia_service_messages.pb.h protobuf/contact_info.pb.h protobuf/general_messages.pb.h)
INSTALL(FILES ${MAIDSAFE_H} ${PROTOBUF_INSTALL_FILES} DESTINATION /usr/include/maidsafe)
INSTALL(TARGETS maidsafe-dht ARCHIVE DESTINATION /usr/lib/)

SET(CPACK_PACKAGE_VERSION_PATCH ${pddate})
SET(CPACK_PACKAGE_VERSION "0.1.${pddate}")
SET(CPACK_PACKAGE_VERSION_MAJOR "0")
SET(CPACK_PACKAGE_VERSION_MINOR "1")
SET(CPACK_PACKAGE_NAME "maidsafe-dht")
SET(CPACK_PACKAGE_CONTACT "info@maidsafe.net")
SET(CPACK_PACKAGE_VENDOR "Maidsafe.net")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Perpetual Data - Client and Vault applications")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "Maidsafe")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${maidsafe-dht_SOURCE_DIR}/../docs/description.txt")
SET(CPACK_RESOURCE_FILE_LICENSE "${maidsafe-dht_SOURCE_DIR}/../docs/LICENSE.txt")
SET(CPACK_RESOURCE_FILE_README "${maidsafe-dht_SOURCE_DIR}/../docs/readme.txt")
SET(CPACK_RESOURCE_FILE_WELCOME "${maidsafe-dht_SOURCE_DIR}/../docs/welcome.txt")

MESSAGE("Install directory is set to \"${CPACK_PACKAGE_INSTALL_DIRECTORY}\"")
MESSAGE("================================================================================")

IF(UNIX)
	SET(CMAKE_INSTALL_PREFIX "/usr")
  SET(CPACK_SET_DESTDIR on)
  SET(CPACK_GENERATOR DEB;RPM;TGZ)
ELSE()
  SET(CPACK_GENERATOR ZIP)
ENDIF()
INCLUDE(CPack)
