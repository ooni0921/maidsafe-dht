// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "kademlia_service_messages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace kad {

namespace {

const ::google::protobuf::Descriptor* PingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindNodeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindNodeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownlistRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownlistRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownlistResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownlistResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BootstrapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BootstrapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BootstrapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BootstrapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NatDetectionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NatDetectionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NatDetectionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NatDetectionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NatDetectionPingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NatDetectionPingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NatDetectionPingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NatDetectionPingResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_kademlia_5fservice_5fmessages_2eproto() {
  protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kademlia_service_messages.proto");
  GOOGLE_CHECK(file != NULL);
  PingRequest_descriptor_ = file->message_type(0);
  static const int PingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, sender_info_),
  };
  PingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingRequest_descriptor_,
      PingRequest::default_instance_,
      PingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingRequest));
  PingResponse_descriptor_ = file->message_type(1);
  static const int PingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, echo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, node_id_),
  };
  PingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingResponse_descriptor_,
      PingResponse::default_instance_,
      PingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingResponse));
  FindRequest_descriptor_ = file->message_type(2);
  static const int FindRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRequest, sender_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRequest, is_boostrap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRequest, sender_ext_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRequest, sender_ext_port_),
  };
  FindRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindRequest_descriptor_,
      FindRequest::default_instance_,
      FindRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindRequest));
  FindResponse_descriptor_ = file->message_type(3);
  static const int FindResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindResponse, closest_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindResponse, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindResponse, requester_ext_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindResponse, node_id_),
  };
  FindResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindResponse_descriptor_,
      FindResponse::default_instance_,
      FindResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindResponse));
  FindNodeResult_descriptor_ = file->message_type(4);
  static const int FindNodeResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodeResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodeResult, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodeResult, node_id_),
  };
  FindNodeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindNodeResult_descriptor_,
      FindNodeResult::default_instance_,
      FindNodeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindNodeResult));
  StoreRequest_descriptor_ = file->message_type(5);
  static const int StoreRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, signed_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, sender_info_),
  };
  StoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreRequest_descriptor_,
      StoreRequest::default_instance_,
      StoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreRequest));
  StoreResponse_descriptor_ = file->message_type(6);
  static const int StoreResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreResponse, node_id_),
  };
  StoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreResponse_descriptor_,
      StoreResponse::default_instance_,
      StoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreResponse));
  DownlistRequest_descriptor_ = file->message_type(7);
  static const int DownlistRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistRequest, downlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistRequest, sender_info_),
  };
  DownlistRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownlistRequest_descriptor_,
      DownlistRequest::default_instance_,
      DownlistRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownlistRequest));
  DownlistResponse_descriptor_ = file->message_type(8);
  static const int DownlistResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistResponse, node_id_),
  };
  DownlistResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownlistResponse_descriptor_,
      DownlistResponse::default_instance_,
      DownlistResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownlistResponse));
  BootstrapRequest_descriptor_ = file->message_type(9);
  static const int BootstrapRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, newcomer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, newcomer_local_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, newcomer_local_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, newcomer_ext_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, newcomer_ext_port_),
  };
  BootstrapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BootstrapRequest_descriptor_,
      BootstrapRequest::default_instance_,
      BootstrapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BootstrapRequest));
  BootstrapResponse_descriptor_ = file->message_type(10);
  static const int BootstrapResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapResponse, bootstrap_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapResponse, newcomer_ext_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapResponse, newcomer_ext_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapResponse, nat_type_),
  };
  BootstrapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BootstrapResponse_descriptor_,
      BootstrapResponse::default_instance_,
      BootstrapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BootstrapResponse));
  NatDetectionRequest_descriptor_ = file->message_type(11);
  static const int NatDetectionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionRequest, newcomer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionRequest, bootstrap_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionRequest, sender_id_),
  };
  NatDetectionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NatDetectionRequest_descriptor_,
      NatDetectionRequest::default_instance_,
      NatDetectionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NatDetectionRequest));
  NatDetectionResponse_descriptor_ = file->message_type(12);
  static const int NatDetectionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionResponse, result_),
  };
  NatDetectionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NatDetectionResponse_descriptor_,
      NatDetectionResponse::default_instance_,
      NatDetectionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NatDetectionResponse));
  NatDetectionPingRequest_descriptor_ = file->message_type(13);
  static const int NatDetectionPingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionPingRequest, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionPingRequest, sender_info_),
  };
  NatDetectionPingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NatDetectionPingRequest_descriptor_,
      NatDetectionPingRequest::default_instance_,
      NatDetectionPingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionPingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionPingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NatDetectionPingRequest));
  NatDetectionPingResponse_descriptor_ = file->message_type(14);
  static const int NatDetectionPingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionPingResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionPingResponse, echo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionPingResponse, node_id_),
  };
  NatDetectionPingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NatDetectionPingResponse_descriptor_,
      NatDetectionPingResponse::default_instance_,
      NatDetectionPingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionPingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionPingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NatDetectionPingResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kademlia_5fservice_5fmessages_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingRequest_descriptor_, &PingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingResponse_descriptor_, &PingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindRequest_descriptor_, &FindRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindResponse_descriptor_, &FindResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindNodeResult_descriptor_, &FindNodeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreRequest_descriptor_, &StoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreResponse_descriptor_, &StoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownlistRequest_descriptor_, &DownlistRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownlistResponse_descriptor_, &DownlistResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BootstrapRequest_descriptor_, &BootstrapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BootstrapResponse_descriptor_, &BootstrapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NatDetectionRequest_descriptor_, &NatDetectionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NatDetectionResponse_descriptor_, &NatDetectionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NatDetectionPingRequest_descriptor_, &NatDetectionPingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NatDetectionPingResponse_descriptor_, &NatDetectionPingResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kademlia_5fservice_5fmessages_2eproto() {
  delete PingRequest::default_instance_;
  delete PingRequest_reflection_;
  delete PingResponse::default_instance_;
  delete PingResponse_reflection_;
  delete FindRequest::default_instance_;
  delete FindRequest_reflection_;
  delete FindResponse::default_instance_;
  delete FindResponse_reflection_;
  delete FindNodeResult::default_instance_;
  delete FindNodeResult_reflection_;
  delete StoreRequest::default_instance_;
  delete StoreRequest_reflection_;
  delete StoreResponse::default_instance_;
  delete StoreResponse_reflection_;
  delete DownlistRequest::default_instance_;
  delete DownlistRequest_reflection_;
  delete DownlistResponse::default_instance_;
  delete DownlistResponse_reflection_;
  delete BootstrapRequest::default_instance_;
  delete BootstrapRequest_reflection_;
  delete BootstrapResponse::default_instance_;
  delete BootstrapResponse_reflection_;
  delete NatDetectionRequest::default_instance_;
  delete NatDetectionRequest_reflection_;
  delete NatDetectionResponse::default_instance_;
  delete NatDetectionResponse_reflection_;
  delete NatDetectionPingRequest::default_instance_;
  delete NatDetectionPingRequest_reflection_;
  delete NatDetectionPingResponse::default_instance_;
  delete NatDetectionPingResponse_reflection_;
}

void protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::kad::protobuf_AddDesc_contact_5finfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037kademlia_service_messages.proto\022\003kad\032\022"
    "contact_info.proto\"B\n\013PingRequest\022\014\n\004pin"
    "g\030\001 \002(\014\022%\n\013sender_info\030\002 \002(\0132\020.kad.Conta"
    "ctInfo\"=\n\014PingResponse\022\016\n\006result\030\001 \002(\014\022\014"
    "\n\004echo\030\002 \001(\014\022\017\n\007node_id\030\003 \001(\014\"\206\001\n\013FindRe"
    "quest\022\013\n\003key\030\001 \002(\014\022%\n\013sender_info\030\002 \002(\0132"
    "\020.kad.ContactInfo\022\023\n\013is_boostrap\030\003 \001(\010\022\025"
    "\n\rsender_ext_ip\030\004 \001(\014\022\027\n\017sender_ext_port"
    "\030\005 \001(\005\"r\n\014FindResponse\022\016\n\006result\030\001 \002(\014\022\025"
    "\n\rclosest_nodes\030\002 \003(\014\022\016\n\006values\030\003 \003(\014\022\032\n"
    "\022requester_ext_addr\030\004 \001(\014\022\017\n\007node_id\030\005 \001"
    "(\014\"B\n\016FindNodeResult\022\016\n\006result\030\001 \002(\014\022\017\n\007"
    "contact\030\002 \001(\014\022\017\n\007node_id\030\003 \001(\014\"\230\001\n\014Store"
    "Request\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\022\022\n\np"
    "ublic_key\030\003 \002(\014\022\031\n\021signed_public_key\030\004 \002"
    "(\014\022\026\n\016signed_request\030\005 \002(\014\022%\n\013sender_inf"
    "o\030\006 \002(\0132\020.kad.ContactInfo\"0\n\rStoreRespon"
    "se\022\016\n\006result\030\001 \002(\014\022\017\n\007node_id\030\002 \001(\014\"J\n\017D"
    "ownlistRequest\022\020\n\010downlist\030\001 \003(\014\022%\n\013send"
    "er_info\030\002 \002(\0132\020.kad.ContactInfo\"3\n\020Downl"
    "istResponse\022\016\n\006result\030\001 \002(\014\022\017\n\007node_id\030\002"
    " \001(\014\"\223\001\n\020BootstrapRequest\022\023\n\013newcomer_id"
    "\030\001 \002(\014\022\031\n\021newcomer_local_ip\030\002 \002(\014\022\033\n\023new"
    "comer_local_port\030\003 \002(\005\022\027\n\017newcomer_ext_i"
    "p\030\004 \001(\014\022\031\n\021newcomer_ext_port\030\005 \001(\005\"\177\n\021Bo"
    "otstrapResponse\022\016\n\006result\030\001 \002(\014\022\024\n\014boots"
    "trap_id\030\002 \001(\014\022\027\n\017newcomer_ext_ip\030\003 \001(\014\022\031"
    "\n\021newcomer_ext_port\030\004 \001(\005\022\020\n\010nat_type\030\005 "
    "\001(\005\"`\n\023NatDetectionRequest\022\020\n\010newcomer\030\001"
    " \002(\014\022\026\n\016bootstrap_node\030\002 \002(\014\022\014\n\004type\030\003 \002"
    "(\005\022\021\n\tsender_id\030\004 \002(\014\"&\n\024NatDetectionRes"
    "ponse\022\016\n\006result\030\001 \002(\014\"N\n\027NatDetectionPin"
    "gRequest\022\014\n\004ping\030\001 \002(\014\022%\n\013sender_info\030\002 "
    "\002(\0132\020.kad.ContactInfo\"I\n\030NatDetectionPin"
    "gResponse\022\016\n\006result\030\001 \002(\014\022\014\n\004echo\030\002 \001(\014\022"
    "\017\n\007node_id\030\003 \001(\014", 1416);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kademlia_service_messages.proto", &protobuf_RegisterTypes);
  PingRequest::default_instance_ = new PingRequest();
  PingResponse::default_instance_ = new PingResponse();
  FindRequest::default_instance_ = new FindRequest();
  FindResponse::default_instance_ = new FindResponse();
  FindNodeResult::default_instance_ = new FindNodeResult();
  StoreRequest::default_instance_ = new StoreRequest();
  StoreResponse::default_instance_ = new StoreResponse();
  DownlistRequest::default_instance_ = new DownlistRequest();
  DownlistResponse::default_instance_ = new DownlistResponse();
  BootstrapRequest::default_instance_ = new BootstrapRequest();
  BootstrapResponse::default_instance_ = new BootstrapResponse();
  NatDetectionRequest::default_instance_ = new NatDetectionRequest();
  NatDetectionResponse::default_instance_ = new NatDetectionResponse();
  NatDetectionPingRequest::default_instance_ = new NatDetectionPingRequest();
  NatDetectionPingResponse::default_instance_ = new NatDetectionPingResponse();
  PingRequest::default_instance_->InitAsDefaultInstance();
  PingResponse::default_instance_->InitAsDefaultInstance();
  FindRequest::default_instance_->InitAsDefaultInstance();
  FindResponse::default_instance_->InitAsDefaultInstance();
  FindNodeResult::default_instance_->InitAsDefaultInstance();
  StoreRequest::default_instance_->InitAsDefaultInstance();
  StoreResponse::default_instance_->InitAsDefaultInstance();
  DownlistRequest::default_instance_->InitAsDefaultInstance();
  DownlistResponse::default_instance_->InitAsDefaultInstance();
  BootstrapRequest::default_instance_->InitAsDefaultInstance();
  BootstrapResponse::default_instance_->InitAsDefaultInstance();
  NatDetectionRequest::default_instance_->InitAsDefaultInstance();
  NatDetectionResponse::default_instance_->InitAsDefaultInstance();
  NatDetectionPingRequest::default_instance_->InitAsDefaultInstance();
  NatDetectionPingResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kademlia_5fservice_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kademlia_5fservice_5fmessages_2eproto {
  StaticDescriptorInitializer_kademlia_5fservice_5fmessages_2eproto() {
    protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();
  }
} static_descriptor_initializer_kademlia_5fservice_5fmessages_2eproto_;


// ===================================================================

const ::std::string PingRequest::_default_ping_;
#ifndef _MSC_VER
const int PingRequest::kPingFieldNumber;
const int PingRequest::kSenderInfoFieldNumber;
#endif  // !_MSC_VER

PingRequest::PingRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    ping_(const_cast< ::std::string*>(&_default_ping_)),
    sender_info_(NULL) {
  SharedCtor();
}

void PingRequest::InitAsDefaultInstance() {  sender_info_ = const_cast< ::kad::ContactInfo*>(&::kad::ContactInfo::default_instance());
}

PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    ping_(const_cast< ::std::string*>(&_default_ping_)),
    sender_info_(NULL) {
  SharedCtor();
  MergeFrom(from);
}

void PingRequest::SharedCtor() {
  _cached_size_ = 0;
  ping_ = const_cast< ::std::string*>(&_default_ping_);
  sender_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingRequest::~PingRequest() {
  SharedDtor();
}

void PingRequest::SharedDtor() {
  if (ping_ != &_default_ping_) {
    delete ping_;
  }
  if (this != default_instance_) {
    delete sender_info_;
  }
}

const ::google::protobuf::Descriptor* PingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingRequest_descriptor_;
}

const PingRequest& PingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

PingRequest* PingRequest::default_instance_ = NULL;

PingRequest* PingRequest::New() const {
  return new PingRequest;
}

void PingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ping_ != &_default_ping_) {
        ping_->clear();
      }
    }
    if (_has_bit(1)) {
      if (sender_info_ != NULL) sender_info_->::kad::ContactInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes ping = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_ping()));
        if (input->ExpectTag(18)) goto parse_sender_info;
        break;
      }
      
      // required .kad.ContactInfo sender_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sender_info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_sender_info()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PingRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes ping = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->ping(), output);
  }
  
  // required .kad.ContactInfo sender_info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->sender_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ping = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->ping(), target);
  }
  
  // required .kad.ContactInfo sender_info = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->sender_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ping = 1;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->ping());
    }
    
    // required .kad.ContactInfo sender_info = 2;
    if (has_sender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->sender_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ping(from.ping());
    }
    if (from._has_bit(1)) {
      mutable_sender_info()->::kad::ContactInfo::MergeFrom(from.sender_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::Swap(PingRequest* other) {
  if (other != this) {
    std::swap(ping_, other->ping_);
    std::swap(sender_info_, other->sender_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_sender_info()) {
    if (!this->sender_info().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* PingRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PingRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PingRequest_reflection_;
}

// ===================================================================

const ::std::string PingResponse::_default_result_;
const ::std::string PingResponse::_default_echo_;
const ::std::string PingResponse::_default_node_id_;
#ifndef _MSC_VER
const int PingResponse::kResultFieldNumber;
const int PingResponse::kEchoFieldNumber;
const int PingResponse::kNodeIdFieldNumber;
#endif  // !_MSC_VER

PingResponse::PingResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    echo_(const_cast< ::std::string*>(&_default_echo_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
}

void PingResponse::InitAsDefaultInstance() {}

PingResponse::PingResponse(const PingResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    echo_(const_cast< ::std::string*>(&_default_echo_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void PingResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&_default_result_);
  echo_ = const_cast< ::std::string*>(&_default_echo_);
  node_id_ = const_cast< ::std::string*>(&_default_node_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingResponse::~PingResponse() {
  SharedDtor();
}

void PingResponse::SharedDtor() {
  if (result_ != &_default_result_) {
    delete result_;
  }
  if (echo_ != &_default_echo_) {
    delete echo_;
  }
  if (node_id_ != &_default_node_id_) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingResponse_descriptor_;
}

const PingResponse& PingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

PingResponse* PingResponse::default_instance_ = NULL;

PingResponse* PingResponse::New() const {
  return new PingResponse;
}

void PingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != &_default_result_) {
        result_->clear();
      }
    }
    if (_has_bit(1)) {
      if (echo_ != &_default_echo_) {
        echo_->clear();
      }
    }
    if (_has_bit(2)) {
      if (node_id_ != &_default_node_id_) {
        node_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_result()));
        if (input->ExpectTag(18)) goto parse_echo;
        break;
      }
      
      // optional bytes echo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_echo:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_echo()));
        if (input->ExpectTag(26)) goto parse_node_id;
        break;
      }
      
      // optional bytes node_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_node_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_node_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PingResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->result(), output);
  }
  
  // optional bytes echo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->echo(), output);
  }
  
  // optional bytes node_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->node_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->result(), target);
  }
  
  // optional bytes echo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->echo(), target);
  }
  
  // optional bytes node_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->node_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->result());
    }
    
    // optional bytes echo = 2;
    if (has_echo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->echo());
    }
    
    // optional bytes node_id = 3;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->node_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingResponse::MergeFrom(const PingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_echo(from.echo());
    }
    if (from._has_bit(2)) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::CopyFrom(const PingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::Swap(PingResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(echo_, other->echo_);
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* PingResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PingResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PingResponse_reflection_;
}

// ===================================================================

const ::std::string FindRequest::_default_key_;
const ::std::string FindRequest::_default_sender_ext_ip_;
#ifndef _MSC_VER
const int FindRequest::kKeyFieldNumber;
const int FindRequest::kSenderInfoFieldNumber;
const int FindRequest::kIsBoostrapFieldNumber;
const int FindRequest::kSenderExtIpFieldNumber;
const int FindRequest::kSenderExtPortFieldNumber;
#endif  // !_MSC_VER

FindRequest::FindRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    key_(const_cast< ::std::string*>(&_default_key_)),
    sender_info_(NULL),
    is_boostrap_(false),
    sender_ext_ip_(const_cast< ::std::string*>(&_default_sender_ext_ip_)),
    sender_ext_port_(0) {
  SharedCtor();
}

void FindRequest::InitAsDefaultInstance() {  sender_info_ = const_cast< ::kad::ContactInfo*>(&::kad::ContactInfo::default_instance());
}

FindRequest::FindRequest(const FindRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    key_(const_cast< ::std::string*>(&_default_key_)),
    sender_info_(NULL),
    is_boostrap_(false),
    sender_ext_ip_(const_cast< ::std::string*>(&_default_sender_ext_ip_)),
    sender_ext_port_(0) {
  SharedCtor();
  MergeFrom(from);
}

void FindRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  sender_info_ = NULL;
  is_boostrap_ = false;
  sender_ext_ip_ = const_cast< ::std::string*>(&_default_sender_ext_ip_);
  sender_ext_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindRequest::~FindRequest() {
  SharedDtor();
}

void FindRequest::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (sender_ext_ip_ != &_default_sender_ext_ip_) {
    delete sender_ext_ip_;
  }
  if (this != default_instance_) {
    delete sender_info_;
  }
}

const ::google::protobuf::Descriptor* FindRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindRequest_descriptor_;
}

const FindRequest& FindRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

FindRequest* FindRequest::default_instance_ = NULL;

FindRequest* FindRequest::New() const {
  return new FindRequest;
}

void FindRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (sender_info_ != NULL) sender_info_->::kad::ContactInfo::Clear();
    }
    is_boostrap_ = false;
    if (_has_bit(3)) {
      if (sender_ext_ip_ != &_default_sender_ext_ip_) {
        sender_ext_ip_->clear();
      }
    }
    sender_ext_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_key()));
        if (input->ExpectTag(18)) goto parse_sender_info;
        break;
      }
      
      // required .kad.ContactInfo sender_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sender_info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_sender_info()));
        if (input->ExpectTag(24)) goto parse_is_boostrap;
        break;
      }
      
      // optional bool is_boostrap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_boostrap:
        DO_(::google::protobuf::internal::WireFormat::ReadBool(
              input, &is_boostrap_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_sender_ext_ip;
        break;
      }
      
      // optional bytes sender_ext_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sender_ext_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_sender_ext_ip()));
        if (input->ExpectTag(40)) goto parse_sender_ext_port;
        break;
      }
      
      // optional int32 sender_ext_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sender_ext_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &sender_ext_port_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FindRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->key(), output);
  }
  
  // required .kad.ContactInfo sender_info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->sender_info(), output);
  }
  
  // optional bool is_boostrap = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBool(3, this->is_boostrap(), output);
  }
  
  // optional bytes sender_ext_ip = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->sender_ext_ip(), output);
  }
  
  // optional int32 sender_ext_port = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->sender_ext_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->key(), target);
  }
  
  // required .kad.ContactInfo sender_info = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->sender_info(), target);
  }
  
  // optional bool is_boostrap = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBoolToArray(3, this->is_boostrap(), target);
  }
  
  // optional bytes sender_ext_ip = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->sender_ext_ip(), target);
  }
  
  // optional int32 sender_ext_port = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->sender_ext_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->key());
    }
    
    // required .kad.ContactInfo sender_info = 2;
    if (has_sender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->sender_info());
    }
    
    // optional bool is_boostrap = 3;
    if (has_is_boostrap()) {
      total_size += 1 + 1;
    }
    
    // optional bytes sender_ext_ip = 4;
    if (has_sender_ext_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->sender_ext_ip());
    }
    
    // optional int32 sender_ext_port = 5;
    if (has_sender_ext_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->sender_ext_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FindRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindRequest::MergeFrom(const FindRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      mutable_sender_info()->::kad::ContactInfo::MergeFrom(from.sender_info());
    }
    if (from._has_bit(2)) {
      set_is_boostrap(from.is_boostrap());
    }
    if (from._has_bit(3)) {
      set_sender_ext_ip(from.sender_ext_ip());
    }
    if (from._has_bit(4)) {
      set_sender_ext_port(from.sender_ext_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindRequest::CopyFrom(const FindRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindRequest::Swap(FindRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(sender_info_, other->sender_info_);
    std::swap(is_boostrap_, other->is_boostrap_);
    std::swap(sender_ext_ip_, other->sender_ext_ip_);
    std::swap(sender_ext_port_, other->sender_ext_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool FindRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_sender_info()) {
    if (!this->sender_info().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* FindRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* FindRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return FindRequest_reflection_;
}

// ===================================================================

const ::std::string FindResponse::_default_result_;
const ::std::string FindResponse::_default_requester_ext_addr_;
const ::std::string FindResponse::_default_node_id_;
#ifndef _MSC_VER
const int FindResponse::kResultFieldNumber;
const int FindResponse::kClosestNodesFieldNumber;
const int FindResponse::kValuesFieldNumber;
const int FindResponse::kRequesterExtAddrFieldNumber;
const int FindResponse::kNodeIdFieldNumber;
#endif  // !_MSC_VER

FindResponse::FindResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    closest_nodes_(),
    values_(),
    requester_ext_addr_(const_cast< ::std::string*>(&_default_requester_ext_addr_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
}

void FindResponse::InitAsDefaultInstance() {}

FindResponse::FindResponse(const FindResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    closest_nodes_(),
    values_(),
    requester_ext_addr_(const_cast< ::std::string*>(&_default_requester_ext_addr_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void FindResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&_default_result_);
  requester_ext_addr_ = const_cast< ::std::string*>(&_default_requester_ext_addr_);
  node_id_ = const_cast< ::std::string*>(&_default_node_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindResponse::~FindResponse() {
  SharedDtor();
}

void FindResponse::SharedDtor() {
  if (result_ != &_default_result_) {
    delete result_;
  }
  if (requester_ext_addr_ != &_default_requester_ext_addr_) {
    delete requester_ext_addr_;
  }
  if (node_id_ != &_default_node_id_) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FindResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindResponse_descriptor_;
}

const FindResponse& FindResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

FindResponse* FindResponse::default_instance_ = NULL;

FindResponse* FindResponse::New() const {
  return new FindResponse;
}

void FindResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != &_default_result_) {
        result_->clear();
      }
    }
    if (_has_bit(3)) {
      if (requester_ext_addr_ != &_default_requester_ext_addr_) {
        requester_ext_addr_->clear();
      }
    }
    if (_has_bit(4)) {
      if (node_id_ != &_default_node_id_) {
        node_id_->clear();
      }
    }
  }
  closest_nodes_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_result()));
        if (input->ExpectTag(18)) goto parse_closest_nodes;
        break;
      }
      
      // repeated bytes closest_nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_closest_nodes:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(
             input, add_closest_nodes()));
        if (input->ExpectTag(18)) goto parse_closest_nodes;
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }
      
      // repeated bytes values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_values:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(
             input, add_values()));
        if (input->ExpectTag(26)) goto parse_values;
        if (input->ExpectTag(34)) goto parse_requester_ext_addr;
        break;
      }
      
      // optional bytes requester_ext_addr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_requester_ext_addr:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_requester_ext_addr()));
        if (input->ExpectTag(42)) goto parse_node_id;
        break;
      }
      
      // optional bytes node_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_node_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_node_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FindResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->result(), output);
  }
  
  // repeated bytes closest_nodes = 2;
  for (int i = 0; i < this->closest_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->closest_nodes(i), output);
  }
  
  // repeated bytes values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->values(i), output);
  }
  
  // optional bytes requester_ext_addr = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->requester_ext_addr(), output);
  }
  
  // optional bytes node_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->node_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->result(), target);
  }
  
  // repeated bytes closest_nodes = 2;
  for (int i = 0; i < this->closest_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->closest_nodes(i), target);
  }
  
  // repeated bytes values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->values(i), target);
  }
  
  // optional bytes requester_ext_addr = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->requester_ext_addr(), target);
  }
  
  // optional bytes node_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->node_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->result());
    }
    
    // optional bytes requester_ext_addr = 4;
    if (has_requester_ext_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->requester_ext_addr());
    }
    
    // optional bytes node_id = 5;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->node_id());
    }
    
  }
  // repeated bytes closest_nodes = 2;
  total_size += 1 * this->closest_nodes_size();
  for (int i = 0; i < this->closest_nodes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::BytesSize(
      this->closest_nodes(i));
  }
  
  // repeated bytes values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::BytesSize(
      this->values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FindResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindResponse::MergeFrom(const FindResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  closest_nodes_.MergeFrom(from.closest_nodes_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_requester_ext_addr(from.requester_ext_addr());
    }
    if (from._has_bit(4)) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindResponse::CopyFrom(const FindResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindResponse::Swap(FindResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    closest_nodes_.Swap(&other->closest_nodes_);
    values_.Swap(&other->values_);
    std::swap(requester_ext_addr_, other->requester_ext_addr_);
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool FindResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* FindResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* FindResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return FindResponse_reflection_;
}

// ===================================================================

const ::std::string FindNodeResult::_default_result_;
const ::std::string FindNodeResult::_default_contact_;
const ::std::string FindNodeResult::_default_node_id_;
#ifndef _MSC_VER
const int FindNodeResult::kResultFieldNumber;
const int FindNodeResult::kContactFieldNumber;
const int FindNodeResult::kNodeIdFieldNumber;
#endif  // !_MSC_VER

FindNodeResult::FindNodeResult()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    contact_(const_cast< ::std::string*>(&_default_contact_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
}

void FindNodeResult::InitAsDefaultInstance() {}

FindNodeResult::FindNodeResult(const FindNodeResult& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    contact_(const_cast< ::std::string*>(&_default_contact_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void FindNodeResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&_default_result_);
  contact_ = const_cast< ::std::string*>(&_default_contact_);
  node_id_ = const_cast< ::std::string*>(&_default_node_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindNodeResult::~FindNodeResult() {
  SharedDtor();
}

void FindNodeResult::SharedDtor() {
  if (result_ != &_default_result_) {
    delete result_;
  }
  if (contact_ != &_default_contact_) {
    delete contact_;
  }
  if (node_id_ != &_default_node_id_) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FindNodeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindNodeResult_descriptor_;
}

const FindNodeResult& FindNodeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

FindNodeResult* FindNodeResult::default_instance_ = NULL;

FindNodeResult* FindNodeResult::New() const {
  return new FindNodeResult;
}

void FindNodeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != &_default_result_) {
        result_->clear();
      }
    }
    if (_has_bit(1)) {
      if (contact_ != &_default_contact_) {
        contact_->clear();
      }
    }
    if (_has_bit(2)) {
      if (node_id_ != &_default_node_id_) {
        node_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindNodeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_result()));
        if (input->ExpectTag(18)) goto parse_contact;
        break;
      }
      
      // optional bytes contact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_contact:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_contact()));
        if (input->ExpectTag(26)) goto parse_node_id;
        break;
      }
      
      // optional bytes node_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_node_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_node_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindNodeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FindNodeResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->result(), output);
  }
  
  // optional bytes contact = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->contact(), output);
  }
  
  // optional bytes node_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->node_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindNodeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->result(), target);
  }
  
  // optional bytes contact = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->contact(), target);
  }
  
  // optional bytes node_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->node_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindNodeResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->result());
    }
    
    // optional bytes contact = 2;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->contact());
    }
    
    // optional bytes node_id = 3;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->node_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FindNodeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindNodeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindNodeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindNodeResult::MergeFrom(const FindNodeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_contact(from.contact());
    }
    if (from._has_bit(2)) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindNodeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindNodeResult::CopyFrom(const FindNodeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindNodeResult::Swap(FindNodeResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(contact_, other->contact_);
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool FindNodeResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* FindNodeResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* FindNodeResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return FindNodeResult_reflection_;
}

// ===================================================================

const ::std::string StoreRequest::_default_key_;
const ::std::string StoreRequest::_default_value_;
const ::std::string StoreRequest::_default_public_key_;
const ::std::string StoreRequest::_default_signed_public_key_;
const ::std::string StoreRequest::_default_signed_request_;
#ifndef _MSC_VER
const int StoreRequest::kKeyFieldNumber;
const int StoreRequest::kValueFieldNumber;
const int StoreRequest::kPublicKeyFieldNumber;
const int StoreRequest::kSignedPublicKeyFieldNumber;
const int StoreRequest::kSignedRequestFieldNumber;
const int StoreRequest::kSenderInfoFieldNumber;
#endif  // !_MSC_VER

StoreRequest::StoreRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    key_(const_cast< ::std::string*>(&_default_key_)),
    value_(const_cast< ::std::string*>(&_default_value_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)),
    sender_info_(NULL) {
  SharedCtor();
}

void StoreRequest::InitAsDefaultInstance() {  sender_info_ = const_cast< ::kad::ContactInfo*>(&::kad::ContactInfo::default_instance());
}

StoreRequest::StoreRequest(const StoreRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    key_(const_cast< ::std::string*>(&_default_key_)),
    value_(const_cast< ::std::string*>(&_default_value_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)),
    sender_info_(NULL) {
  SharedCtor();
  MergeFrom(from);
}

void StoreRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  sender_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreRequest::~StoreRequest() {
  SharedDtor();
}

void StoreRequest::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
    delete sender_info_;
  }
}

const ::google::protobuf::Descriptor* StoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreRequest_descriptor_;
}

const StoreRequest& StoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreRequest* StoreRequest::default_instance_ = NULL;

StoreRequest* StoreRequest::New() const {
  return new StoreRequest;
}

void StoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
    if (_has_bit(5)) {
      if (sender_info_ != NULL) sender_info_->::kad::ContactInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_key()));
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_value:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_value()));
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(34)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectTag(50)) goto parse_sender_info;
        break;
      }
      
      // required .kad.ContactInfo sender_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sender_info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_sender_info()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->key(), output);
  }
  
  // required bytes value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->value(), output);
  }
  
  // required bytes public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_request(), output);
  }
  
  // required .kad.ContactInfo sender_info = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->sender_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->key(), target);
  }
  
  // required bytes value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->value(), target);
  }
  
  // required bytes public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_request(), target);
  }
  
  // required .kad.ContactInfo sender_info = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->sender_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->key());
    }
    
    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->value());
    }
    
    // required bytes public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 4;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 5;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
    // required .kad.ContactInfo sender_info = 6;
    if (has_sender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->sender_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreRequest::MergeFrom(const StoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
    if (from._has_bit(2)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(3)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(4)) {
      set_signed_request(from.signed_request());
    }
    if (from._has_bit(5)) {
      mutable_sender_info()->::kad::ContactInfo::MergeFrom(from.sender_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreRequest::CopyFrom(const StoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreRequest::Swap(StoreRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(sender_info_, other->sender_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_sender_info()) {
    if (!this->sender_info().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* StoreRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreRequest_reflection_;
}

// ===================================================================

const ::std::string StoreResponse::_default_result_;
const ::std::string StoreResponse::_default_node_id_;
#ifndef _MSC_VER
const int StoreResponse::kResultFieldNumber;
const int StoreResponse::kNodeIdFieldNumber;
#endif  // !_MSC_VER

StoreResponse::StoreResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
}

void StoreResponse::InitAsDefaultInstance() {}

StoreResponse::StoreResponse(const StoreResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void StoreResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&_default_result_);
  node_id_ = const_cast< ::std::string*>(&_default_node_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreResponse::~StoreResponse() {
  SharedDtor();
}

void StoreResponse::SharedDtor() {
  if (result_ != &_default_result_) {
    delete result_;
  }
  if (node_id_ != &_default_node_id_) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreResponse_descriptor_;
}

const StoreResponse& StoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreResponse* StoreResponse::default_instance_ = NULL;

StoreResponse* StoreResponse::New() const {
  return new StoreResponse;
}

void StoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != &_default_result_) {
        result_->clear();
      }
    }
    if (_has_bit(1)) {
      if (node_id_ != &_default_node_id_) {
        node_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_result()));
        if (input->ExpectTag(18)) goto parse_node_id;
        break;
      }
      
      // optional bytes node_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_node_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_node_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->result(), output);
  }
  
  // optional bytes node_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->node_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->result(), target);
  }
  
  // optional bytes node_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->node_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->result());
    }
    
    // optional bytes node_id = 2;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->node_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreResponse::MergeFrom(const StoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreResponse::CopyFrom(const StoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreResponse::Swap(StoreResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StoreResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int DownlistRequest::kDownlistFieldNumber;
const int DownlistRequest::kSenderInfoFieldNumber;
#endif  // !_MSC_VER

DownlistRequest::DownlistRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    downlist_(),
    sender_info_(NULL) {
  SharedCtor();
}

void DownlistRequest::InitAsDefaultInstance() {  sender_info_ = const_cast< ::kad::ContactInfo*>(&::kad::ContactInfo::default_instance());
}

DownlistRequest::DownlistRequest(const DownlistRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    downlist_(),
    sender_info_(NULL) {
  SharedCtor();
  MergeFrom(from);
}

void DownlistRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownlistRequest::~DownlistRequest() {
  SharedDtor();
}

void DownlistRequest::SharedDtor() {
  if (this != default_instance_) {
    delete sender_info_;
  }
}

const ::google::protobuf::Descriptor* DownlistRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownlistRequest_descriptor_;
}

const DownlistRequest& DownlistRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

DownlistRequest* DownlistRequest::default_instance_ = NULL;

DownlistRequest* DownlistRequest::New() const {
  return new DownlistRequest;
}

void DownlistRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (sender_info_ != NULL) sender_info_->::kad::ContactInfo::Clear();
    }
  }
  downlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownlistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated bytes downlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_downlist:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(
             input, add_downlist()));
        if (input->ExpectTag(10)) goto parse_downlist;
        if (input->ExpectTag(18)) goto parse_sender_info;
        break;
      }
      
      // required .kad.ContactInfo sender_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sender_info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_sender_info()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownlistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DownlistRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated bytes downlist = 1;
  for (int i = 0; i < this->downlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->downlist(i), output);
  }
  
  // required .kad.ContactInfo sender_info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->sender_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownlistRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes downlist = 1;
  for (int i = 0; i < this->downlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->downlist(i), target);
  }
  
  // required .kad.ContactInfo sender_info = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->sender_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownlistRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .kad.ContactInfo sender_info = 2;
    if (has_sender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->sender_info());
    }
    
  }
  // repeated bytes downlist = 1;
  total_size += 1 * this->downlist_size();
  for (int i = 0; i < this->downlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::BytesSize(
      this->downlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DownlistRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownlistRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownlistRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownlistRequest::MergeFrom(const DownlistRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  downlist_.MergeFrom(from.downlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      mutable_sender_info()->::kad::ContactInfo::MergeFrom(from.sender_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownlistRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownlistRequest::CopyFrom(const DownlistRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownlistRequest::Swap(DownlistRequest* other) {
  if (other != this) {
    downlist_.Swap(&other->downlist_);
    std::swap(sender_info_, other->sender_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DownlistRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_sender_info()) {
    if (!this->sender_info().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* DownlistRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DownlistRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DownlistRequest_reflection_;
}

// ===================================================================

const ::std::string DownlistResponse::_default_result_;
const ::std::string DownlistResponse::_default_node_id_;
#ifndef _MSC_VER
const int DownlistResponse::kResultFieldNumber;
const int DownlistResponse::kNodeIdFieldNumber;
#endif  // !_MSC_VER

DownlistResponse::DownlistResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
}

void DownlistResponse::InitAsDefaultInstance() {}

DownlistResponse::DownlistResponse(const DownlistResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void DownlistResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&_default_result_);
  node_id_ = const_cast< ::std::string*>(&_default_node_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownlistResponse::~DownlistResponse() {
  SharedDtor();
}

void DownlistResponse::SharedDtor() {
  if (result_ != &_default_result_) {
    delete result_;
  }
  if (node_id_ != &_default_node_id_) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DownlistResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownlistResponse_descriptor_;
}

const DownlistResponse& DownlistResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

DownlistResponse* DownlistResponse::default_instance_ = NULL;

DownlistResponse* DownlistResponse::New() const {
  return new DownlistResponse;
}

void DownlistResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != &_default_result_) {
        result_->clear();
      }
    }
    if (_has_bit(1)) {
      if (node_id_ != &_default_node_id_) {
        node_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownlistResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_result()));
        if (input->ExpectTag(18)) goto parse_node_id;
        break;
      }
      
      // optional bytes node_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_node_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_node_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownlistResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DownlistResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->result(), output);
  }
  
  // optional bytes node_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->node_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownlistResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->result(), target);
  }
  
  // optional bytes node_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->node_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownlistResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->result());
    }
    
    // optional bytes node_id = 2;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->node_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DownlistResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownlistResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownlistResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownlistResponse::MergeFrom(const DownlistResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownlistResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownlistResponse::CopyFrom(const DownlistResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownlistResponse::Swap(DownlistResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DownlistResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* DownlistResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DownlistResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DownlistResponse_reflection_;
}

// ===================================================================

const ::std::string BootstrapRequest::_default_newcomer_id_;
const ::std::string BootstrapRequest::_default_newcomer_local_ip_;
const ::std::string BootstrapRequest::_default_newcomer_ext_ip_;
#ifndef _MSC_VER
const int BootstrapRequest::kNewcomerIdFieldNumber;
const int BootstrapRequest::kNewcomerLocalIpFieldNumber;
const int BootstrapRequest::kNewcomerLocalPortFieldNumber;
const int BootstrapRequest::kNewcomerExtIpFieldNumber;
const int BootstrapRequest::kNewcomerExtPortFieldNumber;
#endif  // !_MSC_VER

BootstrapRequest::BootstrapRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    newcomer_id_(const_cast< ::std::string*>(&_default_newcomer_id_)),
    newcomer_local_ip_(const_cast< ::std::string*>(&_default_newcomer_local_ip_)),
    newcomer_local_port_(0),
    newcomer_ext_ip_(const_cast< ::std::string*>(&_default_newcomer_ext_ip_)),
    newcomer_ext_port_(0) {
  SharedCtor();
}

void BootstrapRequest::InitAsDefaultInstance() {}

BootstrapRequest::BootstrapRequest(const BootstrapRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    newcomer_id_(const_cast< ::std::string*>(&_default_newcomer_id_)),
    newcomer_local_ip_(const_cast< ::std::string*>(&_default_newcomer_local_ip_)),
    newcomer_local_port_(0),
    newcomer_ext_ip_(const_cast< ::std::string*>(&_default_newcomer_ext_ip_)),
    newcomer_ext_port_(0) {
  SharedCtor();
  MergeFrom(from);
}

void BootstrapRequest::SharedCtor() {
  _cached_size_ = 0;
  newcomer_id_ = const_cast< ::std::string*>(&_default_newcomer_id_);
  newcomer_local_ip_ = const_cast< ::std::string*>(&_default_newcomer_local_ip_);
  newcomer_local_port_ = 0;
  newcomer_ext_ip_ = const_cast< ::std::string*>(&_default_newcomer_ext_ip_);
  newcomer_ext_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BootstrapRequest::~BootstrapRequest() {
  SharedDtor();
}

void BootstrapRequest::SharedDtor() {
  if (newcomer_id_ != &_default_newcomer_id_) {
    delete newcomer_id_;
  }
  if (newcomer_local_ip_ != &_default_newcomer_local_ip_) {
    delete newcomer_local_ip_;
  }
  if (newcomer_ext_ip_ != &_default_newcomer_ext_ip_) {
    delete newcomer_ext_ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BootstrapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootstrapRequest_descriptor_;
}

const BootstrapRequest& BootstrapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

BootstrapRequest* BootstrapRequest::default_instance_ = NULL;

BootstrapRequest* BootstrapRequest::New() const {
  return new BootstrapRequest;
}

void BootstrapRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (newcomer_id_ != &_default_newcomer_id_) {
        newcomer_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (newcomer_local_ip_ != &_default_newcomer_local_ip_) {
        newcomer_local_ip_->clear();
      }
    }
    newcomer_local_port_ = 0;
    if (_has_bit(3)) {
      if (newcomer_ext_ip_ != &_default_newcomer_ext_ip_) {
        newcomer_ext_ip_->clear();
      }
    }
    newcomer_ext_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BootstrapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes newcomer_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_newcomer_id()));
        if (input->ExpectTag(18)) goto parse_newcomer_local_ip;
        break;
      }
      
      // required bytes newcomer_local_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_newcomer_local_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_newcomer_local_ip()));
        if (input->ExpectTag(24)) goto parse_newcomer_local_port;
        break;
      }
      
      // required int32 newcomer_local_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_newcomer_local_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &newcomer_local_port_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_newcomer_ext_ip;
        break;
      }
      
      // optional bytes newcomer_ext_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_newcomer_ext_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_newcomer_ext_ip()));
        if (input->ExpectTag(40)) goto parse_newcomer_ext_port;
        break;
      }
      
      // optional int32 newcomer_ext_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_newcomer_ext_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &newcomer_ext_port_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BootstrapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BootstrapRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes newcomer_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->newcomer_id(), output);
  }
  
  // required bytes newcomer_local_ip = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->newcomer_local_ip(), output);
  }
  
  // required int32 newcomer_local_port = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->newcomer_local_port(), output);
  }
  
  // optional bytes newcomer_ext_ip = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->newcomer_ext_ip(), output);
  }
  
  // optional int32 newcomer_ext_port = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->newcomer_ext_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BootstrapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes newcomer_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->newcomer_id(), target);
  }
  
  // required bytes newcomer_local_ip = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->newcomer_local_ip(), target);
  }
  
  // required int32 newcomer_local_port = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->newcomer_local_port(), target);
  }
  
  // optional bytes newcomer_ext_ip = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->newcomer_ext_ip(), target);
  }
  
  // optional int32 newcomer_ext_port = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->newcomer_ext_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BootstrapRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes newcomer_id = 1;
    if (has_newcomer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->newcomer_id());
    }
    
    // required bytes newcomer_local_ip = 2;
    if (has_newcomer_local_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->newcomer_local_ip());
    }
    
    // required int32 newcomer_local_port = 3;
    if (has_newcomer_local_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->newcomer_local_port());
    }
    
    // optional bytes newcomer_ext_ip = 4;
    if (has_newcomer_ext_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->newcomer_ext_ip());
    }
    
    // optional int32 newcomer_ext_port = 5;
    if (has_newcomer_ext_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->newcomer_ext_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BootstrapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BootstrapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BootstrapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BootstrapRequest::MergeFrom(const BootstrapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_newcomer_id(from.newcomer_id());
    }
    if (from._has_bit(1)) {
      set_newcomer_local_ip(from.newcomer_local_ip());
    }
    if (from._has_bit(2)) {
      set_newcomer_local_port(from.newcomer_local_port());
    }
    if (from._has_bit(3)) {
      set_newcomer_ext_ip(from.newcomer_ext_ip());
    }
    if (from._has_bit(4)) {
      set_newcomer_ext_port(from.newcomer_ext_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BootstrapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapRequest::CopyFrom(const BootstrapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapRequest::Swap(BootstrapRequest* other) {
  if (other != this) {
    std::swap(newcomer_id_, other->newcomer_id_);
    std::swap(newcomer_local_ip_, other->newcomer_local_ip_);
    std::swap(newcomer_local_port_, other->newcomer_local_port_);
    std::swap(newcomer_ext_ip_, other->newcomer_ext_ip_);
    std::swap(newcomer_ext_port_, other->newcomer_ext_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool BootstrapRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* BootstrapRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* BootstrapRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return BootstrapRequest_reflection_;
}

// ===================================================================

const ::std::string BootstrapResponse::_default_result_;
const ::std::string BootstrapResponse::_default_bootstrap_id_;
const ::std::string BootstrapResponse::_default_newcomer_ext_ip_;
#ifndef _MSC_VER
const int BootstrapResponse::kResultFieldNumber;
const int BootstrapResponse::kBootstrapIdFieldNumber;
const int BootstrapResponse::kNewcomerExtIpFieldNumber;
const int BootstrapResponse::kNewcomerExtPortFieldNumber;
const int BootstrapResponse::kNatTypeFieldNumber;
#endif  // !_MSC_VER

BootstrapResponse::BootstrapResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    bootstrap_id_(const_cast< ::std::string*>(&_default_bootstrap_id_)),
    newcomer_ext_ip_(const_cast< ::std::string*>(&_default_newcomer_ext_ip_)),
    newcomer_ext_port_(0),
    nat_type_(0) {
  SharedCtor();
}

void BootstrapResponse::InitAsDefaultInstance() {}

BootstrapResponse::BootstrapResponse(const BootstrapResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    bootstrap_id_(const_cast< ::std::string*>(&_default_bootstrap_id_)),
    newcomer_ext_ip_(const_cast< ::std::string*>(&_default_newcomer_ext_ip_)),
    newcomer_ext_port_(0),
    nat_type_(0) {
  SharedCtor();
  MergeFrom(from);
}

void BootstrapResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&_default_result_);
  bootstrap_id_ = const_cast< ::std::string*>(&_default_bootstrap_id_);
  newcomer_ext_ip_ = const_cast< ::std::string*>(&_default_newcomer_ext_ip_);
  newcomer_ext_port_ = 0;
  nat_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BootstrapResponse::~BootstrapResponse() {
  SharedDtor();
}

void BootstrapResponse::SharedDtor() {
  if (result_ != &_default_result_) {
    delete result_;
  }
  if (bootstrap_id_ != &_default_bootstrap_id_) {
    delete bootstrap_id_;
  }
  if (newcomer_ext_ip_ != &_default_newcomer_ext_ip_) {
    delete newcomer_ext_ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BootstrapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootstrapResponse_descriptor_;
}

const BootstrapResponse& BootstrapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

BootstrapResponse* BootstrapResponse::default_instance_ = NULL;

BootstrapResponse* BootstrapResponse::New() const {
  return new BootstrapResponse;
}

void BootstrapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != &_default_result_) {
        result_->clear();
      }
    }
    if (_has_bit(1)) {
      if (bootstrap_id_ != &_default_bootstrap_id_) {
        bootstrap_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (newcomer_ext_ip_ != &_default_newcomer_ext_ip_) {
        newcomer_ext_ip_->clear();
      }
    }
    newcomer_ext_port_ = 0;
    nat_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BootstrapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_result()));
        if (input->ExpectTag(18)) goto parse_bootstrap_id;
        break;
      }
      
      // optional bytes bootstrap_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bootstrap_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_bootstrap_id()));
        if (input->ExpectTag(26)) goto parse_newcomer_ext_ip;
        break;
      }
      
      // optional bytes newcomer_ext_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_newcomer_ext_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_newcomer_ext_ip()));
        if (input->ExpectTag(32)) goto parse_newcomer_ext_port;
        break;
      }
      
      // optional int32 newcomer_ext_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_newcomer_ext_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &newcomer_ext_port_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nat_type;
        break;
      }
      
      // optional int32 nat_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nat_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &nat_type_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BootstrapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BootstrapResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->result(), output);
  }
  
  // optional bytes bootstrap_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->bootstrap_id(), output);
  }
  
  // optional bytes newcomer_ext_ip = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->newcomer_ext_ip(), output);
  }
  
  // optional int32 newcomer_ext_port = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->newcomer_ext_port(), output);
  }
  
  // optional int32 nat_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->nat_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BootstrapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->result(), target);
  }
  
  // optional bytes bootstrap_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->bootstrap_id(), target);
  }
  
  // optional bytes newcomer_ext_ip = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->newcomer_ext_ip(), target);
  }
  
  // optional int32 newcomer_ext_port = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->newcomer_ext_port(), target);
  }
  
  // optional int32 nat_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->nat_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BootstrapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->result());
    }
    
    // optional bytes bootstrap_id = 2;
    if (has_bootstrap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->bootstrap_id());
    }
    
    // optional bytes newcomer_ext_ip = 3;
    if (has_newcomer_ext_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->newcomer_ext_ip());
    }
    
    // optional int32 newcomer_ext_port = 4;
    if (has_newcomer_ext_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->newcomer_ext_port());
    }
    
    // optional int32 nat_type = 5;
    if (has_nat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->nat_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BootstrapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BootstrapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BootstrapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BootstrapResponse::MergeFrom(const BootstrapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_bootstrap_id(from.bootstrap_id());
    }
    if (from._has_bit(2)) {
      set_newcomer_ext_ip(from.newcomer_ext_ip());
    }
    if (from._has_bit(3)) {
      set_newcomer_ext_port(from.newcomer_ext_port());
    }
    if (from._has_bit(4)) {
      set_nat_type(from.nat_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BootstrapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapResponse::CopyFrom(const BootstrapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapResponse::Swap(BootstrapResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(bootstrap_id_, other->bootstrap_id_);
    std::swap(newcomer_ext_ip_, other->newcomer_ext_ip_);
    std::swap(newcomer_ext_port_, other->newcomer_ext_port_);
    std::swap(nat_type_, other->nat_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool BootstrapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* BootstrapResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* BootstrapResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return BootstrapResponse_reflection_;
}

// ===================================================================

const ::std::string NatDetectionRequest::_default_newcomer_;
const ::std::string NatDetectionRequest::_default_bootstrap_node_;
const ::std::string NatDetectionRequest::_default_sender_id_;
#ifndef _MSC_VER
const int NatDetectionRequest::kNewcomerFieldNumber;
const int NatDetectionRequest::kBootstrapNodeFieldNumber;
const int NatDetectionRequest::kTypeFieldNumber;
const int NatDetectionRequest::kSenderIdFieldNumber;
#endif  // !_MSC_VER

NatDetectionRequest::NatDetectionRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    newcomer_(const_cast< ::std::string*>(&_default_newcomer_)),
    bootstrap_node_(const_cast< ::std::string*>(&_default_bootstrap_node_)),
    type_(0),
    sender_id_(const_cast< ::std::string*>(&_default_sender_id_)) {
  SharedCtor();
}

void NatDetectionRequest::InitAsDefaultInstance() {}

NatDetectionRequest::NatDetectionRequest(const NatDetectionRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    newcomer_(const_cast< ::std::string*>(&_default_newcomer_)),
    bootstrap_node_(const_cast< ::std::string*>(&_default_bootstrap_node_)),
    type_(0),
    sender_id_(const_cast< ::std::string*>(&_default_sender_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void NatDetectionRequest::SharedCtor() {
  _cached_size_ = 0;
  newcomer_ = const_cast< ::std::string*>(&_default_newcomer_);
  bootstrap_node_ = const_cast< ::std::string*>(&_default_bootstrap_node_);
  type_ = 0;
  sender_id_ = const_cast< ::std::string*>(&_default_sender_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NatDetectionRequest::~NatDetectionRequest() {
  SharedDtor();
}

void NatDetectionRequest::SharedDtor() {
  if (newcomer_ != &_default_newcomer_) {
    delete newcomer_;
  }
  if (bootstrap_node_ != &_default_bootstrap_node_) {
    delete bootstrap_node_;
  }
  if (sender_id_ != &_default_sender_id_) {
    delete sender_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* NatDetectionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NatDetectionRequest_descriptor_;
}

const NatDetectionRequest& NatDetectionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

NatDetectionRequest* NatDetectionRequest::default_instance_ = NULL;

NatDetectionRequest* NatDetectionRequest::New() const {
  return new NatDetectionRequest;
}

void NatDetectionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (newcomer_ != &_default_newcomer_) {
        newcomer_->clear();
      }
    }
    if (_has_bit(1)) {
      if (bootstrap_node_ != &_default_bootstrap_node_) {
        bootstrap_node_->clear();
      }
    }
    type_ = 0;
    if (_has_bit(3)) {
      if (sender_id_ != &_default_sender_id_) {
        sender_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NatDetectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes newcomer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_newcomer()));
        if (input->ExpectTag(18)) goto parse_bootstrap_node;
        break;
      }
      
      // required bytes bootstrap_node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bootstrap_node:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_bootstrap_node()));
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &type_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_sender_id;
        break;
      }
      
      // required bytes sender_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sender_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_sender_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NatDetectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    NatDetectionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes newcomer = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->newcomer(), output);
  }
  
  // required bytes bootstrap_node = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->bootstrap_node(), output);
  }
  
  // required int32 type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->type(), output);
  }
  
  // required bytes sender_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->sender_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NatDetectionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes newcomer = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->newcomer(), target);
  }
  
  // required bytes bootstrap_node = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->bootstrap_node(), target);
  }
  
  // required int32 type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->type(), target);
  }
  
  // required bytes sender_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->sender_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NatDetectionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes newcomer = 1;
    if (has_newcomer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->newcomer());
    }
    
    // required bytes bootstrap_node = 2;
    if (has_bootstrap_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->bootstrap_node());
    }
    
    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->type());
    }
    
    // required bytes sender_id = 4;
    if (has_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->sender_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void NatDetectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NatDetectionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NatDetectionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NatDetectionRequest::MergeFrom(const NatDetectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_newcomer(from.newcomer());
    }
    if (from._has_bit(1)) {
      set_bootstrap_node(from.bootstrap_node());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
    if (from._has_bit(3)) {
      set_sender_id(from.sender_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NatDetectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NatDetectionRequest::CopyFrom(const NatDetectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NatDetectionRequest::Swap(NatDetectionRequest* other) {
  if (other != this) {
    std::swap(newcomer_, other->newcomer_);
    std::swap(bootstrap_node_, other->bootstrap_node_);
    std::swap(type_, other->type_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool NatDetectionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* NatDetectionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* NatDetectionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return NatDetectionRequest_reflection_;
}

// ===================================================================

const ::std::string NatDetectionResponse::_default_result_;
#ifndef _MSC_VER
const int NatDetectionResponse::kResultFieldNumber;
#endif  // !_MSC_VER

NatDetectionResponse::NatDetectionResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)) {
  SharedCtor();
}

void NatDetectionResponse::InitAsDefaultInstance() {}

NatDetectionResponse::NatDetectionResponse(const NatDetectionResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)) {
  SharedCtor();
  MergeFrom(from);
}

void NatDetectionResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&_default_result_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NatDetectionResponse::~NatDetectionResponse() {
  SharedDtor();
}

void NatDetectionResponse::SharedDtor() {
  if (result_ != &_default_result_) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* NatDetectionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NatDetectionResponse_descriptor_;
}

const NatDetectionResponse& NatDetectionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

NatDetectionResponse* NatDetectionResponse::default_instance_ = NULL;

NatDetectionResponse* NatDetectionResponse::New() const {
  return new NatDetectionResponse;
}

void NatDetectionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != &_default_result_) {
        result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NatDetectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_result()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NatDetectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    NatDetectionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NatDetectionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NatDetectionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void NatDetectionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NatDetectionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NatDetectionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NatDetectionResponse::MergeFrom(const NatDetectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NatDetectionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NatDetectionResponse::CopyFrom(const NatDetectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NatDetectionResponse::Swap(NatDetectionResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool NatDetectionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* NatDetectionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* NatDetectionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return NatDetectionResponse_reflection_;
}

// ===================================================================

const ::std::string NatDetectionPingRequest::_default_ping_;
#ifndef _MSC_VER
const int NatDetectionPingRequest::kPingFieldNumber;
const int NatDetectionPingRequest::kSenderInfoFieldNumber;
#endif  // !_MSC_VER

NatDetectionPingRequest::NatDetectionPingRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    ping_(const_cast< ::std::string*>(&_default_ping_)),
    sender_info_(NULL) {
  SharedCtor();
}

void NatDetectionPingRequest::InitAsDefaultInstance() {  sender_info_ = const_cast< ::kad::ContactInfo*>(&::kad::ContactInfo::default_instance());
}

NatDetectionPingRequest::NatDetectionPingRequest(const NatDetectionPingRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    ping_(const_cast< ::std::string*>(&_default_ping_)),
    sender_info_(NULL) {
  SharedCtor();
  MergeFrom(from);
}

void NatDetectionPingRequest::SharedCtor() {
  _cached_size_ = 0;
  ping_ = const_cast< ::std::string*>(&_default_ping_);
  sender_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NatDetectionPingRequest::~NatDetectionPingRequest() {
  SharedDtor();
}

void NatDetectionPingRequest::SharedDtor() {
  if (ping_ != &_default_ping_) {
    delete ping_;
  }
  if (this != default_instance_) {
    delete sender_info_;
  }
}

const ::google::protobuf::Descriptor* NatDetectionPingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NatDetectionPingRequest_descriptor_;
}

const NatDetectionPingRequest& NatDetectionPingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

NatDetectionPingRequest* NatDetectionPingRequest::default_instance_ = NULL;

NatDetectionPingRequest* NatDetectionPingRequest::New() const {
  return new NatDetectionPingRequest;
}

void NatDetectionPingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ping_ != &_default_ping_) {
        ping_->clear();
      }
    }
    if (_has_bit(1)) {
      if (sender_info_ != NULL) sender_info_->::kad::ContactInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NatDetectionPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes ping = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_ping()));
        if (input->ExpectTag(18)) goto parse_sender_info;
        break;
      }
      
      // required .kad.ContactInfo sender_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sender_info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_sender_info()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NatDetectionPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    NatDetectionPingRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes ping = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->ping(), output);
  }
  
  // required .kad.ContactInfo sender_info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->sender_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NatDetectionPingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ping = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->ping(), target);
  }
  
  // required .kad.ContactInfo sender_info = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->sender_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NatDetectionPingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ping = 1;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->ping());
    }
    
    // required .kad.ContactInfo sender_info = 2;
    if (has_sender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->sender_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void NatDetectionPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NatDetectionPingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NatDetectionPingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NatDetectionPingRequest::MergeFrom(const NatDetectionPingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ping(from.ping());
    }
    if (from._has_bit(1)) {
      mutable_sender_info()->::kad::ContactInfo::MergeFrom(from.sender_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NatDetectionPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NatDetectionPingRequest::CopyFrom(const NatDetectionPingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NatDetectionPingRequest::Swap(NatDetectionPingRequest* other) {
  if (other != this) {
    std::swap(ping_, other->ping_);
    std::swap(sender_info_, other->sender_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool NatDetectionPingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_sender_info()) {
    if (!this->sender_info().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* NatDetectionPingRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* NatDetectionPingRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return NatDetectionPingRequest_reflection_;
}

// ===================================================================

const ::std::string NatDetectionPingResponse::_default_result_;
const ::std::string NatDetectionPingResponse::_default_echo_;
const ::std::string NatDetectionPingResponse::_default_node_id_;
#ifndef _MSC_VER
const int NatDetectionPingResponse::kResultFieldNumber;
const int NatDetectionPingResponse::kEchoFieldNumber;
const int NatDetectionPingResponse::kNodeIdFieldNumber;
#endif  // !_MSC_VER

NatDetectionPingResponse::NatDetectionPingResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    echo_(const_cast< ::std::string*>(&_default_echo_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
}

void NatDetectionPingResponse::InitAsDefaultInstance() {}

NatDetectionPingResponse::NatDetectionPingResponse(const NatDetectionPingResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    echo_(const_cast< ::std::string*>(&_default_echo_)),
    node_id_(const_cast< ::std::string*>(&_default_node_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void NatDetectionPingResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&_default_result_);
  echo_ = const_cast< ::std::string*>(&_default_echo_);
  node_id_ = const_cast< ::std::string*>(&_default_node_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NatDetectionPingResponse::~NatDetectionPingResponse() {
  SharedDtor();
}

void NatDetectionPingResponse::SharedDtor() {
  if (result_ != &_default_result_) {
    delete result_;
  }
  if (echo_ != &_default_echo_) {
    delete echo_;
  }
  if (node_id_ != &_default_node_id_) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* NatDetectionPingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NatDetectionPingResponse_descriptor_;
}

const NatDetectionPingResponse& NatDetectionPingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kademlia_5fservice_5fmessages_2eproto();  return *default_instance_;
}

NatDetectionPingResponse* NatDetectionPingResponse::default_instance_ = NULL;

NatDetectionPingResponse* NatDetectionPingResponse::New() const {
  return new NatDetectionPingResponse;
}

void NatDetectionPingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != &_default_result_) {
        result_->clear();
      }
    }
    if (_has_bit(1)) {
      if (echo_ != &_default_echo_) {
        echo_->clear();
      }
    }
    if (_has_bit(2)) {
      if (node_id_ != &_default_node_id_) {
        node_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NatDetectionPingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_result()));
        if (input->ExpectTag(18)) goto parse_echo;
        break;
      }
      
      // optional bytes echo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_echo:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_echo()));
        if (input->ExpectTag(26)) goto parse_node_id;
        break;
      }
      
      // optional bytes node_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_node_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_node_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NatDetectionPingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    NatDetectionPingResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->result(), output);
  }
  
  // optional bytes echo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->echo(), output);
  }
  
  // optional bytes node_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->node_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NatDetectionPingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->result(), target);
  }
  
  // optional bytes echo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->echo(), target);
  }
  
  // optional bytes node_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->node_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NatDetectionPingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->result());
    }
    
    // optional bytes echo = 2;
    if (has_echo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->echo());
    }
    
    // optional bytes node_id = 3;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->node_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void NatDetectionPingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NatDetectionPingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NatDetectionPingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NatDetectionPingResponse::MergeFrom(const NatDetectionPingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_echo(from.echo());
    }
    if (from._has_bit(2)) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NatDetectionPingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NatDetectionPingResponse::CopyFrom(const NatDetectionPingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NatDetectionPingResponse::Swap(NatDetectionPingResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(echo_, other->echo_);
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool NatDetectionPingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* NatDetectionPingResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* NatDetectionPingResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return NatDetectionPingResponse_reflection_;
}

}  // namespace kad
