// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "testservices.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace tests {

namespace {

const ::google::protobuf::Descriptor* PingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryOpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryOpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryOpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryOpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringMirrorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringMirrorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringMirrorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringMirrorResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* PingTest_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* TestOp_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* MirrorTest_descriptor_ = NULL;

}  // namespace


void protobuf_BuildDesc_testservices_2eproto_AssignGlobalDescriptors(const ::google::protobuf::FileDescriptor* file) {
  PingRequest_descriptor_ = file->message_type(0);
  PingRequest::default_instance_ = new PingRequest();
  static const int PingRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, port_),
  };
  PingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingRequest_descriptor_,
      PingRequest::default_instance_,
      PingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(PingRequest));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingRequest_descriptor_, PingRequest::default_instance_);
  PingResponse_descriptor_ = file->message_type(1);
  PingResponse::default_instance_ = new PingResponse();
  static const int PingResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, pong_),
  };
  PingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingResponse_descriptor_,
      PingResponse::default_instance_,
      PingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(PingResponse));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingResponse_descriptor_, PingResponse::default_instance_);
  BinaryOpRequest_descriptor_ = file->message_type(2);
  BinaryOpRequest::default_instance_ = new BinaryOpRequest();
  static const int BinaryOpRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, port_),
  };
  BinaryOpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryOpRequest_descriptor_,
      BinaryOpRequest::default_instance_,
      BinaryOpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(BinaryOpRequest));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryOpRequest_descriptor_, BinaryOpRequest::default_instance_);
  BinaryOpResponse_descriptor_ = file->message_type(3);
  BinaryOpResponse::default_instance_ = new BinaryOpResponse();
  static const int BinaryOpResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpResponse, result_),
  };
  BinaryOpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryOpResponse_descriptor_,
      BinaryOpResponse::default_instance_,
      BinaryOpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(BinaryOpResponse));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryOpResponse_descriptor_, BinaryOpResponse::default_instance_);
  StringMirrorRequest_descriptor_ = file->message_type(4);
  StringMirrorRequest::default_instance_ = new StringMirrorRequest();
  static const int StringMirrorRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorRequest, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorRequest, port_),
  };
  StringMirrorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringMirrorRequest_descriptor_,
      StringMirrorRequest::default_instance_,
      StringMirrorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(StringMirrorRequest));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringMirrorRequest_descriptor_, StringMirrorRequest::default_instance_);
  StringMirrorResponse_descriptor_ = file->message_type(5);
  StringMirrorResponse::default_instance_ = new StringMirrorResponse();
  static const int StringMirrorResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorResponse, mirrored_string_),
  };
  StringMirrorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringMirrorResponse_descriptor_,
      StringMirrorResponse::default_instance_,
      StringMirrorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(StringMirrorResponse));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringMirrorResponse_descriptor_, StringMirrorResponse::default_instance_);
  PingTest_descriptor_ = file->service(0);
  TestOp_descriptor_ = file->service(1);
  MirrorTest_descriptor_ = file->service(2);
  PingRequest::default_instance_->InitAsDefaultInstance();
  PingResponse::default_instance_->InitAsDefaultInstance();
  BinaryOpRequest::default_instance_->InitAsDefaultInstance();
  BinaryOpResponse::default_instance_->InitAsDefaultInstance();
  StringMirrorRequest::default_instance_->InitAsDefaultInstance();
  StringMirrorResponse::default_instance_->InitAsDefaultInstance();
}

void protobuf_BuildDesc_testservices_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  ::google::protobuf::DescriptorPool* pool =
    ::google::protobuf::DescriptorPool::internal_generated_pool();

  pool->InternalBuildGeneratedFile(
    "\n\022testservices.proto\022\005tests\"5\n\013PingReque"
    "st\022\014\n\004ping\030\001 \002(\014\022\n\n\002ip\030\002 \002(\014\022\014\n\004port\030\003 \002"
    "(\005\",\n\014PingResponse\022\016\n\006result\030\001 \002(\014\022\014\n\004po"
    "ng\030\002 \002(\014\"J\n\017BinaryOpRequest\022\r\n\005first\030\001 \002"
    "(\005\022\016\n\006second\030\002 \002(\005\022\n\n\002ip\030\003 \002(\014\022\014\n\004port\030\004"
    " \002(\005\"\"\n\020BinaryOpResponse\022\016\n\006result\030\001 \002(\005"
    "\"@\n\023StringMirrorRequest\022\017\n\007message\030\001 \002(\014"
    "\022\n\n\002ip\030\002 \002(\014\022\014\n\004port\030\003 \002(\005\"/\n\024StringMirr"
    "orResponse\022\027\n\017mirrored_string\030\001 \002(\0142;\n\010P"
    "ingTest\022/\n\004Ping\022\022.tests.PingRequest\032\023.te"
    "sts.PingResponse2~\n\006TestOp\0226\n\003Add\022\026.test"
    "s.BinaryOpRequest\032\027.tests.BinaryOpRespon"
    "se\022<\n\tMultiplyl\022\026.tests.BinaryOpRequest\032"
    "\027.tests.BinaryOpResponse2O\n\nMirrorTest\022A"
    "\n\006Mirror\022\032.tests.StringMirrorRequest\032\033.t"
    "ests.StringMirrorResponse", 625,
  &protobuf_BuildDesc_testservices_2eproto_AssignGlobalDescriptors);
}

// Force BuildDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_testservices_2eproto {
  StaticDescriptorInitializer_testservices_2eproto() {
    protobuf_BuildDesc_testservices_2eproto();
  }
} static_descriptor_initializer_testservices_2eproto_;


// ===================================================================

const ::std::string PingRequest::_default_ping_;
const ::std::string PingRequest::_default_ip_;

PingRequest::PingRequest()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    ping_(const_cast< ::std::string*>(&_default_ping_)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void PingRequest::InitAsDefaultInstance() {}

PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    ping_(const_cast< ::std::string*>(&_default_ping_)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

PingRequest::~PingRequest() {
  if (ping_ != &_default_ping_) {
    delete ping_;
  }
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PingRequest::descriptor() {
  if (PingRequest_descriptor_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return PingRequest_descriptor_;
}

const PingRequest& PingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return *default_instance_;
}

PingRequest* PingRequest::default_instance_ = NULL;

PingRequest* PingRequest::New() const {
  return new PingRequest;
}

const ::google::protobuf::Descriptor* PingRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PingRequest::GetReflection() const {
  if (PingRequest_reflection_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return PingRequest_reflection_;
}

// ===================================================================

const ::std::string PingResponse::_default_result_;
const ::std::string PingResponse::_default_pong_;
PingResponse::PingResponse()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    pong_(const_cast< ::std::string*>(&_default_pong_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void PingResponse::InitAsDefaultInstance() {}

PingResponse::PingResponse(const PingResponse& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    pong_(const_cast< ::std::string*>(&_default_pong_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

PingResponse::~PingResponse() {
  if (result_ != &_default_result_) {
    delete result_;
  }
  if (pong_ != &_default_pong_) {
    delete pong_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PingResponse::descriptor() {
  if (PingResponse_descriptor_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return PingResponse_descriptor_;
}

const PingResponse& PingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return *default_instance_;
}

PingResponse* PingResponse::default_instance_ = NULL;

PingResponse* PingResponse::New() const {
  return new PingResponse;
}

const ::google::protobuf::Descriptor* PingResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PingResponse::GetReflection() const {
  if (PingResponse_reflection_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return PingResponse_reflection_;
}

// ===================================================================



const ::std::string BinaryOpRequest::_default_ip_;

BinaryOpRequest::BinaryOpRequest()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    first_(0),
    second_(0),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void BinaryOpRequest::InitAsDefaultInstance() {}

BinaryOpRequest::BinaryOpRequest(const BinaryOpRequest& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    first_(0),
    second_(0),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

BinaryOpRequest::~BinaryOpRequest() {
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BinaryOpRequest::descriptor() {
  if (BinaryOpRequest_descriptor_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return BinaryOpRequest_descriptor_;
}

const BinaryOpRequest& BinaryOpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return *default_instance_;
}

BinaryOpRequest* BinaryOpRequest::default_instance_ = NULL;

BinaryOpRequest* BinaryOpRequest::New() const {
  return new BinaryOpRequest;
}

const ::google::protobuf::Descriptor* BinaryOpRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* BinaryOpRequest::GetReflection() const {
  if (BinaryOpRequest_reflection_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return BinaryOpRequest_reflection_;
}

// ===================================================================


BinaryOpResponse::BinaryOpResponse()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    result_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void BinaryOpResponse::InitAsDefaultInstance() {}

BinaryOpResponse::BinaryOpResponse(const BinaryOpResponse& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    result_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

BinaryOpResponse::~BinaryOpResponse() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BinaryOpResponse::descriptor() {
  if (BinaryOpResponse_descriptor_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return BinaryOpResponse_descriptor_;
}

const BinaryOpResponse& BinaryOpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return *default_instance_;
}

BinaryOpResponse* BinaryOpResponse::default_instance_ = NULL;

BinaryOpResponse* BinaryOpResponse::New() const {
  return new BinaryOpResponse;
}

const ::google::protobuf::Descriptor* BinaryOpResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* BinaryOpResponse::GetReflection() const {
  if (BinaryOpResponse_reflection_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return BinaryOpResponse_reflection_;
}

// ===================================================================

const ::std::string StringMirrorRequest::_default_message_;
const ::std::string StringMirrorRequest::_default_ip_;

StringMirrorRequest::StringMirrorRequest()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    message_(const_cast< ::std::string*>(&_default_message_)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void StringMirrorRequest::InitAsDefaultInstance() {}

StringMirrorRequest::StringMirrorRequest(const StringMirrorRequest& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    message_(const_cast< ::std::string*>(&_default_message_)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

StringMirrorRequest::~StringMirrorRequest() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StringMirrorRequest::descriptor() {
  if (StringMirrorRequest_descriptor_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return StringMirrorRequest_descriptor_;
}

const StringMirrorRequest& StringMirrorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return *default_instance_;
}

StringMirrorRequest* StringMirrorRequest::default_instance_ = NULL;

StringMirrorRequest* StringMirrorRequest::New() const {
  return new StringMirrorRequest;
}

const ::google::protobuf::Descriptor* StringMirrorRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StringMirrorRequest::GetReflection() const {
  if (StringMirrorRequest_reflection_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return StringMirrorRequest_reflection_;
}

// ===================================================================

const ::std::string StringMirrorResponse::_default_mirrored_string_;
StringMirrorResponse::StringMirrorResponse()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    mirrored_string_(const_cast< ::std::string*>(&_default_mirrored_string_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void StringMirrorResponse::InitAsDefaultInstance() {}

StringMirrorResponse::StringMirrorResponse(const StringMirrorResponse& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    mirrored_string_(const_cast< ::std::string*>(&_default_mirrored_string_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

StringMirrorResponse::~StringMirrorResponse() {
  if (mirrored_string_ != &_default_mirrored_string_) {
    delete mirrored_string_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StringMirrorResponse::descriptor() {
  if (StringMirrorResponse_descriptor_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return StringMirrorResponse_descriptor_;
}

const StringMirrorResponse& StringMirrorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return *default_instance_;
}

StringMirrorResponse* StringMirrorResponse::default_instance_ = NULL;

StringMirrorResponse* StringMirrorResponse::New() const {
  return new StringMirrorResponse;
}

const ::google::protobuf::Descriptor* StringMirrorResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StringMirrorResponse::GetReflection() const {
  if (StringMirrorResponse_reflection_ == NULL) protobuf_BuildDesc_testservices_2eproto();
  return StringMirrorResponse_reflection_;
}

// ===================================================================

PingTest::~PingTest() {}

const ::google::protobuf::ServiceDescriptor* PingTest::descriptor() {
  return PingTest_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* PingTest::GetDescriptor() {
  return PingTest_descriptor_;
}

void PingTest::Ping(::google::protobuf::RpcController* controller,
                         const ::tests::PingRequest*,
                         ::tests::PingResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Ping() not implemented.");
  done->Run();
}

void PingTest::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), PingTest_descriptor_);
  switch(method->index()) {
    case 0:
      Ping(controller,
             ::google::protobuf::down_cast<const ::tests::PingRequest*>(request),
             ::google::protobuf::down_cast< ::tests::PingResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PingTest::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), PingTest_descriptor_);
  switch(method->index()) {
    case 0:
      return ::tests::PingRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& PingTest::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), PingTest_descriptor_);
  switch(method->index()) {
    case 0:
      return ::tests::PingResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

PingTest_Stub::PingTest_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PingTest_Stub::PingTest_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PingTest_Stub::~PingTest_Stub() {
  if (owns_channel_) delete channel_;
}

void PingTest_Stub::Ping(::google::protobuf::RpcController* controller,
                              const ::tests::PingRequest* request,
                              ::tests::PingResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(PingTest_descriptor_->method(0),
                       controller, request, response, done);
}
// ===================================================================

TestOp::~TestOp() {}

const ::google::protobuf::ServiceDescriptor* TestOp::descriptor() {
  return TestOp_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* TestOp::GetDescriptor() {
  return TestOp_descriptor_;
}

void TestOp::Add(::google::protobuf::RpcController* controller,
                         const ::tests::BinaryOpRequest*,
                         ::tests::BinaryOpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Add() not implemented.");
  done->Run();
}

void TestOp::Multiplyl(::google::protobuf::RpcController* controller,
                         const ::tests::BinaryOpRequest*,
                         ::tests::BinaryOpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Multiplyl() not implemented.");
  done->Run();
}

void TestOp::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), TestOp_descriptor_);
  switch(method->index()) {
    case 0:
      Add(controller,
             ::google::protobuf::down_cast<const ::tests::BinaryOpRequest*>(request),
             ::google::protobuf::down_cast< ::tests::BinaryOpResponse*>(response),
             done);
      break;
    case 1:
      Multiplyl(controller,
             ::google::protobuf::down_cast<const ::tests::BinaryOpRequest*>(request),
             ::google::protobuf::down_cast< ::tests::BinaryOpResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TestOp::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), TestOp_descriptor_);
  switch(method->index()) {
    case 0:
      return ::tests::BinaryOpRequest::default_instance();
    case 1:
      return ::tests::BinaryOpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& TestOp::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), TestOp_descriptor_);
  switch(method->index()) {
    case 0:
      return ::tests::BinaryOpResponse::default_instance();
    case 1:
      return ::tests::BinaryOpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

TestOp_Stub::TestOp_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestOp_Stub::TestOp_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TestOp_Stub::~TestOp_Stub() {
  if (owns_channel_) delete channel_;
}

void TestOp_Stub::Add(::google::protobuf::RpcController* controller,
                              const ::tests::BinaryOpRequest* request,
                              ::tests::BinaryOpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(TestOp_descriptor_->method(0),
                       controller, request, response, done);
}
void TestOp_Stub::Multiplyl(::google::protobuf::RpcController* controller,
                              const ::tests::BinaryOpRequest* request,
                              ::tests::BinaryOpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(TestOp_descriptor_->method(1),
                       controller, request, response, done);
}
// ===================================================================

MirrorTest::~MirrorTest() {}

const ::google::protobuf::ServiceDescriptor* MirrorTest::descriptor() {
  return MirrorTest_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* MirrorTest::GetDescriptor() {
  return MirrorTest_descriptor_;
}

void MirrorTest::Mirror(::google::protobuf::RpcController* controller,
                         const ::tests::StringMirrorRequest*,
                         ::tests::StringMirrorResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Mirror() not implemented.");
  done->Run();
}

void MirrorTest::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), MirrorTest_descriptor_);
  switch(method->index()) {
    case 0:
      Mirror(controller,
             ::google::protobuf::down_cast<const ::tests::StringMirrorRequest*>(request),
             ::google::protobuf::down_cast< ::tests::StringMirrorResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MirrorTest::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), MirrorTest_descriptor_);
  switch(method->index()) {
    case 0:
      return ::tests::StringMirrorRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& MirrorTest::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), MirrorTest_descriptor_);
  switch(method->index()) {
    case 0:
      return ::tests::StringMirrorResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

MirrorTest_Stub::MirrorTest_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MirrorTest_Stub::MirrorTest_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MirrorTest_Stub::~MirrorTest_Stub() {
  if (owns_channel_) delete channel_;
}

void MirrorTest_Stub::Mirror(::google::protobuf::RpcController* controller,
                              const ::tests::StringMirrorRequest* request,
                              ::tests::StringMirrorResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(MirrorTest_descriptor_->method(0),
                       controller, request, response, done);
}

}  // namespace tests
