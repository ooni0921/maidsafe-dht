// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "maidsafe/signed_kadvalue.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace kad {

namespace {

const ::google::protobuf::Descriptor* SignedValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedValue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_maidsafe_2fsigned_5fkadvalue_2eproto() {
  protobuf_AddDesc_maidsafe_2fsigned_5fkadvalue_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maidsafe/signed_kadvalue.proto");
  GOOGLE_CHECK(file != NULL);
  SignedValue_descriptor_ = file->message_type(0);
  static const int SignedValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedValue, value_signature_),
  };
  SignedValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedValue_descriptor_,
      SignedValue::default_instance_,
      SignedValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedValue));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maidsafe_2fsigned_5fkadvalue_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedValue_descriptor_, &SignedValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maidsafe_2fsigned_5fkadvalue_2eproto() {
  delete SignedValue::default_instance_;
  delete SignedValue_reflection_;
}

void protobuf_AddDesc_maidsafe_2fsigned_5fkadvalue_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036maidsafe/signed_kadvalue.proto\022\003kad\"5\n"
    "\013SignedValue\022\r\n\005value\030\001 \002(\014\022\027\n\017value_sig"
    "nature\030\002 \002(\014", 92);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maidsafe/signed_kadvalue.proto", &protobuf_RegisterTypes);
  SignedValue::default_instance_ = new SignedValue();
  SignedValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fsigned_5fkadvalue_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fsigned_5fkadvalue_2eproto {
  StaticDescriptorInitializer_maidsafe_2fsigned_5fkadvalue_2eproto() {
    protobuf_AddDesc_maidsafe_2fsigned_5fkadvalue_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fsigned_5fkadvalue_2eproto_;


// ===================================================================

const ::std::string SignedValue::_default_value_;
const ::std::string SignedValue::_default_value_signature_;
#ifndef _MSC_VER
const int SignedValue::kValueFieldNumber;
const int SignedValue::kValueSignatureFieldNumber;
#endif  // !_MSC_VER

SignedValue::SignedValue()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    value_(const_cast< ::std::string*>(&_default_value_)),
    value_signature_(const_cast< ::std::string*>(&_default_value_signature_)) {
  SharedCtor();
}

void SignedValue::InitAsDefaultInstance() {}

SignedValue::SignedValue(const SignedValue& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    value_(const_cast< ::std::string*>(&_default_value_)),
    value_signature_(const_cast< ::std::string*>(&_default_value_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void SignedValue::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&_default_value_);
  value_signature_ = const_cast< ::std::string*>(&_default_value_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedValue::~SignedValue() {
  SharedDtor();
}

void SignedValue::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (value_signature_ != &_default_value_signature_) {
    delete value_signature_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SignedValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedValue_descriptor_;
}

const SignedValue& SignedValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fsigned_5fkadvalue_2eproto();  return *default_instance_;
}

SignedValue* SignedValue::default_instance_ = NULL;

SignedValue* SignedValue::New() const {
  return new SignedValue;
}

void SignedValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_signature_ != &_default_value_signature_) {
        value_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_value()));
        if (input->ExpectTag(18)) goto parse_value_signature;
        break;
      }
      
      // required bytes value_signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_value_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_value_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SignedValue::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->value(), output);
  }
  
  // required bytes value_signature = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->value_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignedValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes value = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->value(), target);
  }
  
  // required bytes value_signature = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->value_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignedValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->value());
    }
    
    // required bytes value_signature = 2;
    if (has_value_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->value_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SignedValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedValue::MergeFrom(const SignedValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
    if (from._has_bit(1)) {
      set_value_signature(from.value_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedValue::CopyFrom(const SignedValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedValue::Swap(SignedValue* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(value_signature_, other->value_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SignedValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* SignedValue::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SignedValue::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SignedValue_reflection_;
}

}  // namespace kad
