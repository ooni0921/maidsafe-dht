// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_rpcmessage_2eproto__INCLUDED
#define PROTOBUF_rpcmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace rpcprotocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpcmessage_2eproto();
void protobuf_AssignDesc_rpcmessage_2eproto();
void protobuf_ShutdownFile_rpcmessage_2eproto();

class RpcMessage;

enum rpc_message_type {
  REQUEST = 0,
  RESPONSE = 1
};
const ::google::protobuf::EnumDescriptor* rpc_message_type_descriptor();
bool rpc_message_type_IsValid(int value);
const rpc_message_type rpc_message_type_MIN = REQUEST;
const rpc_message_type rpc_message_type_MAX = RESPONSE;

inline const ::std::string& rpc_message_type_Name(rpc_message_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    rpc_message_type_descriptor(), value);
}
inline bool rpc_message_type_Parse(
    const ::std::string& name, rpc_message_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rpc_message_type>(
    rpc_message_type_descriptor(), name, value);
}
// ===================================================================

class RpcMessage : public ::google::protobuf::Message {
 public:
  RpcMessage();
  virtual ~RpcMessage();
  
  RpcMessage(const RpcMessage& from);
  
  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();
  void Swap(RpcMessage* other);
  
  // implements Message ----------------------------------------------
  
  RpcMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rpcprotocol.rpc_message_type rpc_type = 1;
  inline bool has_rpc_type() const;
  inline void clear_rpc_type();
  static const int kRpcTypeFieldNumber = 1;
  inline rpcprotocol::rpc_message_type rpc_type() const;
  inline void set_rpc_type(rpcprotocol::rpc_message_type value);
  
  // required int32 message_id = 2;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 2;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);
  
  // required bytes args = 3;
  inline bool has_args() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 3;
  inline const ::std::string& args() const;
  inline void set_args(const ::std::string& value);
  inline void set_args(const char* value);
  inline void set_args(const void* value, size_t size);
  inline ::std::string* mutable_args();
  
  // optional bytes service = 4;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 4;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const void* value, size_t size);
  inline ::std::string* mutable_service();
  
  // optional bytes method = 5;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 5;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const void* value, size_t size);
  inline ::std::string* mutable_method();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int rpc_type_;
  ::google::protobuf::int32 message_id_;
  ::std::string* args_;
  static const ::std::string _default_args_;
  ::std::string* service_;
  static const ::std::string _default_service_;
  ::std::string* method_;
  static const ::std::string _default_method_;
  friend void  protobuf_AddDesc_rpcmessage_2eproto();
  friend void protobuf_AssignDesc_rpcmessage_2eproto();
  friend void protobuf_ShutdownFile_rpcmessage_2eproto();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RpcMessage* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// RpcMessage

// required .rpcprotocol.rpc_message_type rpc_type = 1;
inline bool RpcMessage::has_rpc_type() const {
  return _has_bit(0);
}
inline void RpcMessage::clear_rpc_type() {
  rpc_type_ = 0;
  _clear_bit(0);
}
inline rpcprotocol::rpc_message_type RpcMessage::rpc_type() const {
  return static_cast< rpcprotocol::rpc_message_type >(rpc_type_);
}
inline void RpcMessage::set_rpc_type(rpcprotocol::rpc_message_type value) {
  GOOGLE_DCHECK(rpcprotocol::rpc_message_type_IsValid(value));
  _set_bit(0);
  rpc_type_ = value;
}

// required int32 message_id = 2;
inline bool RpcMessage::has_message_id() const {
  return _has_bit(1);
}
inline void RpcMessage::clear_message_id() {
  message_id_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RpcMessage::message_id() const {
  return message_id_;
}
inline void RpcMessage::set_message_id(::google::protobuf::int32 value) {
  _set_bit(1);
  message_id_ = value;
}

// required bytes args = 3;
inline bool RpcMessage::has_args() const {
  return _has_bit(2);
}
inline void RpcMessage::clear_args() {
  if (args_ != &_default_args_) {
    args_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RpcMessage::args() const {
  return *args_;
}
inline void RpcMessage::set_args(const ::std::string& value) {
  _set_bit(2);
  if (args_ == &_default_args_) {
    args_ = new ::std::string;
  }
  args_->assign(value);
}
inline void RpcMessage::set_args(const char* value) {
  _set_bit(2);
  if (args_ == &_default_args_) {
    args_ = new ::std::string;
  }
  args_->assign(value);
}
inline void RpcMessage::set_args(const void* value, size_t size) {
  _set_bit(2);
  if (args_ == &_default_args_) {
    args_ = new ::std::string;
  }
  args_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_args() {
  _set_bit(2);
  if (args_ == &_default_args_) {
    args_ = new ::std::string;
  }
  return args_;
}

// optional bytes service = 4;
inline bool RpcMessage::has_service() const {
  return _has_bit(3);
}
inline void RpcMessage::clear_service() {
  if (service_ != &_default_service_) {
    service_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RpcMessage::service() const {
  return *service_;
}
inline void RpcMessage::set_service(const ::std::string& value) {
  _set_bit(3);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RpcMessage::set_service(const char* value) {
  _set_bit(3);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RpcMessage::set_service(const void* value, size_t size) {
  _set_bit(3);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_service() {
  _set_bit(3);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  return service_;
}

// optional bytes method = 5;
inline bool RpcMessage::has_method() const {
  return _has_bit(4);
}
inline void RpcMessage::clear_method() {
  if (method_ != &_default_method_) {
    method_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RpcMessage::method() const {
  return *method_;
}
inline void RpcMessage::set_method(const ::std::string& value) {
  _set_bit(4);
  if (method_ == &_default_method_) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcMessage::set_method(const char* value) {
  _set_bit(4);
  if (method_ == &_default_method_) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcMessage::set_method(const void* value, size_t size) {
  _set_bit(4);
  if (method_ == &_default_method_) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_method() {
  _set_bit(4);
  if (method_ == &_default_method_) {
    method_ = new ::std::string;
  }
  return method_;
}


}  // namespace rpcprotocol
#endif  // PROTOBUF_rpcmessage_2eproto__INCLUDED
