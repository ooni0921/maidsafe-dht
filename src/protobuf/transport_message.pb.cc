// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "transport_message.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace transport {

namespace {

const ::google::protobuf::Descriptor* TransportMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_transport_5fmessage_2eproto() {
  protobuf_AddDesc_transport_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "transport_message.proto");
  GOOGLE_CHECK(file != NULL);
  TransportMessage_descriptor_ = file->message_type(0);
  static const int TransportMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportMessage, rpc_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportMessage, hp_msg_),
  };
  TransportMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportMessage_descriptor_,
      TransportMessage::default_instance_,
      TransportMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_transport_5fmessage_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportMessage_descriptor_, &TransportMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_transport_5fmessage_2eproto() {
  delete TransportMessage::default_instance_;
  delete TransportMessage_reflection_;
}

void protobuf_AddDesc_transport_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transport::protobuf_AddDesc_hole_5fpuching_5fmessages_2eproto();
  ::rpcprotocol::protobuf_AddDesc_rpcmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027transport_message.proto\022\ttransport\032\033ho"
    "le_puching_messages.proto\032\020rpcmessage.pr"
    "oto\"h\n\020TransportMessage\022(\n\007rpc_msg\030\001 \001(\013"
    "2\027.rpcprotocol.RpcMessage\022*\n\006hp_msg\030\002 \001("
    "\0132\032.transport.HolePunchingMsg", 189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transport_message.proto", &protobuf_RegisterTypes);
  TransportMessage::default_instance_ = new TransportMessage();
  TransportMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transport_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transport_5fmessage_2eproto {
  StaticDescriptorInitializer_transport_5fmessage_2eproto() {
    protobuf_AddDesc_transport_5fmessage_2eproto();
  }
} static_descriptor_initializer_transport_5fmessage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TransportMessage::kRpcMsgFieldNumber;
const int TransportMessage::kHpMsgFieldNumber;
#endif  // !_MSC_VER

TransportMessage::TransportMessage()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    rpc_msg_(NULL),
    hp_msg_(NULL) {
  SharedCtor();
}

void TransportMessage::InitAsDefaultInstance() {  rpc_msg_ = const_cast< ::rpcprotocol::RpcMessage*>(&::rpcprotocol::RpcMessage::default_instance());
  hp_msg_ = const_cast< ::transport::HolePunchingMsg*>(&::transport::HolePunchingMsg::default_instance());
}

TransportMessage::TransportMessage(const TransportMessage& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    rpc_msg_(NULL),
    hp_msg_(NULL) {
  SharedCtor();
  MergeFrom(from);
}

void TransportMessage::SharedCtor() {
  _cached_size_ = 0;
  rpc_msg_ = NULL;
  hp_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportMessage::~TransportMessage() {
  SharedDtor();
}

void TransportMessage::SharedDtor() {
  if (this != default_instance_) {
    delete rpc_msg_;
    delete hp_msg_;
  }
}

const ::google::protobuf::Descriptor* TransportMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportMessage_descriptor_;
}

const TransportMessage& TransportMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transport_5fmessage_2eproto();  return *default_instance_;
}

TransportMessage* TransportMessage::default_instance_ = NULL;

TransportMessage* TransportMessage::New() const {
  return new TransportMessage;
}

void TransportMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (rpc_msg_ != NULL) rpc_msg_->::rpcprotocol::RpcMessage::Clear();
    }
    if (_has_bit(1)) {
      if (hp_msg_ != NULL) hp_msg_->::transport::HolePunchingMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .rpcprotocol.RpcMessage rpc_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_rpc_msg()));
        if (input->ExpectTag(18)) goto parse_hp_msg;
        break;
      }
      
      // optional .transport.HolePunchingMsg hp_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_hp_msg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_hp_msg()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TransportMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .rpcprotocol.RpcMessage rpc_msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->rpc_msg(), output);
  }
  
  // optional .transport.HolePunchingMsg hp_msg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->hp_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpcprotocol.RpcMessage rpc_msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->rpc_msg(), target);
  }
  
  // optional .transport.HolePunchingMsg hp_msg = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->hp_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpcprotocol.RpcMessage rpc_msg = 1;
    if (has_rpc_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->rpc_msg());
    }
    
    // optional .transport.HolePunchingMsg hp_msg = 2;
    if (has_hp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->hp_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TransportMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportMessage::MergeFrom(const TransportMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_rpc_msg()->::rpcprotocol::RpcMessage::MergeFrom(from.rpc_msg());
    }
    if (from._has_bit(1)) {
      mutable_hp_msg()->::transport::HolePunchingMsg::MergeFrom(from.hp_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportMessage::CopyFrom(const TransportMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportMessage::Swap(TransportMessage* other) {
  if (other != this) {
    std::swap(rpc_msg_, other->rpc_msg_);
    std::swap(hp_msg_, other->hp_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool TransportMessage::IsInitialized() const {
  
  if (has_rpc_msg()) {
    if (!this->rpc_msg().IsInitialized()) return false;
  }
  if (has_hp_msg()) {
    if (!this->hp_msg().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* TransportMessage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* TransportMessage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return TransportMessage_reflection_;
}

}  // namespace transport
