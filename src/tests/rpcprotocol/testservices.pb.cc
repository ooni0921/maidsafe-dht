// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "testservices.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace tests {

namespace {

const ::google::protobuf::Descriptor* PingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryOpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryOpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryOpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryOpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringMirrorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringMirrorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringMirrorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringMirrorResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* PingTest_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* TestOp_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* MirrorTest_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_testservices_2eproto() {
  protobuf_AddDesc_testservices_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "testservices.proto");
  GOOGLE_CHECK(file != NULL);
  PingRequest_descriptor_ = file->message_type(0);
  static const int PingRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, port_),
  };
  PingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingRequest_descriptor_,
      PingRequest::default_instance_,
      PingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingRequest));
  PingResponse_descriptor_ = file->message_type(1);
  static const int PingResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, pong_),
  };
  PingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingResponse_descriptor_,
      PingResponse::default_instance_,
      PingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingResponse));
  BinaryOpRequest_descriptor_ = file->message_type(2);
  static const int BinaryOpRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, port_),
  };
  BinaryOpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryOpRequest_descriptor_,
      BinaryOpRequest::default_instance_,
      BinaryOpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryOpRequest));
  BinaryOpResponse_descriptor_ = file->message_type(3);
  static const int BinaryOpResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpResponse, result_),
  };
  BinaryOpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryOpResponse_descriptor_,
      BinaryOpResponse::default_instance_,
      BinaryOpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryOpResponse));
  StringMirrorRequest_descriptor_ = file->message_type(4);
  static const int StringMirrorRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorRequest, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorRequest, not_pause_),
  };
  StringMirrorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringMirrorRequest_descriptor_,
      StringMirrorRequest::default_instance_,
      StringMirrorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringMirrorRequest));
  StringMirrorResponse_descriptor_ = file->message_type(5);
  static const int StringMirrorResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorResponse, mirrored_string_),
  };
  StringMirrorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringMirrorResponse_descriptor_,
      StringMirrorResponse::default_instance_,
      StringMirrorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMirrorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringMirrorResponse));
  PingTest_descriptor_ = file->service(0);
  TestOp_descriptor_ = file->service(1);
  MirrorTest_descriptor_ = file->service(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_testservices_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingRequest_descriptor_, &PingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingResponse_descriptor_, &PingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryOpRequest_descriptor_, &BinaryOpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryOpResponse_descriptor_, &BinaryOpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringMirrorRequest_descriptor_, &StringMirrorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringMirrorResponse_descriptor_, &StringMirrorResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_testservices_2eproto() {
  delete PingRequest::default_instance_;
  delete PingRequest_reflection_;
  delete PingResponse::default_instance_;
  delete PingResponse_reflection_;
  delete BinaryOpRequest::default_instance_;
  delete BinaryOpRequest_reflection_;
  delete BinaryOpResponse::default_instance_;
  delete BinaryOpResponse_reflection_;
  delete StringMirrorRequest::default_instance_;
  delete StringMirrorRequest_reflection_;
  delete StringMirrorResponse::default_instance_;
  delete StringMirrorResponse_reflection_;
}

void protobuf_AddDesc_testservices_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022testservices.proto\022\005tests\"5\n\013PingReque"
    "st\022\014\n\004ping\030\001 \002(\t\022\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002"
    "(\005\",\n\014PingResponse\022\016\n\006result\030\001 \002(\t\022\014\n\004po"
    "ng\030\002 \002(\t\"J\n\017BinaryOpRequest\022\r\n\005first\030\001 \002"
    "(\005\022\016\n\006second\030\002 \002(\005\022\n\n\002ip\030\003 \002(\t\022\014\n\004port\030\004"
    " \002(\005\"\"\n\020BinaryOpResponse\022\016\n\006result\030\001 \002(\005"
    "\"S\n\023StringMirrorRequest\022\017\n\007message\030\001 \002(\t"
    "\022\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\022\021\n\tnot_pause\030"
    "\004 \001(\010\"/\n\024StringMirrorResponse\022\027\n\017mirrore"
    "d_string\030\001 \002(\t2;\n\010PingTest\022/\n\004Ping\022\022.tes"
    "ts.PingRequest\032\023.tests.PingResponse2~\n\006T"
    "estOp\0226\n\003Add\022\026.tests.BinaryOpRequest\032\027.t"
    "ests.BinaryOpResponse\022<\n\tMultiplyl\022\026.tes"
    "ts.BinaryOpRequest\032\027.tests.BinaryOpRespo"
    "nse2O\n\nMirrorTest\022A\n\006Mirror\022\032.tests.Stri"
    "ngMirrorRequest\032\033.tests.StringMirrorResp"
    "onse", 644);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "testservices.proto", &protobuf_RegisterTypes);
  PingRequest::default_instance_ = new PingRequest();
  PingResponse::default_instance_ = new PingResponse();
  BinaryOpRequest::default_instance_ = new BinaryOpRequest();
  BinaryOpResponse::default_instance_ = new BinaryOpResponse();
  StringMirrorRequest::default_instance_ = new StringMirrorRequest();
  StringMirrorResponse::default_instance_ = new StringMirrorResponse();
  PingRequest::default_instance_->InitAsDefaultInstance();
  PingResponse::default_instance_->InitAsDefaultInstance();
  BinaryOpRequest::default_instance_->InitAsDefaultInstance();
  BinaryOpResponse::default_instance_->InitAsDefaultInstance();
  StringMirrorRequest::default_instance_->InitAsDefaultInstance();
  StringMirrorResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_testservices_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_testservices_2eproto {
  StaticDescriptorInitializer_testservices_2eproto() {
    protobuf_AddDesc_testservices_2eproto();
  }
} static_descriptor_initializer_testservices_2eproto_;


// ===================================================================

const ::std::string PingRequest::_default_ping_;
const ::std::string PingRequest::_default_ip_;
#ifndef _MSC_VER
const int PingRequest::kPingFieldNumber;
const int PingRequest::kIpFieldNumber;
const int PingRequest::kPortFieldNumber;
#endif  // !_MSC_VER

PingRequest::PingRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    ping_(const_cast< ::std::string*>(&_default_ping_)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0) {
  SharedCtor();
}

void PingRequest::InitAsDefaultInstance() {}

PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    ping_(const_cast< ::std::string*>(&_default_ping_)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0) {
  SharedCtor();
  MergeFrom(from);
}

void PingRequest::SharedCtor() {
  _cached_size_ = 0;
  ping_ = const_cast< ::std::string*>(&_default_ping_);
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingRequest::~PingRequest() {
  SharedDtor();
}

void PingRequest::SharedDtor() {
  if (ping_ != &_default_ping_) {
    delete ping_;
  }
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingRequest_descriptor_;
}

const PingRequest& PingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_testservices_2eproto();  return *default_instance_;
}

PingRequest* PingRequest::default_instance_ = NULL;

PingRequest* PingRequest::New() const {
  return new PingRequest;
}

void PingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ping_ != &_default_ping_) {
        ping_->clear();
      }
    }
    if (_has_bit(1)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string ping = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_ping()));
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_ip()));
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &port_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PingRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string ping = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->ping(), output);
  }
  
  // required string ip = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->ip(), output);
  }
  
  // required int32 port = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ping = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->ping(), target);
  }
  
  // required string ip = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->ip(), target);
  }
  
  // required int32 port = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ping = 1;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->ping());
    }
    
    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->ip());
    }
    
    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ping(from.ping());
    }
    if (from._has_bit(1)) {
      set_ip(from.ip());
    }
    if (from._has_bit(2)) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::Swap(PingRequest* other) {
  if (other != this) {
    std::swap(ping_, other->ping_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* PingRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PingRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PingRequest_reflection_;
}

// ===================================================================

const ::std::string PingResponse::_default_result_;
const ::std::string PingResponse::_default_pong_;
#ifndef _MSC_VER
const int PingResponse::kResultFieldNumber;
const int PingResponse::kPongFieldNumber;
#endif  // !_MSC_VER

PingResponse::PingResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    pong_(const_cast< ::std::string*>(&_default_pong_)) {
  SharedCtor();
}

void PingResponse::InitAsDefaultInstance() {}

PingResponse::PingResponse(const PingResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(const_cast< ::std::string*>(&_default_result_)),
    pong_(const_cast< ::std::string*>(&_default_pong_)) {
  SharedCtor();
  MergeFrom(from);
}

void PingResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&_default_result_);
  pong_ = const_cast< ::std::string*>(&_default_pong_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingResponse::~PingResponse() {
  SharedDtor();
}

void PingResponse::SharedDtor() {
  if (result_ != &_default_result_) {
    delete result_;
  }
  if (pong_ != &_default_pong_) {
    delete pong_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingResponse_descriptor_;
}

const PingResponse& PingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_testservices_2eproto();  return *default_instance_;
}

PingResponse* PingResponse::default_instance_ = NULL;

PingResponse* PingResponse::New() const {
  return new PingResponse;
}

void PingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != &_default_result_) {
        result_->clear();
      }
    }
    if (_has_bit(1)) {
      if (pong_ != &_default_pong_) {
        pong_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_result()));
        if (input->ExpectTag(18)) goto parse_pong;
        break;
      }
      
      // required string pong = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pong:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_pong()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PingResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->result(), output);
  }
  
  // required string pong = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->pong(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->result(), target);
  }
  
  // required string pong = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->pong(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->result());
    }
    
    // required string pong = 2;
    if (has_pong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->pong());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingResponse::MergeFrom(const PingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pong(from.pong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::CopyFrom(const PingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::Swap(PingResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pong_, other->pong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* PingResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PingResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PingResponse_reflection_;
}

// ===================================================================

const ::std::string BinaryOpRequest::_default_ip_;
#ifndef _MSC_VER
const int BinaryOpRequest::kFirstFieldNumber;
const int BinaryOpRequest::kSecondFieldNumber;
const int BinaryOpRequest::kIpFieldNumber;
const int BinaryOpRequest::kPortFieldNumber;
#endif  // !_MSC_VER

BinaryOpRequest::BinaryOpRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    first_(0),
    second_(0),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0) {
  SharedCtor();
}

void BinaryOpRequest::InitAsDefaultInstance() {}

BinaryOpRequest::BinaryOpRequest(const BinaryOpRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    first_(0),
    second_(0),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0) {
  SharedCtor();
  MergeFrom(from);
}

void BinaryOpRequest::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0;
  second_ = 0;
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryOpRequest::~BinaryOpRequest() {
  SharedDtor();
}

void BinaryOpRequest::SharedDtor() {
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BinaryOpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryOpRequest_descriptor_;
}

const BinaryOpRequest& BinaryOpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_testservices_2eproto();  return *default_instance_;
}

BinaryOpRequest* BinaryOpRequest::default_instance_ = NULL;

BinaryOpRequest* BinaryOpRequest::New() const {
  return new BinaryOpRequest;
}

void BinaryOpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = 0;
    second_ = 0;
    if (_has_bit(2)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryOpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int32 first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &first_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }
      
      // required int32 second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_second:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &second_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }
      
      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_ip()));
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }
      
      // required int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &port_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BinaryOpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BinaryOpRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 first = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->first(), output);
  }
  
  // required int32 second = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->second(), output);
  }
  
  // required string ip = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->ip(), output);
  }
  
  // required int32 port = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BinaryOpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 first = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->first(), target);
  }
  
  // required int32 second = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->second(), target);
  }
  
  // required string ip = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->ip(), target);
  }
  
  // required int32 port = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BinaryOpRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->first());
    }
    
    // required int32 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->second());
    }
    
    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->ip());
    }
    
    // required int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BinaryOpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryOpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryOpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryOpRequest::MergeFrom(const BinaryOpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_first(from.first());
    }
    if (from._has_bit(1)) {
      set_second(from.second());
    }
    if (from._has_bit(2)) {
      set_ip(from.ip());
    }
    if (from._has_bit(3)) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryOpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryOpRequest::CopyFrom(const BinaryOpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryOpRequest::Swap(BinaryOpRequest* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool BinaryOpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* BinaryOpRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* BinaryOpRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return BinaryOpRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int BinaryOpResponse::kResultFieldNumber;
#endif  // !_MSC_VER

BinaryOpResponse::BinaryOpResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0) {
  SharedCtor();
}

void BinaryOpResponse::InitAsDefaultInstance() {}

BinaryOpResponse::BinaryOpResponse(const BinaryOpResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0) {
  SharedCtor();
  MergeFrom(from);
}

void BinaryOpResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryOpResponse::~BinaryOpResponse() {
  SharedDtor();
}

void BinaryOpResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BinaryOpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryOpResponse_descriptor_;
}

const BinaryOpResponse& BinaryOpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_testservices_2eproto();  return *default_instance_;
}

BinaryOpResponse* BinaryOpResponse::default_instance_ = NULL;

BinaryOpResponse* BinaryOpResponse::New() const {
  return new BinaryOpResponse;
}

void BinaryOpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryOpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BinaryOpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BinaryOpResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BinaryOpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BinaryOpResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BinaryOpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryOpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryOpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryOpResponse::MergeFrom(const BinaryOpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryOpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryOpResponse::CopyFrom(const BinaryOpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryOpResponse::Swap(BinaryOpResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool BinaryOpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* BinaryOpResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* BinaryOpResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return BinaryOpResponse_reflection_;
}

// ===================================================================

const ::std::string StringMirrorRequest::_default_message_;
const ::std::string StringMirrorRequest::_default_ip_;
#ifndef _MSC_VER
const int StringMirrorRequest::kMessageFieldNumber;
const int StringMirrorRequest::kIpFieldNumber;
const int StringMirrorRequest::kPortFieldNumber;
const int StringMirrorRequest::kNotPauseFieldNumber;
#endif  // !_MSC_VER

StringMirrorRequest::StringMirrorRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    message_(const_cast< ::std::string*>(&_default_message_)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0),
    not_pause_(false) {
  SharedCtor();
}

void StringMirrorRequest::InitAsDefaultInstance() {}

StringMirrorRequest::StringMirrorRequest(const StringMirrorRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    message_(const_cast< ::std::string*>(&_default_message_)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0),
    not_pause_(false) {
  SharedCtor();
  MergeFrom(from);
}

void StringMirrorRequest::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  port_ = 0;
  not_pause_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringMirrorRequest::~StringMirrorRequest() {
  SharedDtor();
}

void StringMirrorRequest::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StringMirrorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringMirrorRequest_descriptor_;
}

const StringMirrorRequest& StringMirrorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_testservices_2eproto();  return *default_instance_;
}

StringMirrorRequest* StringMirrorRequest::default_instance_ = NULL;

StringMirrorRequest* StringMirrorRequest::New() const {
  return new StringMirrorRequest;
}

void StringMirrorRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
    if (_has_bit(1)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    port_ = 0;
    not_pause_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringMirrorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_message()));
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_ip()));
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &port_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_not_pause;
        break;
      }
      
      // optional bool not_pause = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_not_pause:
        DO_(::google::protobuf::internal::WireFormat::ReadBool(
              input, &not_pause_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringMirrorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StringMirrorRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string message = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->message(), output);
  }
  
  // required string ip = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->ip(), output);
  }
  
  // required int32 port = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->port(), output);
  }
  
  // optional bool not_pause = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBool(4, this->not_pause(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringMirrorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->message(), target);
  }
  
  // required string ip = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->ip(), target);
  }
  
  // required int32 port = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->port(), target);
  }
  
  // optional bool not_pause = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBoolToArray(4, this->not_pause(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringMirrorRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->message());
    }
    
    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->ip());
    }
    
    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->port());
    }
    
    // optional bool not_pause = 4;
    if (has_not_pause()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StringMirrorRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringMirrorRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringMirrorRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringMirrorRequest::MergeFrom(const StringMirrorRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_message(from.message());
    }
    if (from._has_bit(1)) {
      set_ip(from.ip());
    }
    if (from._has_bit(2)) {
      set_port(from.port());
    }
    if (from._has_bit(3)) {
      set_not_pause(from.not_pause());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringMirrorRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMirrorRequest::CopyFrom(const StringMirrorRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMirrorRequest::Swap(StringMirrorRequest* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(not_pause_, other->not_pause_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StringMirrorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StringMirrorRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StringMirrorRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StringMirrorRequest_reflection_;
}

// ===================================================================

const ::std::string StringMirrorResponse::_default_mirrored_string_;
#ifndef _MSC_VER
const int StringMirrorResponse::kMirroredStringFieldNumber;
#endif  // !_MSC_VER

StringMirrorResponse::StringMirrorResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    mirrored_string_(const_cast< ::std::string*>(&_default_mirrored_string_)) {
  SharedCtor();
}

void StringMirrorResponse::InitAsDefaultInstance() {}

StringMirrorResponse::StringMirrorResponse(const StringMirrorResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    mirrored_string_(const_cast< ::std::string*>(&_default_mirrored_string_)) {
  SharedCtor();
  MergeFrom(from);
}

void StringMirrorResponse::SharedCtor() {
  _cached_size_ = 0;
  mirrored_string_ = const_cast< ::std::string*>(&_default_mirrored_string_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringMirrorResponse::~StringMirrorResponse() {
  SharedDtor();
}

void StringMirrorResponse::SharedDtor() {
  if (mirrored_string_ != &_default_mirrored_string_) {
    delete mirrored_string_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StringMirrorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringMirrorResponse_descriptor_;
}

const StringMirrorResponse& StringMirrorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_testservices_2eproto();  return *default_instance_;
}

StringMirrorResponse* StringMirrorResponse::default_instance_ = NULL;

StringMirrorResponse* StringMirrorResponse::New() const {
  return new StringMirrorResponse;
}

void StringMirrorResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (mirrored_string_ != &_default_mirrored_string_) {
        mirrored_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringMirrorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string mirrored_string = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mirrored_string()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringMirrorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StringMirrorResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string mirrored_string = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->mirrored_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringMirrorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string mirrored_string = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->mirrored_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringMirrorResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mirrored_string = 1;
    if (has_mirrored_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mirrored_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StringMirrorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringMirrorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringMirrorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringMirrorResponse::MergeFrom(const StringMirrorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mirrored_string(from.mirrored_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringMirrorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMirrorResponse::CopyFrom(const StringMirrorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMirrorResponse::Swap(StringMirrorResponse* other) {
  if (other != this) {
    std::swap(mirrored_string_, other->mirrored_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StringMirrorResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StringMirrorResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StringMirrorResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StringMirrorResponse_reflection_;
}

// ===================================================================

PingTest::~PingTest() {}

const ::google::protobuf::ServiceDescriptor* PingTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingTest_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* PingTest::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingTest_descriptor_;
}

void PingTest::Ping(::google::protobuf::RpcController* controller,
                         const ::tests::PingRequest*,
                         ::tests::PingResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Ping() not implemented.");
  done->Run();
}

void PingTest::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), PingTest_descriptor_);
  switch(method->index()) {
    case 0:
      Ping(controller,
             ::google::protobuf::down_cast<const ::tests::PingRequest*>(request),
             ::google::protobuf::down_cast< ::tests::PingResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PingTest::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tests::PingRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& PingTest::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tests::PingResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

PingTest_Stub::PingTest_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PingTest_Stub::PingTest_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PingTest_Stub::~PingTest_Stub() {
  if (owns_channel_) delete channel_;
}

void PingTest_Stub::Ping(::google::protobuf::RpcController* controller,
                              const ::tests::PingRequest* request,
                              ::tests::PingResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

TestOp::~TestOp() {}

const ::google::protobuf::ServiceDescriptor* TestOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestOp_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* TestOp::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestOp_descriptor_;
}

void TestOp::Add(::google::protobuf::RpcController* controller,
                         const ::tests::BinaryOpRequest*,
                         ::tests::BinaryOpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Add() not implemented.");
  done->Run();
}

void TestOp::Multiplyl(::google::protobuf::RpcController* controller,
                         const ::tests::BinaryOpRequest*,
                         ::tests::BinaryOpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Multiplyl() not implemented.");
  done->Run();
}

void TestOp::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), TestOp_descriptor_);
  switch(method->index()) {
    case 0:
      Add(controller,
             ::google::protobuf::down_cast<const ::tests::BinaryOpRequest*>(request),
             ::google::protobuf::down_cast< ::tests::BinaryOpResponse*>(response),
             done);
      break;
    case 1:
      Multiplyl(controller,
             ::google::protobuf::down_cast<const ::tests::BinaryOpRequest*>(request),
             ::google::protobuf::down_cast< ::tests::BinaryOpResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TestOp::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tests::BinaryOpRequest::default_instance();
    case 1:
      return ::tests::BinaryOpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& TestOp::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tests::BinaryOpResponse::default_instance();
    case 1:
      return ::tests::BinaryOpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

TestOp_Stub::TestOp_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestOp_Stub::TestOp_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TestOp_Stub::~TestOp_Stub() {
  if (owns_channel_) delete channel_;
}

void TestOp_Stub::Add(::google::protobuf::RpcController* controller,
                              const ::tests::BinaryOpRequest* request,
                              ::tests::BinaryOpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TestOp_Stub::Multiplyl(::google::protobuf::RpcController* controller,
                              const ::tests::BinaryOpRequest* request,
                              ::tests::BinaryOpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

MirrorTest::~MirrorTest() {}

const ::google::protobuf::ServiceDescriptor* MirrorTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MirrorTest_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* MirrorTest::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return MirrorTest_descriptor_;
}

void MirrorTest::Mirror(::google::protobuf::RpcController* controller,
                         const ::tests::StringMirrorRequest*,
                         ::tests::StringMirrorResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Mirror() not implemented.");
  done->Run();
}

void MirrorTest::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), MirrorTest_descriptor_);
  switch(method->index()) {
    case 0:
      Mirror(controller,
             ::google::protobuf::down_cast<const ::tests::StringMirrorRequest*>(request),
             ::google::protobuf::down_cast< ::tests::StringMirrorResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MirrorTest::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tests::StringMirrorRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& MirrorTest::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tests::StringMirrorResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

MirrorTest_Stub::MirrorTest_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MirrorTest_Stub::MirrorTest_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MirrorTest_Stub::~MirrorTest_Stub() {
  if (owns_channel_) delete channel_;
}

void MirrorTest_Stub::Mirror(::google::protobuf::RpcController* controller,
                              const ::tests::StringMirrorRequest* request,
                              ::tests::StringMirrorResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

}  // namespace tests
