CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
PROJECT(MAIDSAFE)
MESSAGE("================================================================================\n")
SET(CMAKE_CACHEFILE "${CMAKE_CACHEFILE_DIR}/CMakeCache.txt")
IF (WIN32)
  STRING(REPLACE "/" "\\" CMAKE_CACHEFILE ${CMAKE_CACHEFILE})
ENDIF (WIN32)
SET(ERROR_MESSAGE "No generator previously specified.  Run:\n")
IF (UNIX)
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}\trm ${CMAKE_CACHEFILE}\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}then run e.g:\n\tcmake ../.. -G\"CodeBlocks - Unix Makefiles\"\n\n")
ELSE (UNIX)
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}\tdel ${CMAKE_CACHEFILE}\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}then run e.g:\n\tcmake ../.. -G\"CodeBlocks - MinGW Makefiles\"\n\n")
ENDIF (UNIX)
SET(ERROR_MESSAGE "${ERROR_MESSAGE}To see a full list of generators, run:\n\tcmake ../.. --help\n")
SET(CMAKE_GEN ${CMAKE_GENERATOR} CACHE INTERNAL "" FORCE)
IF (NOT ${CMAKE_C_COMPILER_WORKS})
  MESSAGE(FATAL_ERROR ${ERROR_MESSAGE})
ENDIF (NOT ${CMAKE_C_COMPILER_WORKS})

IF (NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE "Release" CACHE INTERNAL "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel." FORCE)
ENDIF (NOT CMAKE_BUILD_TYPE)
IF (NOT MAIDSAFE_TEST_TYPE)
  SET(MAIDSAFE_TEST_TYPE "BEH" CACHE INTERNAL "Choose the type of TEST, options are: _ BEH FUNC" FORCE)
ENDIF (NOT MAIDSAFE_TEST_TYPE)

IF (UNIX)
  EXECUTE_PROCESS(COMMAND date +%a%d%m%y OUTPUT_VARIABLE pddate OUTPUT_STRIP_TRAILING_WHITESPACE)
ELSE (UNIX)
  EXECUTE_PROCESS(COMMAND CMD /C DATE /T OUTPUT_VARIABLE pddate OUTPUT_STRIP_TRAILING_WHITESPACE)
  STRING(REPLACE "/" "" pddate ${pddate})
  STRING(SUBSTRING ${pddate} 0 4 pddateddmm)
  STRING(SUBSTRING ${pddate} 6 2 pddateyy)
  SET(pddate ${pddateddmm}${pddateyy})
ENDIF (UNIX)

IF (APPLE)
  SET (CMAKE_OSX_SYSROOT "/")
ENDIF (APPLE)

#SET(CMAKE_REQUIRED_INCLUDES ${INCLUDE_DIR})

IF (CMAKE_BUILD_TYPE MATCHES "Release")
  MESSAGE("Building a package which is OK to release.")
  MESSAGE("------------------------------------------")
ELSE (CMAKE_BUILD_TYPE MATCHES "Release")
  MESSAGE("Building a package which is NOT OK to release.")
  MESSAGE("----------------------------------------------")
  SET(pddate "DEVELOPER_${pddate}")
ENDIF (CMAKE_BUILD_TYPE MATCHES "Release")

# setup a single target path for libraries and executables - 
# this avoids copying all the dlls and exes together
UNSET(LIBRARY_OUTPUT_PATH CACHE)
UNSET(EXECUTABLE_OUTPUT_PATH CACHE)
IF (MSVC)
  IF (CMAKE_CL_64)
    SET(LIBRARY_OUTPUT_PATH ${MAIDSAFE_BINARY_DIR}/bin/x64 CACHE PATH "Library target dir (x64).")
    SET(EXECUTABLE_OUTPUT_PATH ${MAIDSAFE_BINARY_DIR}/bin/x64 CACHE PATH "Executable target dir (x64).")
  ELSE (CMAKE_CL_64)
    SET(LIBRARY_OUTPUT_PATH ${MAIDSAFE_BINARY_DIR}/bin/win32 CACHE PATH "Library target dir (win32).")
    SET(EXECUTABLE_OUTPUT_PATH ${MAIDSAFE_BINARY_DIR}/bin/win32 CACHE PATH "Executable target dir (win32).")
  ENDIF(CMAKE_CL_64)
ELSE (MSVC)
  SET (EXECUTABLE_OUTPUT_PATH ${MAIDSAFE_BINARY_DIR}/bin CACHE PATH "Executable target dir .")
  SET (LIBRARY_OUTPUT_PATH ${MAIDSAFE_BINARY_DIR}/bin CACHE PATH "Executable target dir .")
ENDIF (MSVC)

###################################################################################################
# Boost libraries search                                                                          #
###################################################################################################
MESSAGE(STATUS "Check for boost libraries")
SET(Boost_USE_MULTITHREAD ON)
SET(Boost_ADDITIONAL_VERSIONS "1.41.0")
SET(Boost_FIND_REQUIRED "1.41.0")
SET(Boost_USE_STATIC_LIBS ON)
SET(BOOST_LIB_DIAGNOSTIC OFF)
#ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
  
IF (NOT MSVC)
  SET(OpenSSL_INCLUDE_DIR "/usr/include")
ENDIF (NOT MSVC)

FIND_PACKAGE(Boost COMPONENTS date_time filesystem thread program_options system regex)
IF (NOT Boost_FOUND)
  MESSAGE(ERROR "If installed run cmake ../.. -DBoost_ROOT=\"<The root directory of Boost install prefix>\"")
  MESSAGE(FATAL_ERROR "No proper boost libraries found. Halting.")
ELSE (NOT Boost_FOUND)
  MESSAGE(STATUS "Found Boost " ${Boost_LIB_VERSION})
ENDIF (NOT Boost_FOUND)

SET(LIBS_INCLUDE_DIRS ${LIBS_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
SET(LIBS_DIRS ${LIBS_DIRS} ${Boost_LIBRARY_DIRS})

###################################################################################################
# Google Glog library (logging) search. Only on UNIX, since currently it cannot be compiled on    #
# Windows with MinGW                                                                              #
###################################################################################################
INCLUDE(CheckIncludeFileCXX)
IF (UNIX)
  UNSET(GLOG_LIB CACHE)
  UNSET(GLOG_INCLUDE CACHE)
  SET(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} "${GLOG_ROOT}/include")
  FIND_LIBRARY(GLOG_LIB NAMES libglog.a glog 
               PATHS "${GLOG_ROOT}/lib"
               DOC "Path to glog library${DOC_LIB_DIR}")
  CHECK_INCLUDE_FILE_CXX(glog/logging.h GLOG_INCLUDE)
  IF (GLOG_LIB AND GLOG_INCLUDE)
    SET(HAVE_GLOG GLOG_LIB)
    MESSAGE("Using GLOG")
    IF (GLOG_ROOT)
      SET(LIBS_INCLUDE_DIRS ${LIBS_INCLUDE_DIRS} "${GLOG_ROOT}/include")
      SET(LIBS_DIR ${LIB_DIRS} "${GLOG_ROOT}/lib")
    ENDIF (GLOG_ROOT)
  ELSE (GLOG_LIB AND GLOG_INCLUDE)
    SET(GLOG_LIB "")
    MESSAGE("Not using GLOG")
    MESSAGE("If installed run cmake ../.. -DGLOG_ROOT=\"<The root directory of glog install prefix>\"")
    MESSAGE(" You can download it at http://code.google.com/p/google-glog\n")
  ENDIF (GLOG_LIB AND GLOG_INCLUDE)
ENDIF (UNIX)

CONFIGURE_FILE(${MAIDSAFE_SOURCE_DIR}/config.h.in ${MAIDSAFE_SOURCE_DIR}/maidsafe/config.h)

###################################################################################################
# Google Test library search                                                                      #
###################################################################################################
UNSET(GTEST_LIBRARY CACHE)
UNSET(GTEST_MAIN_LIBRARY CACHE)
UNSET(GTEST_INCLUDE_DIR CACHE)
UNSET(GTEST_INCLUDE CACHE)

FIND_PACKAGE(GTest)
IF (NOT GTEST_FOUND)
  MESSAGE(ERROR " GTest library not found.")
  MESSAGE(ERROR " If installed run cmake ../.. -DGTEST_ROOT=\"<The root directory of gtest install prefix>\"")
  MESSAGE(FATAL_ERROR " You can download it at http://code.google.com/p/googletest\n")
ELSE (NOT GTEST_FOUND)
   MESSAGE("GTest library found.")
   IF (APPLE)
     FOREACH(LIB ${GTEST_LIBRARIES})
       GET_FILENAME_COMPONENT(LIB_PATH ${LIB} PATH)
       BREAK()
     ENDFOREACH(LIB ${GTEST_LIBRARIES})
     SET(GTEST_LIBRARIES "gtest")
     SET(LIBS_DIRS ${LIBS_DIRS} ${LIB_PATH})
   ENDIF (APPLE)
   SET(LIBS_INCLUDE_DIRS ${LIBS_INCLUDE_DIRS} ${GTEST_INCLUDE_DIRS})
ENDIF (NOT GTEST_FOUND)

###################################################################################################
# Protocol Buffers library search                                                                 #
###################################################################################################
#Function to generate CC and header files derived from proto files
FUNCTION(GENERATE_PROTOBUF_FILES SRCS HDRS)
  IF (NOT ARGN)
    MESSAGE(SEND_ERROR "Error: PROTOBUF_GENERATE_CPP() called without any proto files")
    RETURN()
  ENDIF (NOT ARGN)

  FOREACH(FIL ${ARGN})
    GET_FILENAME_COMPONENT(ABS_FIL ${FIL} NAME)
    GET_FILENAME_COMPONENT(FIL_WE ${FIL} NAME_WE)
    GET_FILENAME_COMPONENT(FILES_PATH ${FIL} PATH)
    SET(FILES_PATH "${MAIDSAFE_SOURCE_DIR}/${FILES_PATH}")

    LIST(APPEND ${SRCS} "${CMAKE_CURRENT_BINARY_DIR}/${FIL_WE}.pb.cc")
    LIST(APPEND ${HDRS} "${CMAKE_CURRENT_BINARY_DIR}/${FIL_WE}.pb.h")

    MESSAGE("Running C++ protocol buffer compiler on ${FIL}")
    EXECUTE_PROCESS(WORKING_DIRECTORY ${FILES_PATH}
                    COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
                      "--cpp_out=."
                      "${ABS_FIL}")
  ENDFOREACH()

  SET_SOURCE_FILES_PROPERTIES(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)
  SET(${SRCS} ${${SRCS}} PARENT_SCOPE)
  SET(${HDRS} ${${HDRS}} PARENT_SCOPE)
ENDFUNCTION(GENERATE_PROTOBUF_FILES SRCS HDRS)

FUNCTION(COMPARE_VAR_VS_FILE  DIFF)
  FILE(STRINGS ${ARGV2} TMP_CONTENT)
  SET(CONTENT ${TMP_CONTENT} CACHE STRING "")
  IF (NOT "${CONTENT}" STREQUAL "${${ARGV1}}")
    SET(${ARGV1} ${TMP_CONTENT} CACHE STRING "Google proto file - Contents for${ARGV2}")
    SET(${DIFF} "FALSE" PARENT_SCOPE)
  ELSE (NOT "${CONTENT}" STREQUAL "${${ARGV1}}")
    SET(${DIFF} "TRUE" PARENT_SCOPE)
  ENDIF (NOT "${CONTENT}" STREQUAL "${${ARGV1}}")
  UNSET(CONTENT CACHE)
ENDFUNCTION(COMPARE_VAR_VS_FILE  DIFF)

FUNCTION(SET_PROTOFILEVAR_CONTENT)
  FILE(STRINGS ${ARGV1} TMP_CONTENT)
  SET(${ARGV0} ${TMP_CONTENT} CACHE STRING "Google proto file - Contents for${ARGV2}")
  UNSET(TMP_CONTENT CACHE)
ENDFUNCTION(SET_PROTOFILEVAR_CONTENT)

UNSET(PROTOBUF_LIBRARY CACHE)
UNSET(PROTOBUF_INCLUDE_DIR CACHE)
UNSET(PROTOBUF_PROTOC_EXECUTABLE CACHE)

SET(CMAKE_PROGRAM_PATH ${CMAKE_PROGRAM_PATH} ${PROTOC_EXE_PATH})
SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} ${PROTOBUF_INCLUDE_PATH})
SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${PROTOBUF_LIB_PATH})

FIND_PACKAGE(Protobuf REQUIRED)
IF (NOT PROTOBUF_FOUND)
  MESSAGE(ERROR_MESSAGE " Did not find Google Protobuf Library.")
  MESSAGE(ERROR_MESSAGE "If it is already installed, run cmake../.. -DPROTOBUF_INCLUDE_PATH=\"<Path to root of header files>\" -DPROTOBUF_LIB_PATH=\"<Path where libraries are installed>\"")
  MESSAGE(FATAL_ERROR " You can download it at http://code.google.com/apis/protocolbuffers\n")
ELSEIF (NOT PROTOBUF_PROTOC_EXECUTABLE)
  MESSAGE(ERROR_MESSAGE " Did not find Google Protobuf protoc compiler")
  MESSAGE(ERROR_MESSAGE " If it is already installed, run cmake../.. -DPROTOC_EXE_PATH=\"<Path to protoc compiler>\"")
  MESSAGE(FATAL_ERROR " You can download it at http://code.google.com/apis/protocolbuffers\n")
ENDIF (NOT PROTOBUF_FOUND)

EXECUTE_PROCESS(COMMAND ${PROTOBUF_PROTOC_EXECUTABLE} "--version"
                OUTPUT_VARIABLE TMP_CURRENT_PROTOC_VERSION)

STRING(STRIP ${TMP_CURRENT_PROTOC_VERSION} CURRENT_PROTOC_VERSION)

MESSAGE("Google Protobuf Library found. ${CURRENT_PROTOC_VERSION}")

FILE(GLOB PROTO_FILES RELATIVE ${MAIDSAFE_SOURCE_DIR} "protobuf/*.proto")
FILE(GLOB TEST_PROTO_FILES RELATIVE ${MAIDSAFE_SOURCE_DIR} "tests/rpcprotocol/*.proto")
SET(PROTO_FILES ${PROTO_FILES} ${TEST_PROTO_FILES})

IF (PROTOC_VERSION STREQUAL CURRENT_PROTOC_VERSION)
  FOREACH(FNAME ${PROTO_FILES})
    GET_FILENAME_COMPONENT(FIL_WE ${FNAME} NAME_WE)
    COMPARE_VAR_VS_FILE(CONTENTS_DIFF ${FIL_WE} ${FNAME})
    IF (NOT CONTENTS_DIFF)
      GENERATE_PROTOBUF_FILES(PROTO_SRCS PROTO_HDRS ${FNAME})
    ELSE (NOT CONTENTS_DIFF)
      MESSAGE("proto file ${FNAME} hasn't changed. ${FIL_WE}.pb.cc and ${FIL_WE}.pb.h files are not regenerated")
    ENDIF (NOT CONTENTS_DIFF)
  ENDFOREACH(FNAME ${PROTO_FILES})
ELSE (PROTOC_VERSION STREQUAL CURRENT_PROTOC_VERSION)
  GENERATE_PROTOBUF_FILES(PROTO_SRCS PROTO_HDRS ${PROTO_FILES})
  FOREACH(FNAME ${PROTO_FILES})
    GET_FILENAME_COMPONENT(FIL_WE ${FNAME} NAME_WE)
    SET_PROTOFILEVAR_CONTENT(${FIL_WE} ${FNAME})
  ENDFOREACH(FNAME ${PROTO_FILES})
  SET(PROTOC_VERSION ${CURRENT_PROTOC_VERSION}
      CACHE STRING "Google Protocol Buffers - Current version"
      FORCE)
ENDIF (PROTOC_VERSION STREQUAL CURRENT_PROTOC_VERSION)

SET(LIBS_INCLUDE_DIRS ${LIBS_INCLUDE_DIRS} ${PROTOBUF_INCLUDE_DIR})
SET(LIBS_DIRS ${PROTOBUF_LIBRARY} ${PROTOBUF_LIB_PATH})
IF (APPLE)
  SET(PROTOBUF_LIBRARY protobuf)
ENDIF (APPLE)


###################################################################################################
# Python library search                                                                           #
###################################################################################################
UNSET(PYTHON_EXECUTABLE CACHE)
INCLUDE(FindPythonInterp)
INCLUDE(FindPythonLibs)
FIND_PACKAGE(PythonInterp)
IF(PYTHONINTERP_FOUND)
  MESSAGE("-- Found python executable: style checking enabled.")
ELSE(PYTHONINTERP_FOUND)
  MESSAGE("-- Didn't find python executable: style checking disabled.")
ENDIF(PYTHONINTERP_FOUND)

###################################################################################################
# All other libraries search                                                                      #
###################################################################################################
IF(UNIX)
  SET(SYS_LIB dl pthread)
  IF(NOT APPLE)
    SET(SYS_LIB rt c m ${SYS_LIB})
  ENDIF()
  FOREACH(library ${SYS_LIB})
    FIND_LIBRARY(CURRENT_LIB ${library})# ${LIB_DIR})
    IF(CURRENT_LIB)
      MESSAGE("-- Found library ${CURRENT_LIB}")
    ELSE(CURRENT_LIB)
      MESSAGE(FATAL_ERROR "\nCouldn't find library ${library}")
    ENDIF(CURRENT_LIB)
    UNSET(CURRENT_LIB CACHE)
  ENDFOREACH()
ELSEIF(WIN32)
  IF(MSVC)
    SET(SYS_LIB WSock32.lib IPHlpApi.lib)
  ELSE(MSVC)
    SET(SYS_LIB advapi32 kernel32 ws2_32 iphlpapi mswsock)
  ENDIF(MSVC)
  FOREACH(library ${SYS_LIB})
    FIND_LIBRARY(CURRENT_LIB ${library})# c:/usr/lib)
    IF(CURRENT_LIB)
      MESSAGE("-- Found library ${CURRENT_LIB}")
    ELSE(CURRENT_LIB)
      IF(NOT MSVC)
        MESSAGE(FATAL_ERROR "\nCouldn't find library ${library}")
      ENDIF(NOT MSVC)
    ENDIF(CURRENT_LIB)
    UNSET(CURRENT_LIB CACHE)
  ENDFOREACH()
ENDIF(UNIX)

SET(SYS_LIB ${SYS_LIB} ${Boost_LIBRARIES} ${GLOG_LIB} ${PROTOBUF_LIBRARY} )
INCLUDE_DIRECTORIES(${MAIDSAFE_SOURCE_DIR})
LIST(REMOVE_DUPLICATES LIBS_INCLUDE_DIRS)
INCLUDE_DIRECTORIES(AFTER SYSTEM ${LIBS_INCLUDE_DIRS})
MESSAGE("================================================================================")


# Stephan: I have moved preprocessor defines for MSVC here to have 
#          them with a little more explanation
#          you may consider doing the same for other targets such as MingW
IF(MSVC)
  # these are apparently necessary for MSVC to work
  ADD_DEFINITIONS(-DWIN32_LEAN_AND_MEAN)
  ADD_DEFINITIONS(-D_WIN32_WINNT=0x501)
	
  # This disables bogus warnings of the MS compiler trying to be witty.
  # It annoys and hides real issues, so better keep it
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
	
  # This is important! Those switches are necessary for boot to work, and yet 
  # they break ABI compatibility for C++ libs at least in Debug mode.
  # In most 3rd party libs they should be set as well, but if you add one,
  # remember this. SET THOSE VALUES EVERYWHERE YOU CAN!
  ADD_DEFINITIONS(-D_SECURE_SCL=0)
  ADD_DEFINITIONS(-D_HAS_ITERATOR_DEBUGGING=0)

  # prevents std::min() and std::max() to be overwritten
  ADD_DEFINITIONS(-DNOMINMAX)

  # please document us
  ADD_DEFINITIONS(-D__MSVC__)
  ADD_DEFINITIONS(-D__WIN32__)
  ADD_DEFINITIONS(-D_CONSOLE)
  ADD_DEFINITIONS(-D_UNICODE)
ENDIF(MSVC)


###################################################################################################
# Set up all files as GLOBs                                                                       #
###################################################################################################
####    CODE    ####
LIST(APPEND M_LIBUPNP_DIR 
       libupnp/igd_desc_parse.c  
       libupnp/minixml.c 
       libupnp/minisoap.c 
       libupnp/miniwget.c  	
       libupnp/upnpcommands.c 
       libupnp/upnpreplyparse.c 
       libupnp/upnperrors.c 
       libupnp/miniupnpc.c 	
       libupnp/minissdpc.c)
FILE(GLOB M_NATPMP_C "nat-pmp/*.c*")
FILE(GLOB M_NATPMP_H "nat-pmp/*.h*")
LIST(APPEND M_NATPMP_DIR ${M_NATPMP_C} ${M_NATPMP_H})
FILE(GLOB M_UPNP_C "upnp/*.c*")
FILE(GLOB M_UPNP_H "upnp/*.h*")
LIST(APPEND M_UPNP_DIR ${M_UPNP_C} ${M_UPNP_H})
LIST(REMOVE_ITEM M_UPNP_DIR "${MAIDSAFE_SOURCE_DIR}/upnp/upnpclientimpl.cc")
LIST(REMOVE_ITEM M_UPNP_DIR "${MAIDSAFE_SOURCE_DIR}/upnp/upnpclientimpl.h")
FILE(GLOB M_PROTOBUF_C "protobuf/*.c*")
FILE(GLOB M_PROTOBUF_H "protobuf/*.h*")
LIST(APPEND M_PROTOBUF_DIR ${M_PROTOBUF_C} ${M_PROTOBUF_H})
FILE(GLOB M_BASE_C "base/*.c*")
FILE(GLOB M_BASE_H "base/*.h*")
LIST(APPEND M_BASE_DIR ${M_BASE_C} ${M_BASE_H})
FILE(GLOB M_KADEMLIA_C "kademlia/*.c*")
FILE(GLOB M_KADEMLIA_H "kademlia/*.h*")
LIST(APPEND M_KADEMLIA_DIR ${M_KADEMLIA_C} ${M_KADEMLIA_H})
LIST(APPEND STYLE_KADEMLIA ${M_KADEMLIA_C} ${M_KADEMLIA_H})
FILE(GLOB PB_KADEMLIA "kademlia/*.pb.*")
FILE(GLOB M_TRANSPORT_C "transport/*.c*")
FILE(GLOB M_TRANSPORT_H "transport/*.h*")
LIST(APPEND M_TRANSPORT_DIR ${M_TRANSPORT_C} ${M_TRANSPORT_H})
FILE(GLOB MAIDSAFE_C "maidsafe/*.c*")
FILE(GLOB MAIDSAFE_H "maidsafe/*.h*")
LIST(APPEND MAIDSAFE_DIR ${MAIDSAFE_C} ${MAIDSAFE_H})
####    TESTS    ####
FILE(GLOB T_BASE_C "tests/base/*.c*")
FILE(GLOB T_BASE_H "tests/base/*.h*")
LIST(APPEND T_BASE_DIR ${T_BASE_C} ${T_BASE_H})
FILE(GLOB T_KADEMLIA_C "tests/kademlia/*.c*")
FILE(GLOB T_KADEMLIA_H "tests/kademlia/*.h*")
LIST(APPEND T_KADEMLIA_DIR ${T_KADEMLIA_C} ${T_KADEMLIA_H})
LIST(REMOVE_ITEM T_KADEMLIA_DIR "${MAIDSAFE_SOURCE_DIR}/tests/kademlia/testknode.cc")
FILE(GLOB T_TRANSPORT_C "tests/transport/*.c*")
FILE(GLOB T_TRANSPORT_H "tests/transport/*.h*")
LIST(APPEND T_TRANSPORT_DIR ${T_TRANSPORT_C} ${T_TRANSPORT_H})
FILE(GLOB T_MAIN  "tests/main.cc" "tests/validationimpl.h")
FILE(GLOB M_RPCPROTO_C "rpcprotocol/*.c*")
FILE(GLOB M_RPCPROTO_H "rpcprotocol/*.h*")
LIST(APPEND M_RPCPROTO_DIR ${M_RPCPROTO_C} ${M_RPCPROTO_H})
LIST(APPEND STYLE_RPCPROTO ${M_RPCPROTO_C} ${M_RPCPROTO_H})
FILE(GLOB T_RPCPROTO_C "tests/rpcprotocol/*.c*")
FILE(GLOB T_RPCPROTO_H "tests/rpcprotocol/*.h*")
LIST(APPEND T_RPCPROTO_DIR ${T_RPCPROTO_C} ${T_RPCPROTO_H})
FILE(GLOB STYLE_RPCPROTO_C "tests/rpcprotocol/*.c*")
FILE(GLOB STYLE_RPCPROTO_H "tests/rpcprotocol/*.h*")
LIST(APPEND STYLE_RPCPROTO_DIR ${STYLE_RPCPROTO_C} ${STYLE_RPCPROTO_H})
LIST(REMOVE_ITEM STYLE_RPCPROTO_DIR "${MAIDSAFE_SOURCE_DIR}/tests/rpcprotocol/testservices.pb.h")
LIST(REMOVE_ITEM STYLE_RPCPROTO_DIR "${MAIDSAFE_SOURCE_DIR}/tests/rpcprotocol/testservices.pb.cc")
FILE(GLOB T_NATPMP_C "tests/nat-pmp/*.c*")
FILE(GLOB T_NATPMP_H "tests/nat-pmp/*.h*")
LIST(APPEND T_NATPMP_DIR ${T_NATPMP_C} ${T_NATPMP_H})
FILE(GLOB T_UPNP_C "tests/upnp/*.c*")
FILE(GLOB T_UPNP_H "tests/upnp/*.h*")
LIST(APPEND T_UPNP_DIR ${T_UPNP_C} ${T_UPNP_H})
FILE(GLOB T_FUNC_KADEMLIA_C "tests/functionalkademlia/*.c*")
FILE(GLOB T_FUNC_KADEMLIA_H "tests/functionalkademlia/*.h*")
LIST(APPEND T_FUNC_KADEMLIA_DIR ${T_FUNC_KADEMLIA_C} ${T_FUNC_KADEMLIA_H})
LIST(REMOVE_ITEM T_FUNC_KADEMLIA_DIR "tests/kademlia/testknode.cc")
FILE(GLOB T_DEMO_C "tests/demo/*.c*")
FILE(GLOB T_DEMO_H "tests/demo/*.h*")
LIST(APPEND T_DEMO_DIR ${T_DEMO_C} ${T_DEMO_H})
LIST(APPEND DHT_SOURCE_FILES ${M_BASE_DIR} ${M_KADEMLIA_DIR} ${M_TRANSPORT_DIR} ${M_PROTOBUF_DIR} ${M_RPCPROTO_DIR} ${M_LIBUPNP_DIR} ${M_UPNP_DIR} ${M_NATPMP_DIR} ${MAIDSAFE_DIR})
###################################################################################################
# traverse subdirs for imported 3rd party libs                                                    #
###################################################################################################
ADD_SUBDIRECTORY(udt)
#ADD_SUBDIRECTORY(libupnp)
ADD_SUBDIRECTORY(cryptopp)
###################################################################################################
# All Platforms:  Add Test Exes and Create all maidsafe-dht libs                                  #
###################################################################################################
ADD_EXECUTABLE(TESTbase ${T_MAIN} ${T_BASE_DIR} ${MAIDSAFE_H})
ADD_EXECUTABLE(TESTkademlia ${T_MAIN} ${T_KADEMLIA_DIR} ${MAIDSAFE_H})
ADD_EXECUTABLE(TESTknode "tests/kademlia/testknode.cc" ${MAIDSAFE_H})
ADD_EXECUTABLE(TESTtransport ${T_MAIN} ${T_TRANSPORT_DIR}  ${MAIDSAFE_H})
ADD_EXECUTABLE(TESTrpcprotocol ${T_MAIN} ${T_RPCPROTO_DIR}  ${MAIDSAFE_H})
ADD_EXECUTABLE(TESTnatpmp ${T_MAIN} ${T_NATPMP_DIR}  ${MAIDSAFE_H})
ADD_EXECUTABLE(TESTupnp ${T_MAIN} ${T_UPNP_DIR} ${MAIDSAFE_H})
ADD_EXECUTABLE(kaddemo ${T_DEMO_DIR} ${MAIDSAFE_H} )
ADD_EXECUTABLE(kaddemostatic ${T_DEMO_DIR} ${MAIDSAFE_H} )

ADD_LIBRARY(maidsafe SHARED  ${DHT_SOURCE_FILES})
ADD_LIBRARY(maidsafe_static STATIC  ${DHT_SOURCE_FILES})
#Rename maidsafe_static as maidsafe on way out !
SET_TARGET_PROPERTIES(maidsafe_static PROPERTIES OUTPUT_NAME maidsafe)
###################################################################################################
# Builds                                                                                          #
###################################################################################################
IF (MSVC)
  SET(EXTENS .lib)
ELSE (MSVC)
  SET(EXTENS .a)
ENDIF(MSVC)	
SET(LINK_DIRECTORIES ${LIBRARY_OUTPUT_PATH} ${LIBS_DIRS})

SET(BUILD_SHARED_LIBS OFF)
ADD_DEFINITIONS(-DSTATICLIB)
#Ensure we pick up corret libs and not some older installed on 
IF (NOT MSVC)
  IF (NOT WIN32)
    SET_TARGET_PROPERTIES(maidsafe PROPERTIES IMPORTED_LOCATION bin/libmaidsafe.so)
    SET_TARGET_PROPERTIES(cryptopp PROPERTIES IMPORTED_LOCATION bin/libcryptopp.so)
    SET_TARGET_PROPERTIES(udt PROPERTIES IMPORTED_LOCATION bin/libudt.so)
  ELSE (WIN32)
    SET_TARGET_PROPERTIES(maidsafe PROPERTIES IMPORTED_LOCATION bin/libmaidsafe.dll)
    SET_TARGET_PROPERTIES(cryptopp PROPERTIES IMPORTED_LOCATION bin/libcryptopp.dll)
    SET_TARGET_PROPERTIES(udt PROPERTIES IMPORTED_LOCATION bin/libudt.dll)
  ENDIF (NOT WIN32)
  SET_TARGET_PROPERTIES(maidsafe_static PROPERTIES IMPORTED_LOCATION bin/libmaidsafe.a)
  SET_TARGET_PROPERTIES(cryptopp_static PROPERTIES IMPORTED_LOCATION bin/libcryptopp.a)
  SET_TARGET_PROPERTIES(udt_static PROPERTIES IMPORTED_LOCATION bin/libudt.a)
ELSE (NOT MSVC)
  SET_TARGET_PROPERTIES(maidsafe_static PROPERTIES IMPORTED_LOCATION bin/libmaidsafe.lib)
  SET_TARGET_PROPERTIES(maidsafe PROPERTIES IMPORTED_LOCATION bin/libmaidsafe.dll)
  SET_TARGET_PROPERTIES(cryptopp_static PROPERTIES IMPORTED_LOCATION bin/libcryptopp.lib)
  SET_TARGET_PROPERTIES(cryptopp PROPERTIES IMPORTED_LOCATION bin/libcryptopp.dll)
  SET_TARGET_PROPERTIES(udt_static PROPERTIES IMPORTED_LOCATION bin/libudt.lib)
  SET_TARGET_PROPERTIES(udt PROPERTIES  IMPORTED_LOCATION bin/libudt.dll)
ENDIF (NOT MSVC)

TARGET_LINK_LIBRARIES(TESTbase maidsafe_static udt_static cryptopp_static ${GTEST_LIBRARIES} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTtransport maidsafe_static udt_static cryptopp_static ${GTEST_LIBRARIES} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTrpcprotocol maidsafe_static udt_static cryptopp_static ${GTEST_LIBRARIES} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTkademlia maidsafe_static udt_static cryptopp_static ${GTEST_LIBRARIES} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTknode maidsafe_static udt_static cryptopp_static ${GTEST_LIBRARIES} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTnatpmp maidsafe_static udt_static cryptopp_static ${GTEST_LIBRARIES} ${SYS_LIB} )
TARGET_LINK_LIBRARIES(TESTupnp maidsafe_static udt_static cryptopp_static ${GTEST_LIBRARIES} ${SYS_LIB})
IF (WIN32 AND NOT MSVC)
  TARGET_LINK_LIBRARIES(maidsafe "-Wl,--enable-auto-import" udt cryptopp)# ${SYS_LIB})
  TARGET_LINK_LIBRARIES(kaddemo "-Wl,--enable-auto-import" maidsafe udt cryptopp ${SYS_LIB})
ELSE (WIN32 AND NOT MSVC)
  TARGET_LINK_LIBRARIES(kaddemo maidsafe udt cryptopp ${SYS_LIB})
ENDIF (WIN32 AND NOT MSVC)
TARGET_LINK_LIBRARIES(kaddemostatic maidsafe_static udt_static cryptopp_static ${SYS_LIB})
###################################################################################################
# Compiler and linker flags - after all targets declared                                          #
###################################################################################################
IF (CMAKE_BUILD_TYPE MATCHES "Release")
  ADD_DEFINITIONS(-DNDEBUG)
ELSEIF (CMAKE_BUILD_TYPE MATCHES "Debug")
  ADD_DEFINITIONS(-DDEBUG)
ENDIF(CMAKE_BUILD_TYPE MATCHES "Release")

####APPLE##############################
IF (APPLE)
  SET(CMAKE_AR "/usr/bin/libtool")
  SET(CMAKE_CXX_CREATE_STATIC_LIBRARY "<CMAKE_AR> -static -o <TARGET> <LINK_FLAGS> <OBJECTS>" "<CMAKE_RANLIB> <TARGET>")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_DARWIN_C_SOURCE")
  ADD_DEFINITIONS(-DOSX)
  ADD_DEFINITIONS(-DBSD)
  ADD_DEFINITIONS(-DCRYPTOPP_DISABLE_ASM)
  SET(MAIDSAFE_DHT_CXX_FLAGS "${CMAKE_CXX_FLAGS} -finline-functions -funswitch-loops -fgcse-after-reload -ftree-vectorize -D_FORTIFY_SOURCE=2 -D__FreeBSD__=10 -D_FILE_OFFSET_BITS=64")
  SET(MAIDSAFE_DHT_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wuninitialized")
  SET(MAIDSAFE_DHT_CXX_FLAGS "-w")
  IF(CMAKE_BUILD_TYPE MATCHES "Debug")
    SET_TARGET_PROPERTIES(maidsafe_static PROPERTIES LINK_FLAGS "-pg -fprofile-arcs -ftest-coverage")
  ENDIF(CMAKE_BUILD_TYPE MATCHES "Debug")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}" CACHE INTERNAL "" FORCE)
  SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -lgcov" CACHE INTERNAL "" FORCE)
  SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} -lgcov" CACHE INTERNAL "" FORCE)
######LINUX################################
ELSEIF (UNIX AND NOT APPLE)
  ADD_DEFINITIONS(-DMAIDSAFE_LINUX)
  SET(MAIDSAFE_DHT_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -fPIC -Wl,-z,relro -Wformat  -Wno-system-headers  -Wformat-security -Wall -finline-functions -funswitch-loops -fgcse-after-reload -ftree-vectorize -fpredictive-commoning -Wextra -Wfloat-equal -Wlong-long -Wredundant-decls -Wstrict-overflow=5 -Wunused-function -Wunused-label -Wunused-parameter -Wunused-value -Wunused-variable -std=c++98 -ansi -D_FORTIFY_SOURCE=2 -D_FILE_OFFSET_BITS=64")
  SET(MAIDSAFE_DHT_CXX_FLAGS_DEBUG "${MAIDSAFE_DHT_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG} -fPIC")
  SET(MAIDSAFE_DHT_CXX_FLAGS_RELEASE "${MAIDSAFE_DHT_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}  -Wuninitialized")
  IF(CMAKE_BUILD_TYPE MATCHES "Debug")
    SET_TARGET_PROPERTIES(maidsafe_static PROPERTIES LINK_FLAGS "-pg -fprofile-arcs -ftest-coverage")
  ENDIF(CMAKE_BUILD_TYPE MATCHES "Debug")
  SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -lgcov" CACHE INTERNAL "" FORCE)
  SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} -lgcov" CACHE INTERNAL "" FORCE)
  SET(SILENT_BUILD "-w -fPIC -DNDEBUG -O3 -march=native -mtune=native -pipe")
#######WINDOWS##############
ELSEIF (WIN32 AND NOT MSVC)
  ADD_DEFINITIONS(-DWIN32_LEAN_AND_MEAN)
  ADD_DEFINITIONS(-D__MINGW__)
  ADD_DEFINITIONS(-D_GLIBCXX_USE_WCHAR_T)
  ADD_DEFINITIONS(-DUNICODE)
  ADD_DEFINITIONS(-D_UNICODE)
  ADD_DEFINITIONS(-DWIN32)
  SET(MAIDSAFE_DHT_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -Wuninitialized")
  SET(MAIDSAFE_DHT_CXX_FLAGS "-Wall -finline-functions -Wextra -Wfloat-equal -Wlong-long -Wstrict-overflow=5 -Wunused-function -Wunused-parameter -Wunused-label -Wunused-value -Wunused-variable -Wwrite-strings -Wno-deprecated -Woverloaded-virtual -D_WIN32_WINNT=0x0501 -D_FORTIFY_SOURCE=2 -D_FILE_OFFSET_BITS=64")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DNDEBUG -DWIN32_LEAN_AND_MEAN -D__MINGW__  -D_GLIBCXX_USE_WCHAR_T -DUNICODE -D_UNICODE -DWIN32 -D_WIN32_WINNT=0x0501") 
  IF(CMAKE_BUILD_TYPE MATCHES "Debug")
    SET_TARGET_PROPERTIES(TESTbase TESTtransport TESTrpcprotocol TESTkademlia TESTknode TESTnatpmp TESTupnp PROPERTIES LINK_FLAGS "-lgcov -pg -fprofile-arcs -ftest-coverage")
  ENDIF(CMAKE_BUILD_TYPE MATCHES "Debug")   
 
  SET_TARGET_PROPERTIES(TESTbase TESTtransport TESTrpcprotocol TESTkademlia TESTknode TESTnatpmp TESTupnp kaddemo kaddemostatic  PROPERTIES LINK_FLAGS "-mthreads " )
  SET(SILENT_BUILD  "-mthreads -w -finline-functions -O3 -DNDEBUG -D__MINGW__ -DWIN32 -D_WIN32_WINNT=0x0501 -D_WIN32")
ENDIF (APPLE)

IF (NOT MSVC)
  SET(CMAKE_CXX_FLAGS "")
  SET(CMAKE_CXX_FLAGS_RELEASE "")
  SET(CMAKE_CXX_FLAGS_DEBUG "")
  IF (CMAKE_BUILD_TYPE MATCHES "Release")
    SET(MAIDSAFE_DHT_CXX_FLAGS "${MAIDSAFE_DHT_CXX_FLAGS} ${MAIDSAFE_DHT_CXX_FLAGS_RELEASE}")
  ELSE(CMAKE_BUILD_TYPE MATCHES "Release")
    SET(MAIDSAFE_DHT_CXX_FLAGS "${MAIDSAFE_DHT_CXX_FLAGS} ${MAIDSAFE_DHT_CXX_FLAGS_DEBUG}")
  ENDIF(CMAKE_BUILD_TYPE MATCHES "Release")
  SET_SOURCE_FILES_PROPERTIES(${DHT_SOURCE_FILES} COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})
  SET_SOURCE_FILES_PROPERTIES(${T_BASE_DIR} COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})
  SET_SOURCE_FILES_PROPERTIES(${T_TRANSPORT_DIR} COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})
  SET_SOURCE_FILES_PROPERTIES(${T_RPCPROTO_DIR} COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})
  SET_SOURCE_FILES_PROPERTIES(${T_UPNP_DIR} COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})
  SET_TARGET_PROPERTIES(TESTkademlia TESTknode PROPERTIES COMPILE_FLAGS ${MAIDSAFE_DHT_CXX_FLAGS})
  SET_SOURCE_FILES_PROPERTIES(base/crypto.cc  PROPERTIES COMPILE_FLAGS "${SILENT_BUILD}")
  SET_SOURCE_FILES_PROPERTIES(base/utils.cc  PROPERTIES COMPILE_FLAGS "${SILENT_BUILD}")
  SET_SOURCE_FILES_PROPERTIES("*boost/*" PROPERTIES COMPILE_FLAGS "${SILENT_BUILD}")
  SET_SOURCE_FILES_PROPERTIES("*google/protobuf/repeated_field.h" PROPERTIES COMPILE_FLAGS "${SILENT_BUILD}")
  SET_SOURCE_FILES_PROPERTIES(${M_PROTOBUF_DIR}  PROPERTIES COMPILE_FLAGS "${SILENT_BUILD}")
  SET_SOURCE_FILES_PROPERTIES("${M_UPNP_DIR}" PROPERTIES COMPILE_FLAGS "${SILENT_BUILD}")
  SET_SOURCE_FILES_PROPERTIES(${M_LIBUPNP_DIR} PROPERTIES COMPILE_FLAGS "${CMAKE_C_FLAGS}")
ENDIF (NOT MSVC)

###################################################################################################
# Tests                                                                                           #
###################################################################################################
INCLUDE(CTest)
SET(CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE 50000)
SET(CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE 50000)
SET(CTEST_CONTINUOUS_DURATION 600)
SET(CTEST_CONTINUOUS_MINIMUM_INTERVAL 10)
SET(CTEST_START_WITH_EMPTY_BINARY_DIRECTORY true)
IF (PYTHONINTERP_FOUND)
  IF (UNIX)
    ADD_TEST(STYLE_CHECK_KAD ${MAIDSAFE_SOURCE_DIR}/cpplint.py ${STYLE_KADEMLIA} ${T_KADEMLIA_DIR} ${T_FUNC_KADEMLIA_DIR})
    SET_PROPERTY(TEST STYLE_CHECK_KAD PROPERTY LABELS Functional Kademlia CodingStyle)
    ADD_TEST(STYLE_CHECK_BASE ${MAIDSAFE_SOURCE_DIR}/cpplint.py ${M_BASE_DIR} ${T_BASE_DIR})
    SET_PROPERTY(TEST STYLE_CHECK_BASE PROPERTY LABELS Functional Base CodingStyle)
    ADD_TEST(STYLE_CHECK_RPC ${MAIDSAFE_SOURCE_DIR}/cpplint.py ${M_RPCPROTO_DIR} ${STYLE_RPCPROTO_DIR})
    SET_PROPERTY(TEST STYLE_CHECK_RPC PROPERTY LABELS Functional RpcProtocol CodingStyle)
  ELSE (UNIX)
    ADD_TEST(STYLE_CHECK finderrorsall.bat)
    SET_PROPERTY(TEST STYLE_CHECK PROPERTY LABELS Functional CodingStyle)
  ENDIF (UNIX)
ENDIF (PYTHONINTERP_FOUND)
SET(FOUNDALLTESTS true)
IF (UNIX)
  SET(TEST_EXECUTABLES TESTupnp TESTnatpmp TESTbase TESTknode TESTkademlia TESTtransport TESTrpcprotocol)
ELSE (UNIX)
  SET(TEST_EXECUTABLES TESTupnp.exe TESTnatpmp.exe TESTbase.exe TESTknode.exe TESTkademlia.exe TESTtransport.exe TESTrpcprotocol.exe)
ENDIF (UNIX)
FOREACH(TEST_EXECUTABLE ${TEST_EXECUTABLES})
  IF (NOT EXISTS ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE})
    IF (FOUNDALLTESTS)
      SET(FOUNDALLTESTS false)
      MESSAGE("")
      MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
      MESSAGE("")
    ENDIF (FOUNDALLTESTS)
    MESSAGE(WARNING "Cannot find ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE}")
  ELSE (NOT EXISTS ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE})
    EXECUTE_PROCESS(COMMAND ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE} --gtest_list_tests OUTPUT_VARIABLE maid_tests)
    STRING(REPLACE "\n" ";" maid_tests "${maid_tests}")
    STRING(REPLACE " " "" maid_tests "${maid_tests}")
    IF (NOT WIN32)
      STRING(REPLACE " " ";" TEST_EXECUTABLE "${TEST_EXECUTABLE}")
    ENDIF (NOT WIN32)
    FOREACH(tst ${maid_tests})
      IF (NOT "${tst}" MATCHES [_])
        STRING(REGEX REPLACE "Test" "" label_name ${tst})
        STRING(REPLACE "." "" label_name ${label_name})
      ENDIF (NOT "${tst}" MATCHES [_])
      IF (NOT "${tst}" MATCHES "(profiling).+" AND NOT "${tst}" MATCHES "Mergemismatchforsummaries+")
        IF (NOT "${tst}" MATCHES "(\\.$)")
          IF ("${tst}" MATCHES "(${MAIDSAFE_TEST_TYPE}).+")
            SET(all_tests ${all_tests} ${tst})
            ADD_TEST(${tst} ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE} --gtest_filter=*${tst}*)
            IF ("${tst}" MATCHES "^FUNC_" OR "${tst}" MATCHES "^DISABLED_FUNC_")
              SET_PROPERTY(TEST ${tst} PROPERTY LABELS Functional ${label_name})
              SET_PROPERTY(TEST ${tst} PROPERTY TIMEOUT 600)
            ELSEIF ("${tst}" MATCHES "^BEH_" OR "${tst}" MATCHES "^DISABLED_BEH_")
              SET_PROPERTY(TEST ${tst} PROPERTY LABELS Behavioural ${label_name})
              SET_PROPERTY(TEST ${tst} PROPERTY TIMEOUT 60)
            ELSE ("${tst}" MATCHES "^BEH_" OR "${tst}" MATCHES "^DISABLED_BEH_")
              MESSAGE("")
              MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
              MESSAGE("")
              MESSAGE(AUTHOR_WARNING "${tst} should be named \"BEH_...\" or \"FUNC_...\" (with an optional \"DISABLED_\" prepended).")
              MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
            ENDIF ("${tst}" MATCHES "^FUNC_" OR "${tst}" MATCHES "^DISABLED_FUNC_")
            EXECUTE_PROCESS(COMMAND ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE} --gtest_list_tests --gtest_filter=*${tst}* OUTPUT_VARIABLE repeateds)
            STRING(REGEX MATCHALL "\n" repeats ${repeateds})
            LIST(LENGTH repeats count)
            IF (count GREATER 2)
              SET(repeated_tests ${repeated_tests} ${tst})
            ENDIF (count GREATER 2)
          ENDIF ("${tst}" MATCHES "(${MAIDSAFE_TEST_TYPE}).+")
        ENDIF (NOT "${tst}" MATCHES "(\\.$)")
      ENDIF (NOT "${tst}" MATCHES "(profiling).+" AND NOT "${tst}" MATCHES "Mergemismatchforsummaries+")
    ENDFOREACH()
  ENDIF (NOT EXISTS ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE})
ENDFOREACH()
IF (NOT FOUNDALLTESTS)
  MESSAGE("Run cmake again after make to pick up tests.\n")
  MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
ENDIF (NOT FOUNDALLTESTS)

IF (NOT CMAKE_SUPPRESS_DEVELOPER_WARNINGS AND DEFINED repeated_tests)
  SET(WARNING_MESSAGE "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
  FOREACH(var ${repeated_tests})
    SET(WARNING_MESSAGE "${WARNING_MESSAGE}\nRepeated test name - ${var}")
  ENDFOREACH()
  SET(WARNING_MESSAGE "${WARNING_MESSAGE}\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
  MESSAGE(AUTHOR_WARNING ${WARNING_MESSAGE})
  MESSAGE("================================================================================")
ENDIF (NOT CMAKE_SUPPRESS_DEVELOPER_WARNINGS AND DEFINED repeated_tests)

SET(DART_TESTING_TIMEOUT 2400 CACHE INTERNAL "Maximum time allowed before CTest will kill the test.")
IF (UNIX)
  SET(MEMORYCHECK_COMMAND "/usr/bin/valgrind --show-reachable=no")
ENDIF (UNIX)

IF (NOT INSTALL_PREFIX)
  SET(CMAKE_INSTALL_PREFIX "/usr")
ELSE (NOT INSTALL_PREFIX)
  SET(CMAKE_INSTALL_PREFIX ${INSTALL_PREFIX})
ENDIF (NOT INSTALL_PREFIX)
###################################################################################################
MESSAGE("")
MESSAGE("Package version is set to \"${pddate}\"")
MESSAGE("================================================================================")
MESSAGE("")
MESSAGE("Tests included: \"${MAIDSAFE_TEST_TYPE}\"")
MESSAGE("")
MESSAGE("    To include all tests,                     cmake ../.. -DMAIDSAFE_TEST_TYPE=_")
MESSAGE("    To include behavioural tests,           cmake ../.. -DMAIDSAFE_TEST_TYPE=BEH")
MESSAGE("    To include functional tests,           cmake ../.. -DMAIDSAFE_TEST_TYPE=FUNC")
MESSAGE("================================================================================")
MESSAGE("")
MESSAGE("Build type is set to \"${CMAKE_BUILD_TYPE}\"")
MESSAGE("")
MESSAGE("    To alter this (e.g. to Debug),          cmake ../.. -DCMAKE_BUILD_TYPE=Debug")
MESSAGE("    Options are Release, Debug, RelWithDebInfo, MinSizeRel")
MESSAGE("================================================================================")
MESSAGE("")
MESSAGE("Install prefix is set to ${CMAKE_INSTALL_PREFIX}")
MESSAGE("")
MESSAGE("    To alter this (e.g. to /usr/local),   cmake ../..-DINSTALL_PREFIX=\"/usr/local\"")
MESSAGE("================================================================================")
MESSAGE("")

SET(PROTOBUF_INSTALL_FILES protobuf/signed_kadvalue.pb.h protobuf/kademlia_service_messages.pb.h protobuf/contact_info.pb.h protobuf/general_messages.pb.h)

IF (MSVC)
  INSTALL (TARGETS maidsafe maidsafe_static
           RUNTIME DESTINATION bin
           LIBRARY DESTINATION bin
           ARCHIVE DESTINATION lib
          )
ELSE (MSVC)
  INSTALL (TARGETS maidsafe maidsafe_static
           RUNTIME DESTINATION bin
           LIBRARY DESTINATION lib
           ARCHIVE DESTINATION lib
          )
ENDIF (MSVC)
INSTALL (FILES ${MAIDSAFE_H} ${PROTOBUF_INSTALL_FILES}
         DESTINATION include/maidsafe
        )

SET(CPACK_PACKAGE_VERSION_PATCH ${pddate})
SET(CPACK_PACKAGE_VERSION "0.1.${pddate}")
SET(CPACK_PACKAGE_VERSION_MAJOR "0")
SET(CPACK_PACKAGE_VERSION_MINOR "1")
SET(CPACK_PACKAGE_NAME "maidsafe")
SET(CPACK_PACKAGE_CONTACT "info@maidsafe.net")
SET(CPACK_PACKAGE_VENDOR "Maidsafe.net")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Perpetual Data - Client and Vault applications")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "Maidsafe")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${MAIDSAFE_SOURCE_DIR}/../docs/description.txt")
SET(CPACK_RESOURCE_FILE_LICENSE "${MAIDSAFE_SOURCE_DIR}/../docs/LICENSE.txt")
SET(CPACK_RESOURCE_FILE_README "${MAIDSAFE_SOURCE_DIR}/../docs/readme.txt")
SET(CPACK_RESOURCE_FILE_WELCOME "${MAIDSAFE_SOURCE_DIR}/../docs/welcome.txt")

MESSAGE("Install directory is set to \"${CPACK_PACKAGE_INSTALL_DIRECTORY}\"")
MESSAGE("================================================================================")

IF (UNIX)
  SET(CPACK_SET_DESTDIR on)
  SET(CPACK_GENERATOR DEB;RPM;TGZ)
ELSE (UNIX)
  SET(CPACK_GENERATOR ZIP)
ENDIF (UNIX)
INCLUDE(CPack)
